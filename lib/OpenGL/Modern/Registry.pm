package OpenGL::Modern::Registry;

# ATTENTION: This file is automatically generated by utils/generate-registry.pl
#            Manual changes will be lost.
use strict;
use warnings;

sub gl_functions {qw(
  glAccum
  glAcquireKeyedMutexWin32EXT
  glActiveProgramEXT
  glActiveShaderProgram
  glActiveStencilFaceEXT
  glActiveTexture
  glActiveTextureARB
  glActiveVaryingNV_c
  glAddressSpace
  glAddSwapHintRectWIN
  glAllocMPEGPredictorsSGIX_c
  glAlphaFragmentOp1ATI
  glAlphaFragmentOp2ATI
  glAlphaFragmentOp3ATI
  glAlphaFunc
  glAlphaFuncQCOM
  glAlphaFuncx
  glApplyTextureEXT
  glAreProgramsResidentNV_c
  glAreTexturesResidentEXT_c
  glAreTexturesResident_c
  glAreVertexArraysResidentSGIX_c
  glArrayElement
  glArrayElementEXT
  glArrayObjectATI
  glAsyncMarkerSGIX
  glAttachObjectARB
  glAttachShader
  glBegin
  glBeginConditionalRender
  glBeginConditionalRenderNV
  glBeginConditionalRenderNVX
  glBeginFragmentShaderATI
  glBeginOcclusionQueryNV
  glBeginPerfMonitorAMD
  glBeginPerfQueryINTEL
  glBeginQuery
  glBeginQueryANGLE
  glBeginQueryARB
  glBeginQueryIndexed
  glBeginSceneEXT
  glBeginTransformFeedback
  glBeginTransformFeedbackEXT
  glBeginTransformFeedbackNV
  glBeginVertexShaderEXT
  glBeginVideoCaptureNV
  glBindArraySetEXT_c
  glBindAttribLocationARB_c
  glBindAttribLocation_c
  glBindBuffer
  glBindBufferARB
  glBindBufferBase
  glBindBufferBaseEXT
  glBindBufferBaseNV
  glBindBufferOffsetEXT
  glBindBufferOffsetNV
  glBindBufferRange
  glBindBufferRangeEXT
  glBindBufferRangeNV
  glBindBuffersBase_c
  glBindBuffersRange_c
  glBindFragDataLocationEXT_c
  glBindFragDataLocationIndexedEXT_c
  glBindFragDataLocationIndexed_c
  glBindFragDataLocation_c
  glBindFragmentShaderATI
  glBindFramebuffer
  glBindFramebufferEXT
  glBindImageTexture
  glBindImageTextureEXT
  glBindImageTextures_c
  glBindLightParameterEXT
  glBindMaterialParameterEXT
  glBindMultiTextureEXT
  glBindParameterEXT
  glBindProgramARB
  glBindProgramNV
  glBindProgramPipeline
  glBindRenderbuffer
  glBindRenderbufferEXT
  glBindSampler
  glBindSamplers_c
  glBindTexGenParameterEXT
  glBindTexture
  glBindTextureEXT
  glBindTextures_c
  glBindTextureUnit
  glBindTextureUnitParameterEXT
  glBindTransformFeedback
  glBindTransformFeedbackNV
  glBindVertexArray
  glBindVertexArrayAPPLE
  glBindVertexArraySGIX
  glBindVertexBuffer
  glBindVertexBuffers_c
  glBindVertexShaderEXT
  glBindVideoCaptureStreamBufferNV
  glBindVideoCaptureStreamTextureNV
  glBinormalPointerEXT_c
  glBitmap_c
  glBlendBarrierKHR
  glBlendBarrierNV
  glBlendColor
  glBlendColorEXT
  glBlendEquation
  glBlendEquationEXT
  glBlendEquationi
  glBlendEquationiARB
  glBlendEquationiEXT
  glBlendEquationIndexedAMD
  glBlendEquationSeparate
  glBlendEquationSeparateEXT
  glBlendEquationSeparatei
  glBlendEquationSeparateiARB
  glBlendEquationSeparateiEXT
  glBlendEquationSeparateIndexedAMD
  glBlendFunc
  glBlendFunci
  glBlendFunciARB
  glBlendFunciEXT
  glBlendFuncIndexedAMD
  glBlendFuncSeparate
  glBlendFuncSeparateEXT
  glBlendFuncSeparatei
  glBlendFuncSeparateiARB
  glBlendFuncSeparateiEXT
  glBlendFuncSeparateIndexedAMD
  glBlendParameteriNV
  glBlitFramebuffer
  glBlitFramebufferANGLE
  glBlitFramebufferEXT
  glBlitFramebufferNV
  glBlitNamedFramebuffer
  glBufferAddressRangeNV
  glBufferDataARB_c
  glBufferData_c
  glBufferPageCommitmentARB
  glBufferParameteriAPPLE
  glBufferRegionEnabled
  glBufferStorageExternalEXT
  glBufferStorageEXT_c
  glBufferStorageMemEXT
  glBufferStorage_c
  glBufferSubDataARB_c
  glBufferSubData_c
  glCallCommandListNV
  glCallList
  glCallLists_c
  glCheckFramebufferStatus
  glCheckFramebufferStatusEXT
  glCheckNamedFramebufferStatus
  glCheckNamedFramebufferStatusEXT
  glClampColor
  glClampColorARB
  glClear
  glClearAccum
  glClearBufferData_c
  glClearBufferfi
  glClearBufferfv_c
  glClearBufferiv_c
  glClearBufferSubData_c
  glClearBufferuiv_c
  glClearColor
  glClearColorIiEXT
  glClearColorIuiEXT
  glClearColorx
  glClearDepth
  glClearDepthdNV
  glClearDepthf
  glClearDepthx
  glClearIndex
  glClearNamedBufferDataEXT_c
  glClearNamedBufferData_c
  glClearNamedBufferSubDataEXT_c
  glClearNamedBufferSubData_c
  glClearNamedFramebufferfi
  glClearNamedFramebufferfv_c
  glClearNamedFramebufferiv_c
  glClearNamedFramebufferuiv_c
  glClearPixelLocalStorageuiEXT_c
  glClearStencil
  glClearTexImageEXT_c
  glClearTexImage_c
  glClearTexSubImageEXT_c
  glClearTexSubImage_c
  glClientActiveTexture
  glClientActiveTextureARB
  glClientActiveVertexStreamATI
  glClientAttribDefaultEXT
  glClientWaitSync
  glClientWaitSyncAPPLE
  glClipControl
  glClipPlanef_c
  glClipPlanex_c
  glClipPlane_c
  glColor3b
  glColor3bv_c
  glColor3d
  glColor3dv_c
  glColor3f
  glColor3fVertex3fSUN
  glColor3fVertex3fvSUN_c
  glColor3fv_c
  glColor3hNV
  glColor3hvNV_c
  glColor3i
  glColor3iv_c
  glColor3s
  glColor3sv_c
  glColor3ub
  glColor3ubv_c
  glColor3ui
  glColor3uiv_c
  glColor3us
  glColor3usv_c
  glColor4b
  glColor4bv_c
  glColor4d
  glColor4dv_c
  glColor4f
  glColor4fNormal3fVertex3fSUN
  glColor4fNormal3fVertex3fvSUN_c
  glColor4fv_c
  glColor4hNV
  glColor4hvNV_c
  glColor4i
  glColor4iv_c
  glColor4s
  glColor4sv_c
  glColor4ub
  glColor4ubVertex2fSUN
  glColor4ubVertex2fvSUN_c
  glColor4ubVertex3fSUN
  glColor4ubVertex3fvSUN_c
  glColor4ubv_c
  glColor4ui
  glColor4uiv_c
  glColor4us
  glColor4usv_c
  glColor4x
  glColorFormatNV
  glColorFragmentOp1ATI
  glColorFragmentOp2ATI
  glColorFragmentOp3ATI
  glColorMask
  glColorMaski
  glColorMaskiEXT
  glColorMaskIndexedEXT
  glColorMaterial
  glColorP3ui
  glColorP3uiv_c
  glColorP4ui
  glColorP4uiv_c
  glColorPointerEXT_c
  glColorPointerListIBM_c
  glColorPointervINTEL_c
  glColorPointer_c
  glColorSubTableEXT_c
  glColorSubTable_c
  glColorTableEXT_c
  glColorTableParameterfvSGI_c
  glColorTableParameterfv_c
  glColorTableParameterivSGI_c
  glColorTableParameteriv_c
  glColorTableSGI_c
  glColorTable_c
  glCombinerInputNV
  glCombinerOutputNV
  glCombinerParameterfNV
  glCombinerParameterfvNV_c
  glCombinerParameteriNV
  glCombinerParameterivNV_c
  glCombinerStageParameterfvNV_c
  glCommandListSegmentsNV
  glCompileCommandListNV
  glCompileShader
  glCompileShaderARB
  glCompileShaderIncludeARB_c
  glCompressedMultiTexImage1DEXT_c
  glCompressedMultiTexImage2DEXT_c
  glCompressedMultiTexImage3DEXT_c
  glCompressedMultiTexSubImage1DEXT_c
  glCompressedMultiTexSubImage2DEXT_c
  glCompressedMultiTexSubImage3DEXT_c
  glCompressedTexImage1DARB_c
  glCompressedTexImage1D_c
  glCompressedTexImage2DARB_c
  glCompressedTexImage2D_c
  glCompressedTexImage3DARB_c
  glCompressedTexImage3DNV_c
  glCompressedTexImage3D_c
  glCompressedTexSubImage1DARB_c
  glCompressedTexSubImage1D_c
  glCompressedTexSubImage2DARB_c
  glCompressedTexSubImage2D_c
  glCompressedTexSubImage3DARB_c
  glCompressedTexSubImage3DNV_c
  glCompressedTexSubImage3D_c
  glCompressedTextureImage1DEXT_c
  glCompressedTextureImage2DEXT_c
  glCompressedTextureImage3DEXT_c
  glCompressedTextureSubImage1DEXT_c
  glCompressedTextureSubImage1D_c
  glCompressedTextureSubImage2DEXT_c
  glCompressedTextureSubImage2D_c
  glCompressedTextureSubImage3DEXT_c
  glCompressedTextureSubImage3D_c
  glConservativeRasterParameterfNV
  glConservativeRasterParameteriNV
  glConvolutionFilter1DEXT_c
  glConvolutionFilter1D_c
  glConvolutionFilter2DEXT_c
  glConvolutionFilter2D_c
  glConvolutionParameterf
  glConvolutionParameterfEXT
  glConvolutionParameterfvEXT_c
  glConvolutionParameterfv_c
  glConvolutionParameteri
  glConvolutionParameteriEXT
  glConvolutionParameterivEXT_c
  glConvolutionParameteriv_c
  glCopyBufferSubData
  glCopyBufferSubDataNV
  glCopyColorSubTable
  glCopyColorSubTableEXT
  glCopyColorTable
  glCopyColorTableSGI
  glCopyConvolutionFilter1D
  glCopyConvolutionFilter1DEXT
  glCopyConvolutionFilter2D
  glCopyConvolutionFilter2DEXT
  glCopyImageSubData
  glCopyImageSubDataEXT
  glCopyImageSubDataNV
  glCopyMultiTexImage1DEXT
  glCopyMultiTexImage2DEXT
  glCopyMultiTexSubImage1DEXT
  glCopyMultiTexSubImage2DEXT
  glCopyMultiTexSubImage3DEXT
  glCopyNamedBufferSubData
  glCopyPathNV
  glCopyPixels
  glCopyTexImage1D
  glCopyTexImage1DEXT
  glCopyTexImage2D
  glCopyTexImage2DEXT
  glCopyTexSubImage1D
  glCopyTexSubImage1DEXT
  glCopyTexSubImage2D
  glCopyTexSubImage2DEXT
  glCopyTexSubImage3D
  glCopyTexSubImage3DEXT
  glCopyTexSubImage3DNV
  glCopyTextureImage1DEXT
  glCopyTextureImage2DEXT
  glCopyTextureLevelsAPPLE
  glCopyTextureSubImage1D
  glCopyTextureSubImage1DEXT
  glCopyTextureSubImage2D
  glCopyTextureSubImage2DEXT
  glCopyTextureSubImage3D
  glCopyTextureSubImage3DEXT
  glCoverageModulationNV
  glCoverageModulationTableNV_c
  glCoverFillPathInstancedNV_c
  glCoverFillPathNV
  glCoverStrokePathInstancedNV_c
  glCoverStrokePathNV
  glCreateBuffers_c
  glCreateCommandListsNV_c
  glCreateFramebuffers_c
  glCreateMemoryObjectsEXT_c
  glCreatePerfQueryINTEL_c
  glCreateProgram
  glCreateProgramObjectARB
  glCreateProgramPipelines_c
  glCreateQueries_c
  glCreateRenderbuffers_c
  glCreateSamplers_c
  glCreateShader
  glCreateShaderObjectARB
  glCreateShaderProgramEXT_c
  glCreateShaderProgramv_c
  glCreateStatesNV_c
  glCreateSyncFromCLeventARB
  glCreateTextures_c
  glCreateTransformFeedbacks_c
  glCreateVertexArrays_c
  glCullFace
  glCullParameterdvEXT_c
  glCullParameterfvEXT_c
  glCurrentPaletteMatrixARB
  glDataPipe
  glDebugMessageCallbackAMD_c
  glDebugMessageCallbackARB_c
  glDebugMessageCallback_c
  glDebugMessageControlARB_c
  glDebugMessageControl_c
  glDebugMessageEnableAMD_c
  glDebugMessageInsertAMD_c
  glDebugMessageInsertARB_c
  glDebugMessageInsert_c
  glDeformSGIX
  glDeleteArraySetsEXT_c
  glDeleteAsyncMarkersSGIX
  glDeleteBufferRegion
  glDeleteBuffersARB_c
  glDeleteBuffers_c
  glDeleteCommandListsNV_c
  glDeleteFencesAPPLE_c
  glDeleteFencesNV_c
  glDeleteFragmentShaderATI
  glDeleteFramebuffersEXT_c
  glDeleteFramebuffers_c
  glDeleteLists
  glDeleteMemoryObjectsEXT_c
  glDeleteMPEGPredictorsSGIX_c
  glDeleteNamedStringARB_c
  glDeleteNamesAMD_c
  glDeleteObjectARB
  glDeleteOcclusionQueriesNV_c
  glDeletePathsNV
  glDeletePerfMonitorsAMD_c
  glDeletePerfQueryINTEL
  glDeleteProgram
  glDeleteProgramPipelines_c
  glDeleteProgramsARB_c
  glDeleteProgramsNV_c
  glDeleteQueriesANGLE_c
  glDeleteQueriesARB_c
  glDeleteQueries_c
  glDeleteRenderbuffersEXT_c
  glDeleteRenderbuffers_c
  glDeleteSamplers_c
  glDeleteSemaphoresEXT_c
  glDeleteShader
  glDeleteStatesNV_c
  glDeleteSync
  glDeleteSyncAPPLE
  glDeleteTexturesEXT_c
  glDeleteTextures_c
  glDeleteTransformFeedbacksNV_c
  glDeleteTransformFeedbacks_c
  glDeleteVertexArraysAPPLE_c
  glDeleteVertexArraysSGIX_c
  glDeleteVertexArrays_c
  glDeleteVertexShaderEXT
  glDepthBoundsdNV
  glDepthBoundsEXT
  glDepthFunc
  glDepthMask
  glDepthRange
  glDepthRangeArrayfvNV_c
  glDepthRangeArrayv_c
  glDepthRangedNV
  glDepthRangef
  glDepthRangeIndexed
  glDepthRangeIndexedfNV
  glDepthRangex
  glDetachObjectARB
  glDetachShader
  glDetailTexFuncSGIS_c
  glDisable
  glDisableClientState
  glDisableClientStateiEXT
  glDisableClientStateIndexedEXT
  glDisableDriverControlQCOM
  glDisablei
  glDisableiEXT
  glDisableIndexedEXT
  glDisableiNV
  glDisableVariantClientStateEXT
  glDisableVertexArrayAttrib
  glDisableVertexArrayAttribEXT
  glDisableVertexArrayEXT
  glDisableVertexAttribAPPLE
  glDisableVertexAttribArray
  glDisableVertexAttribArrayARB
  glDiscardFramebufferEXT_c
  glDispatchCompute
  glDispatchComputeGroupSizeARB
  glDispatchComputeIndirect
  glDrawArrays
  glDrawArraysEXT
  glDrawArraysIndirect_c
  glDrawArraysInstanced
  glDrawArraysInstancedANGLE
  glDrawArraysInstancedARB
  glDrawArraysInstancedBaseInstance
  glDrawArraysInstancedBaseInstanceEXT
  glDrawArraysInstancedEXT
  glDrawArraysInstancedNV
  glDrawBuffer
  glDrawBufferRegion
  glDrawBuffersARB_c
  glDrawBuffersATI_c
  glDrawBuffersEXT_c
  glDrawBuffersIndexedEXT_c
  glDrawBuffersNV_c
  glDrawBuffers_c
  glDrawCommandsAddressNV_c
  glDrawCommandsNV_c
  glDrawCommandsStatesAddressNV_c
  glDrawCommandsStatesNV_c
  glDrawElementArrayAPPLE
  glDrawElementArrayATI
  glDrawElementsBaseVertexEXT_c
  glDrawElementsBaseVertex_c
  glDrawElementsIndirect_c
  glDrawElementsInstancedANGLE_c
  glDrawElementsInstancedARB_c
  glDrawElementsInstancedBaseInstanceEXT_c
  glDrawElementsInstancedBaseInstance_c
  glDrawElementsInstancedBaseVertexBaseInstanceEXT_c
  glDrawElementsInstancedBaseVertexBaseInstance_c
  glDrawElementsInstancedBaseVertexEXT_c
  glDrawElementsInstancedBaseVertex_c
  glDrawElementsInstancedEXT_c
  glDrawElementsInstancedNV_c
  glDrawElementsInstanced_c
  glDrawElements_c
  glDrawPixels_c
  glDrawRangeElementArrayAPPLE
  glDrawRangeElementArrayATI
  glDrawRangeElementsBaseVertexEXT_c
  glDrawRangeElementsBaseVertex_c
  glDrawRangeElementsEXT_c
  glDrawRangeElements_c
  glDrawTextureNV
  glDrawTransformFeedback
  glDrawTransformFeedbackInstanced
  glDrawTransformFeedbackNV
  glDrawTransformFeedbackStream
  glDrawTransformFeedbackStreamInstanced
  glDrawVkImageNV
  glEdgeFlag
  glEdgeFlagFormatNV
  glEdgeFlagPointerEXT_c
  glEdgeFlagPointerListIBM_c
  glEdgeFlagPointer_c
  glEdgeFlagv_c
  glElementPointerAPPLE_c
  glElementPointerATI_c
  glEnable
  glEnableClientState
  glEnableClientStateiEXT
  glEnableClientStateIndexedEXT
  glEnableDriverControlQCOM
  glEnablei
  glEnableiEXT
  glEnableIndexedEXT
  glEnableiNV
  glEnableVariantClientStateEXT
  glEnableVertexArrayAttrib
  glEnableVertexArrayAttribEXT
  glEnableVertexArrayEXT
  glEnableVertexAttribAPPLE
  glEnableVertexAttribArray
  glEnableVertexAttribArrayARB
  glEnd
  glEndConditionalRender
  glEndConditionalRenderNV
  glEndConditionalRenderNVX
  glEndFragmentShaderATI
  glEndList
  glEndOcclusionQueryNV
  glEndPerfMonitorAMD
  glEndPerfQueryINTEL
  glEndQuery
  glEndQueryANGLE
  glEndQueryARB
  glEndQueryIndexed
  glEndSceneEXT
  glEndTilingQCOM
  glEndTransformFeedback
  glEndTransformFeedbackEXT
  glEndTransformFeedbackNV
  glEndVertexShaderEXT
  glEndVideoCaptureNV
  glEvalCoord1d
  glEvalCoord1dv_c
  glEvalCoord1f
  glEvalCoord1fv_c
  glEvalCoord2d
  glEvalCoord2dv_c
  glEvalCoord2f
  glEvalCoord2fv_c
  glEvalMapsNV
  glEvalMesh1
  glEvalMesh2
  glEvalPoint1
  glEvalPoint2
  GLEW_3DFX_multisample
  GLEW_3DFX_tbuffer
  GLEW_3DFX_texture_compression_FXT1
  GLEW_AMD_blend_minmax_factor
  GLEW_AMD_compressed_3DC_texture
  GLEW_AMD_compressed_ATC_texture
  GLEW_AMD_conservative_depth
  GLEW_AMD_debug_output
  GLEW_AMD_depth_clamp_separate
  GLEW_AMD_draw_buffers_blend
  GLEW_AMD_framebuffer_sample_positions
  GLEW_AMD_gcn_shader
  GLEW_AMD_gpu_shader_half_float
  GLEW_AMD_gpu_shader_int16
  GLEW_AMD_gpu_shader_int64
  GLEW_AMD_interleaved_elements
  GLEW_AMD_multi_draw_indirect
  GLEW_AMD_name_gen_delete
  GLEW_AMD_occlusion_query_event
  GLEW_AMD_performance_monitor
  GLEW_AMD_pinned_memory
  GLEW_AMD_program_binary_Z400
  GLEW_AMD_query_buffer_object
  GLEW_AMD_sample_positions
  GLEW_AMD_seamless_cubemap_per_texture
  GLEW_AMD_shader_atomic_counter_ops
  GLEW_AMD_shader_ballot
  GLEW_AMD_shader_explicit_vertex_parameter
  GLEW_AMD_shader_stencil_export
  GLEW_AMD_shader_stencil_value_export
  GLEW_AMD_shader_trinary_minmax
  GLEW_AMD_sparse_texture
  GLEW_AMD_stencil_operation_extended
  GLEW_AMD_texture_gather_bias_lod
  GLEW_AMD_texture_texture4
  GLEW_AMD_transform_feedback3_lines_triangles
  GLEW_AMD_transform_feedback4
  GLEW_AMD_vertex_shader_layer
  GLEW_AMD_vertex_shader_tessellator
  GLEW_AMD_vertex_shader_viewport_index
  GLEW_ANDROID_extension_pack_es31a
  GLEW_ANGLE_depth_texture
  GLEW_ANGLE_framebuffer_blit
  GLEW_ANGLE_framebuffer_multisample
  GLEW_ANGLE_instanced_arrays
  GLEW_ANGLE_pack_reverse_row_order
  GLEW_ANGLE_program_binary
  GLEW_ANGLE_texture_compression_dxt1
  GLEW_ANGLE_texture_compression_dxt3
  GLEW_ANGLE_texture_compression_dxt5
  GLEW_ANGLE_texture_usage
  GLEW_ANGLE_timer_query
  GLEW_ANGLE_translated_shader_source
  GLEW_APPLE_aux_depth_stencil
  GLEW_APPLE_client_storage
  GLEW_APPLE_clip_distance
  GLEW_APPLE_color_buffer_packed_float
  GLEW_APPLE_copy_texture_levels
  GLEW_APPLE_element_array
  GLEW_APPLE_fence
  GLEW_APPLE_float_pixels
  GLEW_APPLE_flush_buffer_range
  GLEW_APPLE_framebuffer_multisample
  GLEW_APPLE_object_purgeable
  GLEW_APPLE_pixel_buffer
  GLEW_APPLE_rgb_422
  GLEW_APPLE_row_bytes
  GLEW_APPLE_specular_vector
  GLEW_APPLE_sync
  GLEW_APPLE_texture_2D_limited_npot
  GLEW_APPLE_texture_format_BGRA8888
  GLEW_APPLE_texture_max_level
  GLEW_APPLE_texture_packed_float
  GLEW_APPLE_texture_range
  GLEW_APPLE_transform_hint
  GLEW_APPLE_vertex_array_object
  GLEW_APPLE_vertex_array_range
  GLEW_APPLE_vertex_program_evaluators
  GLEW_APPLE_ycbcr_422
  GLEW_ARB_arrays_of_arrays
  GLEW_ARB_base_instance
  GLEW_ARB_bindless_texture
  GLEW_ARB_blend_func_extended
  GLEW_ARB_buffer_storage
  GLEW_ARB_clear_buffer_object
  GLEW_ARB_clear_texture
  GLEW_ARB_clip_control
  GLEW_ARB_cl_event
  GLEW_ARB_color_buffer_float
  GLEW_ARB_compatibility
  GLEW_ARB_compressed_texture_pixel_storage
  GLEW_ARB_compute_shader
  GLEW_ARB_compute_variable_group_size
  GLEW_ARB_conditional_render_inverted
  GLEW_ARB_conservative_depth
  GLEW_ARB_copy_buffer
  GLEW_ARB_copy_image
  GLEW_ARB_cull_distance
  GLEW_ARB_debug_output
  GLEW_ARB_depth_buffer_float
  GLEW_ARB_depth_clamp
  GLEW_ARB_depth_texture
  GLEW_ARB_derivative_control
  GLEW_ARB_direct_state_access
  GLEW_ARB_draw_buffers
  GLEW_ARB_draw_buffers_blend
  GLEW_ARB_draw_elements_base_vertex
  GLEW_ARB_draw_indirect
  GLEW_ARB_draw_instanced
  GLEW_ARB_enhanced_layouts
  GLEW_ARB_ES2_compatibility
  GLEW_ARB_ES3_1_compatibility
  GLEW_ARB_ES3_2_compatibility
  GLEW_ARB_ES3_compatibility
  GLEW_ARB_explicit_attrib_location
  GLEW_ARB_explicit_uniform_location
  GLEW_ARB_fragment_coord_conventions
  GLEW_ARB_fragment_layer_viewport
  GLEW_ARB_fragment_program
  GLEW_ARB_fragment_program_shadow
  GLEW_ARB_fragment_shader
  GLEW_ARB_fragment_shader_interlock
  GLEW_ARB_framebuffer_no_attachments
  GLEW_ARB_framebuffer_object
  GLEW_ARB_framebuffer_sRGB
  GLEW_ARB_geometry_shader4
  GLEW_ARB_get_program_binary
  GLEW_ARB_get_texture_sub_image
  GLEW_ARB_gl_spirv
  GLEW_ARB_gpu_shader5
  GLEW_ARB_gpu_shader_fp64
  GLEW_ARB_gpu_shader_int64
  GLEW_ARB_half_float_pixel
  GLEW_ARB_half_float_vertex
  GLEW_ARB_imaging
  GLEW_ARB_indirect_parameters
  GLEW_ARB_instanced_arrays
  GLEW_ARB_internalformat_query
  GLEW_ARB_internalformat_query2
  GLEW_ARB_invalidate_subdata
  GLEW_ARB_map_buffer_alignment
  GLEW_ARB_map_buffer_range
  GLEW_ARB_matrix_palette
  GLEW_ARB_multisample
  GLEW_ARB_multitexture
  GLEW_ARB_multi_bind
  GLEW_ARB_multi_draw_indirect
  GLEW_ARB_occlusion_query
  GLEW_ARB_occlusion_query2
  GLEW_ARB_parallel_shader_compile
  GLEW_ARB_pipeline_statistics_query
  GLEW_ARB_pixel_buffer_object
  GLEW_ARB_point_parameters
  GLEW_ARB_point_sprite
  GLEW_ARB_polygon_offset_clamp
  GLEW_ARB_post_depth_coverage
  GLEW_ARB_program_interface_query
  GLEW_ARB_provoking_vertex
  GLEW_ARB_query_buffer_object
  GLEW_ARB_robustness
  GLEW_ARB_robustness_application_isolation
  GLEW_ARB_robustness_share_group_isolation
  GLEW_ARB_robust_buffer_access_behavior
  GLEW_ARB_sampler_objects
  GLEW_ARB_sample_locations
  GLEW_ARB_sample_shading
  GLEW_ARB_seamless_cubemap_per_texture
  GLEW_ARB_seamless_cube_map
  GLEW_ARB_separate_shader_objects
  GLEW_ARB_shader_atomic_counters
  GLEW_ARB_shader_atomic_counter_ops
  GLEW_ARB_shader_ballot
  GLEW_ARB_shader_bit_encoding
  GLEW_ARB_shader_clock
  GLEW_ARB_shader_draw_parameters
  GLEW_ARB_shader_group_vote
  GLEW_ARB_shader_image_load_store
  GLEW_ARB_shader_image_size
  GLEW_ARB_shader_objects
  GLEW_ARB_shader_precision
  GLEW_ARB_shader_stencil_export
  GLEW_ARB_shader_storage_buffer_object
  GLEW_ARB_shader_subroutine
  GLEW_ARB_shader_texture_image_samples
  GLEW_ARB_shader_texture_lod
  GLEW_ARB_shader_viewport_layer_array
  GLEW_ARB_shading_language_100
  GLEW_ARB_shading_language_420pack
  GLEW_ARB_shading_language_include
  GLEW_ARB_shading_language_packing
  GLEW_ARB_shadow
  GLEW_ARB_shadow_ambient
  GLEW_ARB_sparse_buffer
  GLEW_ARB_sparse_texture
  GLEW_ARB_sparse_texture2
  GLEW_ARB_sparse_texture_clamp
  GLEW_ARB_spirv_extensions
  GLEW_ARB_stencil_texturing
  GLEW_ARB_sync
  GLEW_ARB_tessellation_shader
  GLEW_ARB_texture_barrier
  GLEW_ARB_texture_border_clamp
  GLEW_ARB_texture_buffer_object
  GLEW_ARB_texture_buffer_object_rgb32
  GLEW_ARB_texture_buffer_range
  GLEW_ARB_texture_compression
  GLEW_ARB_texture_compression_bptc
  GLEW_ARB_texture_compression_rgtc
  GLEW_ARB_texture_cube_map
  GLEW_ARB_texture_cube_map_array
  GLEW_ARB_texture_env_add
  GLEW_ARB_texture_env_combine
  GLEW_ARB_texture_env_crossbar
  GLEW_ARB_texture_env_dot3
  GLEW_ARB_texture_filter_anisotropic
  GLEW_ARB_texture_filter_minmax
  GLEW_ARB_texture_float
  GLEW_ARB_texture_gather
  GLEW_ARB_texture_mirrored_repeat
  GLEW_ARB_texture_mirror_clamp_to_edge
  GLEW_ARB_texture_multisample
  GLEW_ARB_texture_non_power_of_two
  GLEW_ARB_texture_query_levels
  GLEW_ARB_texture_query_lod
  GLEW_ARB_texture_rectangle
  GLEW_ARB_texture_rg
  GLEW_ARB_texture_rgb10_a2ui
  GLEW_ARB_texture_stencil8
  GLEW_ARB_texture_storage
  GLEW_ARB_texture_storage_multisample
  GLEW_ARB_texture_swizzle
  GLEW_ARB_texture_view
  GLEW_ARB_timer_query
  GLEW_ARB_transform_feedback2
  GLEW_ARB_transform_feedback3
  GLEW_ARB_transform_feedback_instanced
  GLEW_ARB_transform_feedback_overflow_query
  GLEW_ARB_transpose_matrix
  GLEW_ARB_uniform_buffer_object
  GLEW_ARB_vertex_array_bgra
  GLEW_ARB_vertex_array_object
  GLEW_ARB_vertex_attrib_64bit
  GLEW_ARB_vertex_attrib_binding
  GLEW_ARB_vertex_blend
  GLEW_ARB_vertex_buffer_object
  GLEW_ARB_vertex_program
  GLEW_ARB_vertex_shader
  GLEW_ARB_vertex_type_10f_11f_11f_rev
  GLEW_ARB_vertex_type_2_10_10_10_rev
  GLEW_ARB_viewport_array
  GLEW_ARB_window_pos
  GLEW_ARM_mali_program_binary
  GLEW_ARM_mali_shader_binary
  GLEW_ARM_rgba8
  GLEW_ARM_shader_framebuffer_fetch
  GLEW_ARM_shader_framebuffer_fetch_depth_stencil
  GLEW_ATIX_point_sprites
  GLEW_ATIX_texture_env_combine3
  GLEW_ATIX_texture_env_route
  GLEW_ATIX_vertex_shader_output_point_size
  GLEW_ATI_draw_buffers
  GLEW_ATI_element_array
  GLEW_ATI_envmap_bumpmap
  GLEW_ATI_fragment_shader
  GLEW_ATI_map_object_buffer
  GLEW_ATI_meminfo
  GLEW_ATI_pn_triangles
  GLEW_ATI_separate_stencil
  GLEW_ATI_shader_texture_lod
  GLEW_ATI_texture_compression_3dc
  GLEW_ATI_texture_env_combine3
  GLEW_ATI_texture_float
  GLEW_ATI_texture_mirror_once
  GLEW_ATI_text_fragment_shader
  GLEW_ATI_vertex_array_object
  GLEW_ATI_vertex_attrib_array_object
  GLEW_ATI_vertex_streams
  GLEW_EGL_KHR_context_flush_control
  GLEW_EGL_NV_robustness_video_memory_purge
  GLEW_EXT_422_pixels
  GLEW_EXT_abgr
  GLEW_EXT_base_instance
  GLEW_EXT_bgra
  GLEW_EXT_bindable_uniform
  GLEW_EXT_blend_color
  GLEW_EXT_blend_equation_separate
  GLEW_EXT_blend_func_extended
  GLEW_EXT_blend_func_separate
  GLEW_EXT_blend_logic_op
  GLEW_EXT_blend_minmax
  GLEW_EXT_blend_subtract
  GLEW_EXT_buffer_storage
  GLEW_EXT_Cg_shader
  GLEW_EXT_clear_texture
  GLEW_EXT_clip_cull_distance
  GLEW_EXT_clip_volume_hint
  GLEW_EXT_cmyka
  GLEW_EXT_color_buffer_float
  GLEW_EXT_color_buffer_half_float
  GLEW_EXT_color_subtable
  GLEW_EXT_compiled_vertex_array
  GLEW_EXT_compressed_ETC1_RGB8_sub_texture
  GLEW_EXT_conservative_depth
  GLEW_EXT_convolution
  GLEW_EXT_coordinate_frame
  GLEW_EXT_copy_image
  GLEW_EXT_copy_texture
  GLEW_EXT_cull_vertex
  GLEW_EXT_debug_label
  GLEW_EXT_debug_marker
  GLEW_EXT_depth_bounds_test
  GLEW_EXT_direct_state_access
  GLEW_EXT_discard_framebuffer
  GLEW_EXT_draw_buffers
  GLEW_EXT_draw_buffers2
  GLEW_EXT_draw_buffers_indexed
  GLEW_EXT_draw_elements_base_vertex
  GLEW_EXT_draw_instanced
  GLEW_EXT_draw_range_elements
  GLEW_EXT_EGL_image_array
  GLEW_EXT_external_buffer
  GLEW_EXT_float_blend
  GLEW_EXT_fog_coord
  GLEW_EXT_fragment_lighting
  GLEW_EXT_frag_depth
  GLEW_EXT_framebuffer_blit
  GLEW_EXT_framebuffer_multisample
  GLEW_EXT_framebuffer_multisample_blit_scaled
  GLEW_EXT_framebuffer_object
  GLEW_EXT_framebuffer_sRGB
  GLEW_EXT_geometry_point_size
  GLEW_EXT_geometry_shader
  GLEW_EXT_geometry_shader4
  GLEW_EXT_gpu_program_parameters
  GLEW_EXT_gpu_shader4
  GLEW_EXT_gpu_shader5
  GLEW_EXT_histogram
  GLEW_EXT_index_array_formats
  GLEW_EXT_index_func
  GLEW_EXT_index_material
  GLEW_EXT_index_texture
  GLEW_EXT_instanced_arrays
  GLEW_EXT_light_texture
  GLEW_EXT_map_buffer_range
  GLEW_EXT_memory_object
  GLEW_EXT_memory_object_fd
  GLEW_EXT_memory_object_win32
  GLEW_EXT_misc_attribute
  GLEW_EXT_multiple_textures
  GLEW_EXT_multisample
  GLEW_EXT_multisampled_render_to_texture
  GLEW_EXT_multisampled_render_to_texture2
  GLEW_EXT_multisample_compatibility
  GLEW_EXT_multiview_draw_buffers
  GLEW_EXT_multi_draw_arrays
  GLEW_EXT_multi_draw_indirect
  GLEW_EXT_packed_depth_stencil
  GLEW_EXT_packed_float
  GLEW_EXT_packed_pixels
  GLEW_EXT_paletted_texture
  GLEW_EXT_pixel_buffer_object
  GLEW_EXT_pixel_transform
  GLEW_EXT_pixel_transform_color_table
  GLEW_EXT_point_parameters
  GLEW_EXT_polygon_offset
  GLEW_EXT_polygon_offset_clamp
  GLEW_EXT_post_depth_coverage
  GLEW_EXT_provoking_vertex
  GLEW_EXT_pvrtc_sRGB
  GLEW_EXT_raster_multisample
  GLEW_EXT_read_format_bgra
  GLEW_EXT_render_snorm
  GLEW_EXT_rescale_normal
  GLEW_EXT_scene_marker
  GLEW_EXT_secondary_color
  GLEW_EXT_semaphore
  GLEW_EXT_semaphore_fd
  GLEW_EXT_semaphore_win32
  GLEW_EXT_separate_shader_objects
  GLEW_EXT_separate_specular_color
  GLEW_EXT_shader_framebuffer_fetch
  GLEW_EXT_shader_group_vote
  GLEW_EXT_shader_image_load_formatted
  GLEW_EXT_shader_image_load_store
  GLEW_EXT_shader_implicit_conversions
  GLEW_EXT_shader_integer_mix
  GLEW_EXT_shader_io_blocks
  GLEW_EXT_shader_non_constant_global_initializers
  GLEW_EXT_shader_pixel_local_storage
  GLEW_EXT_shader_pixel_local_storage2
  GLEW_EXT_shader_texture_lod
  GLEW_EXT_shadow_funcs
  GLEW_EXT_shadow_samplers
  GLEW_EXT_shared_texture_palette
  GLEW_EXT_sparse_texture
  GLEW_EXT_sparse_texture2
  GLEW_EXT_sRGB
  GLEW_EXT_sRGB_write_control
  GLEW_EXT_stencil_clear_tag
  GLEW_EXT_stencil_two_side
  GLEW_EXT_stencil_wrap
  GLEW_EXT_subtexture
  GLEW_EXT_texture
  GLEW_EXT_texture3D
  GLEW_EXT_texture_array
  GLEW_EXT_texture_buffer_object
  GLEW_EXT_texture_compression_astc_decode_mode
  GLEW_EXT_texture_compression_astc_decode_mode_rgb9e5
  GLEW_EXT_texture_compression_bptc
  GLEW_EXT_texture_compression_dxt1
  GLEW_EXT_texture_compression_latc
  GLEW_EXT_texture_compression_rgtc
  GLEW_EXT_texture_compression_s3tc
  GLEW_EXT_texture_cube_map
  GLEW_EXT_texture_cube_map_array
  GLEW_EXT_texture_edge_clamp
  GLEW_EXT_texture_env
  GLEW_EXT_texture_env_add
  GLEW_EXT_texture_env_combine
  GLEW_EXT_texture_env_dot3
  GLEW_EXT_texture_filter_anisotropic
  GLEW_EXT_texture_filter_minmax
  GLEW_EXT_texture_format_BGRA8888
  GLEW_EXT_texture_integer
  GLEW_EXT_texture_lod_bias
  GLEW_EXT_texture_mirror_clamp
  GLEW_EXT_texture_norm16
  GLEW_EXT_texture_object
  GLEW_EXT_texture_perturb_normal
  GLEW_EXT_texture_rectangle
  GLEW_EXT_texture_rg
  GLEW_EXT_texture_shared_exponent
  GLEW_EXT_texture_snorm
  GLEW_EXT_texture_sRGB
  GLEW_EXT_texture_sRGB_decode
  GLEW_EXT_texture_sRGB_R8
  GLEW_EXT_texture_sRGB_RG8
  GLEW_EXT_texture_storage
  GLEW_EXT_texture_swizzle
  GLEW_EXT_texture_type_2_10_10_10_REV
  GLEW_EXT_texture_view
  GLEW_EXT_timer_query
  GLEW_EXT_transform_feedback
  GLEW_EXT_unpack_subimage
  GLEW_EXT_vertex_array
  GLEW_EXT_vertex_array_bgra
  GLEW_EXT_vertex_array_setXXX
  GLEW_EXT_vertex_attrib_64bit
  GLEW_EXT_vertex_shader
  GLEW_EXT_vertex_weighting
  GLEW_EXT_win32_keyed_mutex
  GLEW_EXT_window_rectangles
  GLEW_EXT_x11_sync_object
  GLEW_EXT_YUV_target
  GLEW_GREMEDY_frame_terminator
  GLEW_GREMEDY_string_marker
  GLEW_HP_convolution_border_modes
  GLEW_HP_image_transform
  GLEW_HP_occlusion_test
  GLEW_HP_texture_lighting
  GLEW_IBM_cull_vertex
  GLEW_IBM_multimode_draw_arrays
  GLEW_IBM_rasterpos_clip
  GLEW_IBM_static_data
  GLEW_IBM_texture_mirrored_repeat
  GLEW_IBM_vertex_array_lists
  GLEW_INGR_color_clamp
  GLEW_INGR_interlace_read
  GLEW_INTEL_conservative_rasterization
  GLEW_INTEL_fragment_shader_ordering
  GLEW_INTEL_framebuffer_CMAA
  GLEW_INTEL_map_texture
  GLEW_INTEL_parallel_arrays
  GLEW_INTEL_performance_query
  GLEW_INTEL_texture_scissor
  GLEW_KHR_blend_equation_advanced
  GLEW_KHR_blend_equation_advanced_coherent
  GLEW_KHR_context_flush_control
  GLEW_KHR_debug
  GLEW_KHR_no_error
  GLEW_KHR_parallel_shader_compile
  GLEW_KHR_robustness
  GLEW_KHR_robust_buffer_access_behavior
  GLEW_KHR_texture_compression_astc_hdr
  GLEW_KHR_texture_compression_astc_ldr
  GLEW_KHR_texture_compression_astc_sliced_3d
  GLEW_KTX_buffer_region
  GLEW_MESAX_texture_stack
  GLEW_MESA_pack_invert
  GLEW_MESA_resize_buffers
  GLEW_MESA_shader_integer_functions
  GLEW_MESA_window_pos
  GLEW_MESA_ycbcr_texture
  GLEW_NVX_blend_equation_advanced_multi_draw_buffers
  GLEW_NVX_conditional_render
  GLEW_NVX_gpu_memory_info
  GLEW_NVX_linked_gpu_multicast
  GLEW_NV_3dvision_settings
  GLEW_NV_alpha_to_coverage_dither_control
  GLEW_NV_bgr
  GLEW_NV_bindless_multi_draw_indirect
  GLEW_NV_bindless_multi_draw_indirect_count
  GLEW_NV_bindless_texture
  GLEW_NV_blend_equation_advanced
  GLEW_NV_blend_equation_advanced_coherent
  GLEW_NV_blend_minmax_factor
  GLEW_NV_blend_square
  GLEW_NV_clip_space_w_scaling
  GLEW_NV_command_list
  GLEW_NV_compute_program5
  GLEW_NV_conditional_render
  GLEW_NV_conservative_raster
  GLEW_NV_conservative_raster_dilate
  GLEW_NV_conservative_raster_pre_snap_triangles
  GLEW_NV_copy_buffer
  GLEW_NV_copy_depth_to_color
  GLEW_NV_copy_image
  GLEW_NV_deep_texture3D
  GLEW_NV_depth_buffer_float
  GLEW_NV_depth_clamp
  GLEW_NV_depth_range_unclamped
  GLEW_NV_draw_buffers
  GLEW_NV_draw_instanced
  GLEW_NV_draw_texture
  GLEW_NV_draw_vulkan_image
  GLEW_NV_EGL_stream_consumer_external
  GLEW_NV_evaluators
  GLEW_NV_explicit_attrib_location
  GLEW_NV_explicit_multisample
  GLEW_NV_fbo_color_attachments
  GLEW_NV_fence
  GLEW_NV_fill_rectangle
  GLEW_NV_float_buffer
  GLEW_NV_fog_distance
  GLEW_NV_fragment_coverage_to_color
  GLEW_NV_fragment_program
  GLEW_NV_fragment_program2
  GLEW_NV_fragment_program4
  GLEW_NV_fragment_program_option
  GLEW_NV_fragment_shader_interlock
  GLEW_NV_framebuffer_blit
  GLEW_NV_framebuffer_mixed_samples
  GLEW_NV_framebuffer_multisample
  GLEW_NV_framebuffer_multisample_coverage
  GLEW_NV_generate_mipmap_sRGB
  GLEW_NV_geometry_program4
  GLEW_NV_geometry_shader4
  GLEW_NV_geometry_shader_passthrough
  GLEW_NV_gpu_multicast
  GLEW_NV_gpu_program4
  GLEW_NV_gpu_program5
  GLEW_NV_gpu_program5_mem_extended
  GLEW_NV_gpu_program_fp64
  GLEW_NV_gpu_shader5
  GLEW_NV_half_float
  GLEW_NV_image_formats
  GLEW_NV_instanced_arrays
  GLEW_NV_internalformat_sample_query
  GLEW_NV_light_max_exponent
  GLEW_NV_multisample_coverage
  GLEW_NV_multisample_filter_hint
  GLEW_NV_non_square_matrices
  GLEW_NV_occlusion_query
  GLEW_NV_packed_depth_stencil
  GLEW_NV_packed_float
  GLEW_NV_packed_float_linear
  GLEW_NV_pack_subimage
  GLEW_NV_parameter_buffer_object
  GLEW_NV_parameter_buffer_object2
  GLEW_NV_path_rendering
  GLEW_NV_path_rendering_shared_edge
  GLEW_NV_pixel_buffer_object
  GLEW_NV_pixel_data_range
  GLEW_NV_platform_binary
  GLEW_NV_point_sprite
  GLEW_NV_polygon_mode
  GLEW_NV_present_video
  GLEW_NV_primitive_restart
  GLEW_NV_read_depth
  GLEW_NV_read_depth_stencil
  GLEW_NV_read_stencil
  GLEW_NV_register_combiners
  GLEW_NV_register_combiners2
  GLEW_NV_robustness_video_memory_purge
  GLEW_NV_sample_locations
  GLEW_NV_sample_mask_override_coverage
  GLEW_NV_shader_atomic_counters
  GLEW_NV_shader_atomic_float
  GLEW_NV_shader_atomic_float64
  GLEW_NV_shader_atomic_fp16_vector
  GLEW_NV_shader_atomic_int64
  GLEW_NV_shader_buffer_load
  GLEW_NV_shader_noperspective_interpolation
  GLEW_NV_shader_storage_buffer_object
  GLEW_NV_shader_thread_group
  GLEW_NV_shader_thread_shuffle
  GLEW_NV_shadow_samplers_array
  GLEW_NV_shadow_samplers_cube
  GLEW_NV_sRGB_formats
  GLEW_NV_stereo_view_rendering
  GLEW_NV_tessellation_program5
  GLEW_NV_texgen_emboss
  GLEW_NV_texgen_reflection
  GLEW_NV_texture_array
  GLEW_NV_texture_barrier
  GLEW_NV_texture_border_clamp
  GLEW_NV_texture_compression_latc
  GLEW_NV_texture_compression_s3tc
  GLEW_NV_texture_compression_s3tc_update
  GLEW_NV_texture_compression_vtc
  GLEW_NV_texture_env_combine4
  GLEW_NV_texture_expand_normal
  GLEW_NV_texture_multisample
  GLEW_NV_texture_npot_2D_mipmap
  GLEW_NV_texture_rectangle
  GLEW_NV_texture_rectangle_compressed
  GLEW_NV_texture_shader
  GLEW_NV_texture_shader2
  GLEW_NV_texture_shader3
  GLEW_NV_transform_feedback
  GLEW_NV_transform_feedback2
  GLEW_NV_uniform_buffer_unified_memory
  GLEW_NV_vdpau_interop
  GLEW_NV_vertex_array_range
  GLEW_NV_vertex_array_range2
  GLEW_NV_vertex_attrib_integer_64bit
  GLEW_NV_vertex_buffer_unified_memory
  GLEW_NV_vertex_program
  GLEW_NV_vertex_program1_1
  GLEW_NV_vertex_program2
  GLEW_NV_vertex_program2_option
  GLEW_NV_vertex_program3
  GLEW_NV_vertex_program4
  GLEW_NV_video_capture
  GLEW_NV_viewport_array
  GLEW_NV_viewport_array2
  GLEW_NV_viewport_swizzle
  GLEW_OES_byte_coordinates
  GLEW_OML_interlace
  GLEW_OML_resample
  GLEW_OML_subsample
  GLEW_OVR_multiview
  GLEW_OVR_multiview2
  GLEW_OVR_multiview_multisampled_render_to_texture
  GLEW_PGI_misc_hints
  GLEW_PGI_vertex_hints
  GLEW_QCOM_alpha_test
  GLEW_QCOM_binning_control
  GLEW_QCOM_driver_control
  GLEW_QCOM_extended_get
  GLEW_QCOM_extended_get2
  GLEW_QCOM_framebuffer_foveated
  GLEW_QCOM_perfmon_global_mode
  GLEW_QCOM_shader_framebuffer_fetch_noncoherent
  GLEW_QCOM_tiled_rendering
  GLEW_QCOM_writeonly_rendering
  GLEW_REGAL_enable
  GLEW_REGAL_error_string
  GLEW_REGAL_ES1_0_compatibility
  GLEW_REGAL_ES1_1_compatibility
  GLEW_REGAL_extension_query
  GLEW_REGAL_log
  GLEW_REGAL_proc_address
  GLEW_REND_screen_coordinates
  GLEW_S3_s3tc
  GLEW_SGIS_clip_band_hint
  GLEW_SGIS_color_range
  GLEW_SGIS_detail_texture
  GLEW_SGIS_fog_function
  GLEW_SGIS_generate_mipmap
  GLEW_SGIS_line_texgen
  GLEW_SGIS_multisample
  GLEW_SGIS_multitexture
  GLEW_SGIS_pixel_texture
  GLEW_SGIS_point_line_texgen
  GLEW_SGIS_shared_multisample
  GLEW_SGIS_sharpen_texture
  GLEW_SGIS_texture4D
  GLEW_SGIS_texture_border_clamp
  GLEW_SGIS_texture_edge_clamp
  GLEW_SGIS_texture_filter4
  GLEW_SGIS_texture_lod
  GLEW_SGIS_texture_select
  GLEW_SGIX_async
  GLEW_SGIX_async_histogram
  GLEW_SGIX_async_pixel
  GLEW_SGIX_bali_g_instruments
  GLEW_SGIX_bali_r_instruments
  GLEW_SGIX_bali_timer_instruments
  GLEW_SGIX_blend_alpha_minmax
  GLEW_SGIX_blend_cadd
  GLEW_SGIX_blend_cmultiply
  GLEW_SGIX_calligraphic_fragment
  GLEW_SGIX_clipmap
  GLEW_SGIX_color_matrix_accuracy
  GLEW_SGIX_color_table_index_mode
  GLEW_SGIX_complex_polar
  GLEW_SGIX_convolution_accuracy
  GLEW_SGIX_cube_map
  GLEW_SGIX_cylinder_texgen
  GLEW_SGIX_datapipe
  GLEW_SGIX_decimation
  GLEW_SGIX_depth_pass_instrument
  GLEW_SGIX_depth_texture
  GLEW_SGIX_dvc
  GLEW_SGIX_flush_raster
  GLEW_SGIX_fog_blend
  GLEW_SGIX_fog_factor_to_alpha
  GLEW_SGIX_fog_layers
  GLEW_SGIX_fog_offset
  GLEW_SGIX_fog_patchy
  GLEW_SGIX_fog_scale
  GLEW_SGIX_fog_texture
  GLEW_SGIX_fragments_instrument
  GLEW_SGIX_fragment_lighting_space
  GLEW_SGIX_fragment_specular_lighting
  GLEW_SGIX_framezoom
  GLEW_SGIX_icc_texture
  GLEW_SGIX_igloo_interface
  GLEW_SGIX_image_compression
  GLEW_SGIX_impact_pixel_texture
  GLEW_SGIX_instrument_error
  GLEW_SGIX_interlace
  GLEW_SGIX_ir_instrument1
  GLEW_SGIX_line_quality_hint
  GLEW_SGIX_list_priority
  GLEW_SGIX_mpeg1
  GLEW_SGIX_mpeg2
  GLEW_SGIX_nonlinear_lighting_pervertex
  GLEW_SGIX_nurbs_eval
  GLEW_SGIX_occlusion_instrument
  GLEW_SGIX_packed_6bytes
  GLEW_SGIX_pixel_texture
  GLEW_SGIX_pixel_texture_bits
  GLEW_SGIX_pixel_texture_lod
  GLEW_SGIX_pixel_tiles
  GLEW_SGIX_polynomial_ffd
  GLEW_SGIX_quad_mesh
  GLEW_SGIX_reference_plane
  GLEW_SGIX_resample
  GLEW_SGIX_scalebias_hint
  GLEW_SGIX_shadow
  GLEW_SGIX_shadow_ambient
  GLEW_SGIX_slim
  GLEW_SGIX_spotlight_cutoff
  GLEW_SGIX_sprite
  GLEW_SGIX_subdiv_patch
  GLEW_SGIX_subsample
  GLEW_SGIX_tag_sample_buffer
  GLEW_SGIX_texture_add_env
  GLEW_SGIX_texture_coordinate_clamp
  GLEW_SGIX_texture_lod_bias
  GLEW_SGIX_texture_mipmap_anisotropic
  GLEW_SGIX_texture_multi_buffer
  GLEW_SGIX_texture_phase
  GLEW_SGIX_texture_range
  GLEW_SGIX_texture_scale_bias
  GLEW_SGIX_texture_supersample
  GLEW_SGIX_vector_ops
  GLEW_SGIX_vertex_array_object
  GLEW_SGIX_vertex_preclip
  GLEW_SGIX_vertex_preclip_hint
  GLEW_SGIX_ycrcb
  GLEW_SGIX_ycrcba
  GLEW_SGIX_ycrcb_subsample
  GLEW_SGI_color_matrix
  GLEW_SGI_color_table
  GLEW_SGI_complex
  GLEW_SGI_complex_type
  GLEW_SGI_fft
  GLEW_SGI_texture_color_table
  GLEW_SUNX_constant_data
  GLEW_SUN_convolution_border_modes
  GLEW_SUN_global_alpha
  GLEW_SUN_mesh_array
  GLEW_SUN_read_video_pixels
  GLEW_SUN_slice_accum
  GLEW_SUN_triangle_list
  GLEW_SUN_vertex
  GLEW_VERSION_1_1
  GLEW_VERSION_1_2
  GLEW_VERSION_1_2_1
  GLEW_VERSION_1_3
  GLEW_VERSION_1_4
  GLEW_VERSION_1_5
  GLEW_VERSION_2_0
  GLEW_VERSION_2_1
  GLEW_VERSION_3_0
  GLEW_VERSION_3_1
  GLEW_VERSION_3_2
  GLEW_VERSION_3_3
  GLEW_VERSION_4_0
  GLEW_VERSION_4_1
  GLEW_VERSION_4_2
  GLEW_VERSION_4_3
  GLEW_VERSION_4_4
  GLEW_VERSION_4_5
  GLEW_VERSION_4_6
  GLEW_WIN_phong_shading
  GLEW_WIN_scene_markerXXX
  GLEW_WIN_specular_fog
  GLEW_WIN_swap_hint
  glExecuteProgramNV_c
  glExtGetBufferPointervQCOM_c
  glExtGetBuffersQCOM_c
  glExtGetFramebuffersQCOM_c
  glExtGetProgramBinarySourceQCOM_c
  glExtGetProgramsQCOM_c
  glExtGetRenderbuffersQCOM_c
  glExtGetShadersQCOM_c
  glExtGetTexLevelParameterivQCOM_c
  glExtGetTexSubImageQCOM_c
  glExtGetTexturesQCOM_c
  glExtIsProgramBinaryQCOM
  glExtractComponentEXT
  glExtTexObjectStateOverrideiQCOM
  glFeedbackBuffer_c
  glFenceSync
  glFenceSyncAPPLE
  glFinalCombinerInputNV
  glFinish
  glFinishAsyncSGIX_c
  glFinishFenceAPPLE
  glFinishFenceNV
  glFinishObjectAPPLE
  glFinishTextureSUNX
  glFlush
  glFlushMappedBufferRange
  glFlushMappedBufferRangeAPPLE
  glFlushMappedBufferRangeEXT
  glFlushMappedNamedBufferRange
  glFlushMappedNamedBufferRangeEXT
  glFlushPixelDataRangeNV
  glFlushRasterSGIX
  glFlushVertexArrayRangeAPPLE_c
  glFlushVertexArrayRangeNV
  glFogCoordd
  glFogCoorddEXT
  glFogCoorddvEXT_c
  glFogCoorddv_c
  glFogCoordf
  glFogCoordfEXT
  glFogCoordFormatNV
  glFogCoordfvEXT_c
  glFogCoordfv_c
  glFogCoordhNV
  glFogCoordhvNV_c
  glFogCoordPointerEXT_c
  glFogCoordPointerListIBM_c
  glFogCoordPointer_c
  glFogf
  glFogFuncSGIS_c
  glFogfv_c
  glFogi
  glFogiv_c
  glFogLayersSGIX_c
  glFogx
  glFogxv_c
  glFragmentColorMaterialEXT
  glFragmentColorMaterialSGIX
  glFragmentCoverageColorNV
  glFragmentLightfEXT
  glFragmentLightfSGIX
  glFragmentLightfvEXT_c
  glFragmentLightfvSGIX_c
  glFragmentLightiEXT
  glFragmentLightiSGIX
  glFragmentLightivEXT_c
  glFragmentLightivSGIX_c
  glFragmentLightModelfEXT
  glFragmentLightModelfSGIX
  glFragmentLightModelfvEXT_c
  glFragmentLightModelfvSGIX_c
  glFragmentLightModeliEXT
  glFragmentLightModeliSGIX
  glFragmentLightModelivEXT_c
  glFragmentLightModelivSGIX_c
  glFragmentMaterialfEXT
  glFragmentMaterialfSGIX
  glFragmentMaterialfvEXT_c
  glFragmentMaterialfvSGIX_c
  glFragmentMaterialiEXT
  glFragmentMaterialiSGIX
  glFragmentMaterialivEXT_c
  glFragmentMaterialivSGIX_c
  glFramebufferDrawBufferEXT
  glFramebufferDrawBuffersEXT_c
  glFramebufferFetchBarrierQCOM
  glFramebufferFoveationConfigQCOM_c
  glFramebufferFoveationParametersQCOM
  glFramebufferParameteri
  glFramebufferPixelLocalStorageSizeEXT
  glFramebufferReadBufferEXT
  glFramebufferRenderbuffer
  glFramebufferRenderbufferEXT
  glFramebufferSampleLocationsfvARB_c
  glFramebufferSampleLocationsfvNV_c
  glFramebufferSamplePositionsfvAMD_c
  glFramebufferTexture
  glFramebufferTexture1D
  glFramebufferTexture1DEXT
  glFramebufferTexture2D
  glFramebufferTexture2DEXT
  glFramebufferTexture2DMultisampleEXT
  glFramebufferTexture3D
  glFramebufferTexture3DEXT
  glFramebufferTextureARB
  glFramebufferTextureEXT
  glFramebufferTextureFaceARB
  glFramebufferTextureFaceEXT
  glFramebufferTextureLayer
  glFramebufferTextureLayerARB
  glFramebufferTextureLayerEXT
  glFramebufferTextureLayerNV
  glFramebufferTextureMultisampleMultiviewOVR
  glFramebufferTextureMultiviewOVR
  glFrameTerminatorGREMEDY
  glFrameZoomSGIX
  glFreeObjectBufferATI
  glFrontFace
  glFrustum
  glFrustumf
  glFrustumx
  glGenAsyncMarkersSGIX
  glGenBuffersARB_c
  glGenBuffers_c
  glGenerateMipmap
  glGenerateMipmapEXT
  glGenerateMultiTexMipmapEXT
  glGenerateTextureMipmap
  glGenerateTextureMipmapEXT
  glGenFencesAPPLE_c
  glGenFencesNV_c
  glGenFragmentShadersATI
  glGenFramebuffersEXT_c
  glGenFramebuffers_c
  glGenLists
  glGenMPEGPredictorsSGIX_c
  glGenNamesAMD_c
  glGenOcclusionQueriesNV_c
  glGenPathsNV
  glGenPerfMonitorsAMD_c
  glGenProgramPipelines_c
  glGenProgramsARB_c
  glGenProgramsNV_c
  glGenQueriesANGLE_c
  glGenQueriesARB_c
  glGenQueries_c
  glGenRenderbuffersEXT_c
  glGenRenderbuffers_c
  glGenSamplers_c
  glGenSemaphoresEXT_c
  glGenSymbolsEXT
  glGenTexturesEXT_c
  glGenTextures_c
  glGenTransformFeedbacksNV_c
  glGenTransformFeedbacks_c
  glGenVertexArraysAPPLE_c
  glGenVertexArraysSGIX_c
  glGenVertexArrays_c
  glGenVertexShadersEXT
  glGetActiveAtomicCounterBufferiv_c
  glGetActiveAttribARB_c
  glGetActiveAttrib_c
  glGetActiveSubroutineName_c
  glGetActiveSubroutineUniformiv_c
  glGetActiveSubroutineUniformName_c
  glGetActiveUniformARB_c
  glGetActiveUniformBlockiv_c
  glGetActiveUniformBlockName_c
  glGetActiveUniformName_c
  glGetActiveUniformsiv_c
  glGetActiveUniform_c
  glGetActiveVaryingNV_c
  glGetArrayObjectfvATI_c
  glGetArrayObjectivATI_c
  glGetAttachedObjectsARB_c
  glGetAttachedShaders_c
  glGetAttribLocationARB_c
  glGetAttribLocation_c
  glGetBooleanIndexedvEXT_c
  glGetBooleani_v_c
  glGetBooleanv_c
  glGetBufferParameteri64v_c
  glGetBufferParameterivARB_c
  glGetBufferParameteriv_c
  glGetBufferParameterui64vNV_c
  glGetBufferPointervARB_c
  glGetBufferPointerv_c
  glGetBufferSubDataARB_c
  glGetBufferSubData_c
  glGetClipPlanef_c
  glGetClipPlanex_c
  glGetClipPlane_c
  glGetColorTableEXT_c
  glGetColorTableParameterfvEXT_c
  glGetColorTableParameterfvSGI_c
  glGetColorTableParameterfv_c
  glGetColorTableParameterivEXT_c
  glGetColorTableParameterivSGI_c
  glGetColorTableParameteriv_c
  glGetColorTableSGI_c
  glGetColorTable_c
  glGetCombinerInputParameterfvNV_c
  glGetCombinerInputParameterivNV_c
  glGetCombinerOutputParameterfvNV_c
  glGetCombinerOutputParameterivNV_c
  glGetCombinerStageParameterfvNV_c
  glGetCommandHeaderNV
  glGetCompressedMultiTexImageEXT_c
  glGetCompressedTexImageARB_c
  glGetCompressedTexImage_c
  glGetCompressedTextureImageEXT_c
  glGetCompressedTextureImage_c
  glGetCompressedTextureSubImage_c
  glGetConvolutionFilterEXT_c
  glGetConvolutionFilter_c
  glGetConvolutionParameterfvEXT_c
  glGetConvolutionParameterfv_c
  glGetConvolutionParameterivEXT_c
  glGetConvolutionParameteriv_c
  glGetCoverageModulationTableNV_c
  glGetDebugMessageLogAMD_c
  glGetDebugMessageLogARB_c
  glGetDebugMessageLog_c
  glGetDetailTexFuncSGIS_c
  glGetDoubleIndexedvEXT_c
  glGetDoublei_vEXT_c
  glGetDoublei_v_c
  glGetDoublev_c
  glGetDriverControlsQCOM_c
  glGetDriverControlStringQCOM_c
  glGetError
  glGetExtensionREGAL_c
  glGetFenceivNV_c
  glGetFinalCombinerInputParameterfvNV_c
  glGetFinalCombinerInputParameterivNV_c
  glGetFirstPerfQueryIdINTEL_c
  glGetFixedv_c
  glGetFloatIndexedvEXT_c
  glGetFloati_vEXT_c
  glGetFloati_vNV_c
  glGetFloati_v_c
  glGetFloatv_c
  glGetFogFuncSGIS_c
  glGetFogLayersSGIX_c
  glGetFragDataIndexEXT_c
  glGetFragDataIndex_c
  glGetFragDataLocationEXT_c
  glGetFragDataLocation_c
  glGetFragmentLightfvEXT_c
  glGetFragmentLightfvSGIX_c
  glGetFragmentLightivEXT_c
  glGetFragmentLightivSGIX_c
  glGetFragmentMaterialfvEXT_c
  glGetFragmentMaterialfvSGIX_c
  glGetFragmentMaterialivEXT_c
  glGetFragmentMaterialivSGIX_c
  glGetFramebufferAttachmentParameterivEXT_c
  glGetFramebufferAttachmentParameteriv_c
  glGetFramebufferParameterfvAMD_c
  glGetFramebufferParameterivEXT_c
  glGetFramebufferParameteriv_c
  glGetFramebufferPixelLocalStorageSizeEXT
  glGetGraphicsResetStatus
  glGetGraphicsResetStatusARB
  glGetHandleARB
  glGetHistogramEXT_c
  glGetHistogramParameterfvEXT_c
  glGetHistogramParameterfv_c
  glGetHistogramParameterivEXT_c
  glGetHistogramParameteriv_c
  glGetHistogram_c
  glGetImageHandleARB
  glGetImageHandleNV
  glGetImageTransformParameterfvHP_c
  glGetImageTransformParameterivHP_c
  glGetInfoLogARB_c
  glGetInteger64i_v_c
  glGetInteger64vAPPLE_c
  glGetInteger64v_c
  glGetIntegerIndexedvEXT_c
  glGetIntegeri_vEXT_c
  glGetIntegeri_v_c
  glGetIntegerui64i_vNV_c
  glGetIntegerui64vNV_c
  glGetIntegerv_c
  glGetInternalformati64v_c
  glGetInternalformativ_c
  glGetInternalformatSampleivNV_c
  glGetInvariantBooleanvEXT_c
  glGetInvariantFloatvEXT_c
  glGetInvariantIntegervEXT_c
  glGetLightfv_c
  glGetLightiv_c
  glGetLightxv_c
  glGetLocalConstantBooleanvEXT_c
  glGetLocalConstantFloatvEXT_c
  glGetLocalConstantIntegervEXT_c
  glGetMapAttribParameterfvNV_c
  glGetMapAttribParameterivNV_c
  glGetMapControlPointsNV_c
  glGetMapdv_c
  glGetMapfv_c
  glGetMapiv_c
  glGetMapParameterfvNV_c
  glGetMapParameterivNV_c
  glGetMaterialfv_c
  glGetMaterialiv_c
  glGetMaterialxv_c
  glGetMemoryObjectParameterivEXT_c
  glGetMinmaxEXT_c
  glGetMinmaxParameterfvEXT_c
  glGetMinmaxParameterfv_c
  glGetMinmaxParameterivEXT_c
  glGetMinmaxParameteriv_c
  glGetMinmax_c
  glGetMPEGParameterfvSGIX_c
  glGetMPEGParameterivSGIX_c
  glGetMPEGPredictorSGIX_c
  glGetMPEGQuantTableubv_c
  glGetMultisamplefvNV_c
  glGetMultisamplefv_c
  glGetMultiTexEnvfvEXT_c
  glGetMultiTexEnvivEXT_c
  glGetMultiTexGendvEXT_c
  glGetMultiTexGenfvEXT_c
  glGetMultiTexGenivEXT_c
  glGetMultiTexImageEXT_c
  glGetMultiTexLevelParameterfvEXT_c
  glGetMultiTexLevelParameterivEXT_c
  glGetMultiTexParameterfvEXT_c
  glGetMultiTexParameterIivEXT_c
  glGetMultiTexParameterIuivEXT_c
  glGetMultiTexParameterivEXT_c
  glGetNamedBufferParameteri64v_c
  glGetNamedBufferParameterivEXT_c
  glGetNamedBufferParameteriv_c
  glGetNamedBufferParameterui64vNV_c
  glGetNamedBufferPointervEXT_c
  glGetNamedBufferPointerv_c
  glGetNamedBufferSubDataEXT_c
  glGetNamedBufferSubData_c
  glGetNamedFramebufferAttachmentParameterivEXT_c
  glGetNamedFramebufferAttachmentParameteriv_c
  glGetNamedFramebufferParameterfvAMD_c
  glGetNamedFramebufferParameterivEXT_c
  glGetNamedFramebufferParameteriv_c
  glGetNamedProgramivEXT_c
  glGetNamedProgramLocalParameterdvEXT_c
  glGetNamedProgramLocalParameterfvEXT_c
  glGetNamedProgramLocalParameterIivEXT_c
  glGetNamedProgramLocalParameterIuivEXT_c
  glGetNamedProgramStringEXT_c
  glGetNamedRenderbufferParameterivEXT_c
  glGetNamedRenderbufferParameteriv_c
  glGetNamedStringARB_c
  glGetNamedStringivARB_c
  glGetnColorTableARB_c
  glGetnCompressedTexImageARB_c
  glGetnCompressedTexImage_c
  glGetnConvolutionFilterARB_c
  glGetNextPerfQueryIdINTEL_c
  glGetnHistogramARB_c
  glGetnMapdvARB_c
  glGetnMapfvARB_c
  glGetnMapivARB_c
  glGetnMinmaxARB_c
  glGetNonlinLightfvSGIX_c
  glGetNonlinMaterialfvSGIX_c
  glGetnPixelMapfvARB_c
  glGetnPixelMapuivARB_c
  glGetnPixelMapusvARB_c
  glGetnPolygonStippleARB_c
  glGetnSeparableFilterARB_c
  glGetnTexImageARB_c
  glGetnTexImage_c
  glGetnUniformdvARB_c
  glGetnUniformdv_c
  glGetnUniformfvARB_c
  glGetnUniformfv_c
  glGetnUniformi64vARB_c
  glGetnUniformivARB_c
  glGetnUniformiv_c
  glGetnUniformui64vARB_c
  glGetnUniformuivARB_c
  glGetnUniformuiv_c
  glGetObjectBufferfvATI_c
  glGetObjectBufferivATI_c
  glGetObjectLabelEXT_c
  glGetObjectLabel_c
  glGetObjectParameterfvARB_c
  glGetObjectParameterivAPPLE_c
  glGetObjectParameterivARB_c
  glGetObjectPtrLabel_c
  glGetOcclusionQueryivNV_c
  glGetOcclusionQueryuivNV_c
  glGetPathColorGenfvNV_c
  glGetPathColorGenivNV_c
  glGetPathCommandsNV_c
  glGetPathCoordsNV_c
  glGetPathDashArrayNV_c
  glGetPathLengthNV
  glGetPathMetricRangeNV_c
  glGetPathMetricsNV_c
  glGetPathParameterfvNV_c
  glGetPathParameterivNV_c
  glGetPathSpacingNV_c
  glGetPathTexGenfvNV_c
  glGetPathTexGenivNV_c
  glGetPerfCounterInfoINTEL_c
  glGetPerfMonitorCounterDataAMD_c
  glGetPerfMonitorCounterInfoAMD_c
  glGetPerfMonitorCountersAMD_c
  glGetPerfMonitorCounterStringAMD_c
  glGetPerfMonitorGroupsAMD_c
  glGetPerfMonitorGroupStringAMD_c
  glGetPerfQueryDataINTEL_c
  glGetPerfQueryIdByNameINTEL_c
  glGetPerfQueryInfoINTEL_c
  glGetPixelMapfv_c
  glGetPixelMapuiv_c
  glGetPixelMapusv_c
  glGetPixelTransformParameterfvEXT_c
  glGetPixelTransformParameterfvSGI_c
  glGetPixelTransformParameterivEXT_c
  glGetPixelTransformParameterivSGI_c
  glGetPointerIndexedvEXT_c
  glGetPointeri_vEXT_c
  glGetPointerv_c
  glGetPolygonStipple_c
  glGetProcAddressREGAL_c
  glGetProgramBinary_c
  glGetProgramEnvParameterdvARB_c
  glGetProgramEnvParameterfvARB_c
  glGetProgramInfoLog_c
  glGetProgramInterfaceiv_c
  glGetProgramivARB_c
  glGetProgramivNV_c
  glGetProgramiv_c
  glGetProgramLocalParameterdvARB_c
  glGetProgramLocalParameterfvARB_c
  glGetProgramNamedParameterdvNV_c
  glGetProgramNamedParameterfvNV_c
  glGetProgramParameterdvNV_c
  glGetProgramParameterfvNV_c
  glGetProgramPipelineInfoLog_c
  glGetProgramPipelineiv_c
  glGetProgramResourcefvNV_c
  glGetProgramResourceIndex_c
  glGetProgramResourceiv_c
  glGetProgramResourceLocationIndexEXT_c
  glGetProgramResourceLocationIndex_c
  glGetProgramResourceLocation_c
  glGetProgramResourceName_c
  glGetProgramStageiv_c
  glGetProgramStringARB_c
  glGetProgramStringNV_c
  glGetQueryBufferObjecti64v
  glGetQueryBufferObjectiv
  glGetQueryBufferObjectui64v
  glGetQueryBufferObjectuiv
  glGetQueryIndexediv_c
  glGetQueryivANGLE_c
  glGetQueryivARB_c
  glGetQueryiv_c
  glGetQueryObjecti64vANGLE_c
  glGetQueryObjecti64vEXT_c
  glGetQueryObjecti64v_c
  glGetQueryObjectivANGLE_c
  glGetQueryObjectivARB_c
  glGetQueryObjectiv_c
  glGetQueryObjectui64vANGLE_c
  glGetQueryObjectui64vEXT_c
  glGetQueryObjectui64v_c
  glGetQueryObjectuivANGLE_c
  glGetQueryObjectuivARB_c
  glGetQueryObjectuiv_c
  glGetRenderbufferParameterivEXT_c
  glGetRenderbufferParameteriv_c
  glGetSamplerParameterfv_c
  glGetSamplerParameterIiv_c
  glGetSamplerParameterIuiv_c
  glGetSamplerParameteriv_c
  glGetSemaphoreParameterui64vEXT_c
  glGetSeparableFilterEXT_c
  glGetSeparableFilter_c
  glGetShaderInfoLog_c
  glGetShaderiv_c
  glGetShaderPrecisionFormat_c
  glGetShaderSourceARB_c
  glGetShaderSource_c
  glGetSharpenTexFuncSGIS_c
  glGetStageIndexNV
  glGetString
  glGetSubroutineIndex_c
  glGetSubroutineUniformLocation_c
  glGetSyncivAPPLE_c
  glGetSynciv_c
  glGetTexBumpParameterfvATI_c
  glGetTexBumpParameterivATI_c
  glGetTexEnvfv_c
  glGetTexEnviv_c
  glGetTexEnvxv_c
  glGetTexFilterFuncSGIS_c
  glGetTexGendv_c
  glGetTexGenfv_c
  glGetTexGeniv_c
  glGetTexImage_c
  glGetTexLevelParameterfv_c
  glGetTexLevelParameteriv_c
  glGetTexParameterfv_c
  glGetTexParameterIivEXT_c
  glGetTexParameterIiv_c
  glGetTexParameterIuivEXT_c
  glGetTexParameterIuiv_c
  glGetTexParameteriv_c
  glGetTexParameterPointervAPPLE_c
  glGetTexParameterxv_c
  glGetTextureHandleARB
  glGetTextureHandleNV
  glGetTextureImageEXT_c
  glGetTextureImage_c
  glGetTextureLevelParameterfvEXT_c
  glGetTextureLevelParameterfv_c
  glGetTextureLevelParameterivEXT_c
  glGetTextureLevelParameteriv_c
  glGetTextureParameterfvEXT_c
  glGetTextureParameterfv_c
  glGetTextureParameterIivEXT_c
  glGetTextureParameterIiv_c
  glGetTextureParameterIuivEXT_c
  glGetTextureParameterIuiv_c
  glGetTextureParameterivEXT_c
  glGetTextureParameteriv_c
  glGetTextureSamplerHandleARB
  glGetTextureSamplerHandleNV
  glGetTextureSubImage_c
  glGetTrackMatrixivNV_c
  glGetTransformFeedbacki64_v_c
  glGetTransformFeedbackiv_c
  glGetTransformFeedbacki_v_c
  glGetTransformFeedbackVaryingEXT_c
  glGetTransformFeedbackVaryingNV_c
  glGetTransformFeedbackVarying_c
  glGetTranslatedShaderSourceANGLE_c
  glGetUniformBlockIndex_c
  glGetUniformBufferSizeEXT
  glGetUniformdv_c
  glGetUniformfvARB_c
  glGetUniformfv_c
  glGetUniformi64vARB_c
  glGetUniformi64vNV_c
  glGetUniformIndices_c
  glGetUniformivARB_c
  glGetUniformiv_c
  glGetUniformLocationARB_c
  glGetUniformLocation_c
  glGetUniformOffsetEXT
  glGetUniformSubroutineuiv_c
  glGetUniformui64vARB_c
  glGetUniformui64vNV_c
  glGetUniformuivEXT_c
  glGetUniformuiv_c
  glGetUnsignedBytei_vEXT_c
  glGetUnsignedBytevEXT_c
  glGetVariantArrayObjectfvATI_c
  glGetVariantArrayObjectivATI_c
  glGetVariantBooleanvEXT_c
  glGetVariantFloatvEXT_c
  glGetVariantIntegervEXT_c
  glGetVariantPointervEXT_c
  glGetVaryingLocationNV_c
  glGetVectorOperationSGIX
  glGetVertexArrayIndexed64iv_c
  glGetVertexArrayIndexediv_c
  glGetVertexArrayIntegeri_vEXT_c
  glGetVertexArrayIntegervEXT_c
  glGetVertexArrayiv_c
  glGetVertexArrayPointeri_vEXT_c
  glGetVertexArrayPointervEXT_c
  glGetVertexAttribArrayObjectfvATI_c
  glGetVertexAttribArrayObjectivATI_c
  glGetVertexAttribdvARB_c
  glGetVertexAttribdvNV_c
  glGetVertexAttribdv_c
  glGetVertexAttribfvARB_c
  glGetVertexAttribfvNV_c
  glGetVertexAttribfv_c
  glGetVertexAttribIivEXT_c
  glGetVertexAttribIiv_c
  glGetVertexAttribIuivEXT_c
  glGetVertexAttribIuiv_c
  glGetVertexAttribivARB_c
  glGetVertexAttribivNV_c
  glGetVertexAttribiv_c
  glGetVertexAttribLdvEXT_c
  glGetVertexAttribLdv_c
  glGetVertexAttribLi64vNV_c
  glGetVertexAttribLui64vARB_c
  glGetVertexAttribLui64vNV_c
  glGetVertexAttribPointervARB_c
  glGetVertexAttribPointervNV_c
  glGetVertexAttribPointerv_c
  glGetVideoCaptureivNV_c
  glGetVideoCaptureStreamdvNV_c
  glGetVideoCaptureStreamfvNV_c
  glGetVideoCaptureStreamivNV_c
  glGetVideoi64vNV_c
  glGetVideoivNV_c
  glGetVideoui64vNV_c
  glGetVideouivNV_c
  glGetVkProcAddrNV_c
  glGlobalAlphaFactorbSUN
  glGlobalAlphaFactordSUN
  glGlobalAlphaFactorfSUN
  glGlobalAlphaFactoriSUN
  glGlobalAlphaFactorsSUN
  glGlobalAlphaFactorubSUN
  glGlobalAlphaFactoruiSUN
  glGlobalAlphaFactorusSUN
  glHint
  glHistogram
  glHistogramEXT
  glIglooInterfaceSGIX_c
  glImageTransformParameterfHP
  glImageTransformParameterfvHP_c
  glImageTransformParameteriHP
  glImageTransformParameterivHP_c
  glImportMemoryFdEXT
  glImportMemoryWin32HandleEXT_c
  glImportMemoryWin32NameEXT_c
  glImportSemaphoreFdEXT
  glImportSemaphoreWin32HandleEXT_c
  glImportSemaphoreWin32NameEXT_c
  glImportSyncEXT
  glIndexd
  glIndexdv_c
  glIndexf
  glIndexFormatNV
  glIndexFuncEXT
  glIndexfv_c
  glIndexi
  glIndexiv_c
  glIndexMask
  glIndexMaterialEXT
  glIndexPointerEXT_c
  glIndexPointerListIBM_c
  glIndexPointer_c
  glIndexs
  glIndexsv_c
  glIndexub
  glIndexubv_c
  glInitNames
  glInsertComponentEXT
  glInsertEventMarkerEXT_c
  glInterleavedArrays_c
  glInterleavedTextureCoordSetsSGIS
  glInterpolatePathsNV
  glInvalidateBufferData
  glInvalidateBufferSubData
  glInvalidateFramebuffer_c
  glInvalidateNamedFramebufferData_c
  glInvalidateNamedFramebufferSubData_c
  glInvalidateSubFramebuffer_c
  glInvalidateTexImage
  glInvalidateTexSubImage
  glIsAsyncMarkerSGIX
  glIsBuffer
  glIsBufferARB
  glIsBufferResidentNV
  glIsCommandListNV
  glIsEnabled
  glIsEnabledi
  glIsEnablediEXT
  glIsEnabledIndexedEXT
  glIsEnablediNV
  glIsFenceAPPLE
  glIsFenceNV
  glIsFramebuffer
  glIsFramebufferEXT
  glIsImageHandleResidentARB
  glIsImageHandleResidentNV
  glIsList
  glIsMemoryObjectEXT
  glIsMPEGPredictorSGIX
  glIsNameAMD
  glIsNamedBufferResidentNV
  glIsNamedStringARB_c
  glIsObjectBufferATI
  glIsOcclusionQueryNV
  glIsPathNV
  glIsPointInFillPathNV
  glIsPointInStrokePathNV
  glIsProgram
  glIsProgramARB
  glIsProgramNV
  glIsProgramPipeline
  glIsQuery
  glIsQueryANGLE
  glIsQueryARB
  glIsRenderbuffer
  glIsRenderbufferEXT
  glIsSampler
  glIsSemaphoreEXT
  glIsShader
  glIsStateNV
  glIsSupportedREGAL_c
  glIsSync
  glIsSyncAPPLE
  glIsTexture
  glIsTextureEXT
  glIsTextureHandleResidentARB
  glIsTextureHandleResidentNV
  glIsTransformFeedback
  glIsTransformFeedbackNV
  glIsVariantEnabledEXT
  glIsVertexArray
  glIsVertexArrayAPPLE
  glIsVertexArraySGIX
  glIsVertexAttribEnabledAPPLE
  glLabelObjectEXT_c
  glLGPUCopyImageSubDataNVX
  glLGPUInterlockNVX
  glLGPUNamedBufferSubDataNVX_c
  glLightEnviEXT
  glLightf
  glLightfv_c
  glLighti
  glLightiv_c
  glLightModelf
  glLightModelfv_c
  glLightModeli
  glLightModeliv_c
  glLightModelx
  glLightModelxv_c
  glLightx
  glLightxv_c
  glLineStipple
  glLineWidth
  glLineWidthx
  glLinkProgram
  glLinkProgramARB
  glListBase
  glListDrawCommandsStatesClientNV_c
  glLoadIdentity
  glLoadIdentityDeformationMapSGIX
  glLoadMatrixd_c
  glLoadMatrixf_c
  glLoadMatrixx_c
  glLoadName
  glLoadProgramNV_c
  glLoadTransposeMatrixdARB_c
  glLoadTransposeMatrixd_c
  glLoadTransposeMatrixfARB_c
  glLoadTransposeMatrixf_c
  glLockArraysEXT
  glLogicOp
  glLogMessageCallbackREGAL
  glMakeBufferNonResidentNV
  glMakeBufferResidentNV
  glMakeImageHandleNonResidentARB
  glMakeImageHandleNonResidentNV
  glMakeImageHandleResidentARB
  glMakeImageHandleResidentNV
  glMakeNamedBufferNonResidentNV
  glMakeNamedBufferResidentNV
  glMakeTextureHandleNonResidentARB
  glMakeTextureHandleNonResidentNV
  glMakeTextureHandleResidentARB
  glMakeTextureHandleResidentNV
  glMap1d_c
  glMap1f_c
  glMap2d_c
  glMap2f_c
  glMapBufferARB_c
  glMapBufferRangeEXT_c
  glMapBufferRange_c
  glMapBuffer_c
  glMapControlPointsNV_c
  glMapGrid1d
  glMapGrid1f
  glMapGrid2d
  glMapGrid2f
  glMapNamedBufferEXT_c
  glMapNamedBufferRangeEXT_c
  glMapNamedBufferRange_c
  glMapNamedBuffer_c
  glMapObjectBufferATI_c
  glMapParameterfvNV_c
  glMapParameterivNV_c
  glMapTexture2DINTEL_c
  glMapVertexAttrib1dAPPLE_c
  glMapVertexAttrib1fAPPLE_c
  glMapVertexAttrib2dAPPLE_c
  glMapVertexAttrib2fAPPLE_c
  glMaterialf
  glMaterialfv_c
  glMateriali
  glMaterialiv_c
  glMaterialx
  glMaterialxv_c
  glMatrixFrustumEXT
  glMatrixIndexPointerARB_c
  glMatrixIndexubvARB_c
  glMatrixIndexuivARB_c
  glMatrixIndexusvARB_c
  glMatrixLoad3x2fNV_c
  glMatrixLoad3x3fNV_c
  glMatrixLoaddEXT_c
  glMatrixLoadfEXT_c
  glMatrixLoadIdentityEXT
  glMatrixLoadTranspose3x3fNV_c
  glMatrixLoadTransposedEXT_c
  glMatrixLoadTransposefEXT_c
  glMatrixMode
  glMatrixMult3x2fNV_c
  glMatrixMult3x3fNV_c
  glMatrixMultdEXT_c
  glMatrixMultfEXT_c
  glMatrixMultTranspose3x3fNV_c
  glMatrixMultTransposedEXT_c
  glMatrixMultTransposefEXT_c
  glMatrixOrthoEXT
  glMatrixPopEXT
  glMatrixPushEXT
  glMatrixRotatedEXT
  glMatrixRotatefEXT
  glMatrixScaledEXT
  glMatrixScalefEXT
  glMatrixTranslatedEXT
  glMatrixTranslatefEXT
  glMaxShaderCompilerThreadsARB
  glMaxShaderCompilerThreadsKHR
  glMemoryBarrier
  glMemoryBarrierByRegion
  glMemoryBarrierEXT
  glMemoryObjectParameterivEXT_c
  glMeshBreadthSGIX
  glMeshStrideSGIX
  glMinmax
  glMinmaxEXT
  glMinSampleShading
  glMinSampleShadingARB
  glMPEGPredictorSGIX_c
  glMPEGQuantTableubv_c
  glMulticastBarrierNV
  glMulticastBlitFramebufferNV
  glMulticastBufferSubDataNV_c
  glMulticastCopyBufferSubDataNV
  glMulticastCopyImageSubDataNV
  glMulticastFramebufferSampleLocationsfvNV_c
  glMulticastGetQueryObjecti64vNV_c
  glMulticastGetQueryObjectivNV_c
  glMulticastGetQueryObjectui64vNV_c
  glMulticastGetQueryObjectuivNV_c
  glMulticastWaitSyncNV
  glMultiDrawArraysEXT_c
  glMultiDrawArraysIndirectAMD_c
  glMultiDrawArraysIndirectBindlessCountNV_c
  glMultiDrawArraysIndirectBindlessNV_c
  glMultiDrawArraysIndirectCountARB_c
  glMultiDrawArraysIndirectCount_c
  glMultiDrawArraysIndirectEXT_c
  glMultiDrawArraysIndirect_c
  glMultiDrawArrays_c
  glMultiDrawElementArrayAPPLE_c
  glMultiDrawElementsBaseVertexEXT_c
  glMultiDrawElementsBaseVertex_c
  glMultiDrawElementsEXT_c
  glMultiDrawElementsIndirectAMD_c
  glMultiDrawElementsIndirectBindlessCountNV_c
  glMultiDrawElementsIndirectBindlessNV_c
  glMultiDrawElementsIndirectCountARB_c
  glMultiDrawElementsIndirectCount_c
  glMultiDrawElementsIndirectEXT_c
  glMultiDrawElementsIndirect_c
  glMultiDrawElements_c
  glMultiDrawRangeElementArrayAPPLE_c
  glMultiModeDrawArraysIBM_c
  glMultiModeDrawElementsIBM_c
  glMultisampleSubRectPosSGIS
  glMultiTexBufferEXT
  glMultiTexCoord1d
  glMultiTexCoord1dARB
  glMultiTexCoord1dvARB_c
  glMultiTexCoord1dv_c
  glMultiTexCoord1f
  glMultiTexCoord1fARB
  glMultiTexCoord1fvARB_c
  glMultiTexCoord1fv_c
  glMultiTexCoord1hNV
  glMultiTexCoord1hvNV_c
  glMultiTexCoord1i
  glMultiTexCoord1iARB
  glMultiTexCoord1ivARB_c
  glMultiTexCoord1iv_c
  glMultiTexCoord1s
  glMultiTexCoord1sARB
  glMultiTexCoord1svARB_c
  glMultiTexCoord1sv_c
  glMultiTexCoord2d
  glMultiTexCoord2dARB
  glMultiTexCoord2dvARB_c
  glMultiTexCoord2dv_c
  glMultiTexCoord2f
  glMultiTexCoord2fARB
  glMultiTexCoord2fvARB_c
  glMultiTexCoord2fv_c
  glMultiTexCoord2hNV
  glMultiTexCoord2hvNV_c
  glMultiTexCoord2i
  glMultiTexCoord2iARB
  glMultiTexCoord2ivARB_c
  glMultiTexCoord2iv_c
  glMultiTexCoord2s
  glMultiTexCoord2sARB
  glMultiTexCoord2svARB_c
  glMultiTexCoord2sv_c
  glMultiTexCoord3d
  glMultiTexCoord3dARB
  glMultiTexCoord3dvARB_c
  glMultiTexCoord3dv_c
  glMultiTexCoord3f
  glMultiTexCoord3fARB
  glMultiTexCoord3fvARB_c
  glMultiTexCoord3fv_c
  glMultiTexCoord3hNV
  glMultiTexCoord3hvNV_c
  glMultiTexCoord3i
  glMultiTexCoord3iARB
  glMultiTexCoord3ivARB_c
  glMultiTexCoord3iv_c
  glMultiTexCoord3s
  glMultiTexCoord3sARB
  glMultiTexCoord3svARB_c
  glMultiTexCoord3sv_c
  glMultiTexCoord4d
  glMultiTexCoord4dARB
  glMultiTexCoord4dvARB_c
  glMultiTexCoord4dv_c
  glMultiTexCoord4f
  glMultiTexCoord4fARB
  glMultiTexCoord4fvARB_c
  glMultiTexCoord4fv_c
  glMultiTexCoord4hNV
  glMultiTexCoord4hvNV_c
  glMultiTexCoord4i
  glMultiTexCoord4iARB
  glMultiTexCoord4ivARB_c
  glMultiTexCoord4iv_c
  glMultiTexCoord4s
  glMultiTexCoord4sARB
  glMultiTexCoord4svARB_c
  glMultiTexCoord4sv_c
  glMultiTexCoord4x
  glMultiTexCoordP1ui
  glMultiTexCoordP1uiv_c
  glMultiTexCoordP2ui
  glMultiTexCoordP2uiv_c
  glMultiTexCoordP3ui
  glMultiTexCoordP3uiv_c
  glMultiTexCoordP4ui
  glMultiTexCoordP4uiv_c
  glMultiTexCoordPointerEXT_c
  glMultiTexEnvfEXT
  glMultiTexEnvfvEXT_c
  glMultiTexEnviEXT
  glMultiTexEnvivEXT_c
  glMultiTexGendEXT
  glMultiTexGendvEXT_c
  glMultiTexGenfEXT
  glMultiTexGenfvEXT_c
  glMultiTexGeniEXT
  glMultiTexGenivEXT_c
  glMultiTexImage1DEXT_c
  glMultiTexImage2DEXT_c
  glMultiTexImage3DEXT_c
  glMultiTexParameterfEXT
  glMultiTexParameterfvEXT_c
  glMultiTexParameteriEXT
  glMultiTexParameterIivEXT_c
  glMultiTexParameterIuivEXT_c
  glMultiTexParameterivEXT_c
  glMultiTexRenderbufferEXT
  glMultiTexSubImage1DEXT_c
  glMultiTexSubImage2DEXT_c
  glMultiTexSubImage3DEXT_c
  glMultMatrixd_c
  glMultMatrixf_c
  glMultMatrixx_c
  glMultTransposeMatrixdARB_c
  glMultTransposeMatrixd_c
  glMultTransposeMatrixfARB_c
  glMultTransposeMatrixf_c
  glNamedBufferDataEXT_c
  glNamedBufferData_c
  glNamedBufferStorageExternalEXT
  glNamedBufferStorageEXT_c
  glNamedBufferStorageMemEXT
  glNamedBufferStorage_c
  glNamedBufferSubDataEXT_c
  glNamedBufferSubData_c
  glNamedCopyBufferSubDataEXT
  glNamedFramebufferDrawBuffer
  glNamedFramebufferDrawBuffers_c
  glNamedFramebufferParameteri
  glNamedFramebufferParameteriEXT
  glNamedFramebufferReadBuffer
  glNamedFramebufferRenderbuffer
  glNamedFramebufferRenderbufferEXT
  glNamedFramebufferSampleLocationsfvARB_c
  glNamedFramebufferSampleLocationsfvNV_c
  glNamedFramebufferSamplePositionsfvAMD_c
  glNamedFramebufferTexture
  glNamedFramebufferTexture1DEXT
  glNamedFramebufferTexture2DEXT
  glNamedFramebufferTexture3DEXT
  glNamedFramebufferTextureEXT
  glNamedFramebufferTextureFaceEXT
  glNamedFramebufferTextureLayer
  glNamedFramebufferTextureLayerEXT
  glNamedProgramLocalParameter4dEXT
  glNamedProgramLocalParameter4dvEXT_c
  glNamedProgramLocalParameter4fEXT
  glNamedProgramLocalParameter4fvEXT_c
  glNamedProgramLocalParameterI4iEXT
  glNamedProgramLocalParameterI4ivEXT_c
  glNamedProgramLocalParameterI4uiEXT
  glNamedProgramLocalParameterI4uivEXT_c
  glNamedProgramLocalParameters4fvEXT_c
  glNamedProgramLocalParametersI4ivEXT_c
  glNamedProgramLocalParametersI4uivEXT_c
  glNamedProgramStringEXT_c
  glNamedRenderbufferStorage
  glNamedRenderbufferStorageEXT
  glNamedRenderbufferStorageMultisample
  glNamedRenderbufferStorageMultisampleCoverageEXT
  glNamedRenderbufferStorageMultisampleEXT
  glNamedStringARB_c
  glNewBufferRegion
  glNewList
  glNewObjectBufferATI_c
  glNonlinLightfvSGIX_c
  glNonlinMaterialfvSGIX_c
  glNormal3b
  glNormal3bv_c
  glNormal3d
  glNormal3dv_c
  glNormal3f
  glNormal3fVertex3fSUN
  glNormal3fVertex3fvSUN_c
  glNormal3fv_c
  glNormal3hNV
  glNormal3hvNV_c
  glNormal3i
  glNormal3iv_c
  glNormal3s
  glNormal3sv_c
  glNormal3x
  glNormalFormatNV
  glNormalP3ui
  glNormalP3uiv_c
  glNormalPointerEXT_c
  glNormalPointerListIBM_c
  glNormalPointervINTEL_c
  glNormalPointer_c
  glNormalStream3bATI
  glNormalStream3bvATI_c
  glNormalStream3dATI
  glNormalStream3dvATI_c
  glNormalStream3fATI
  glNormalStream3fvATI_c
  glNormalStream3iATI
  glNormalStream3ivATI_c
  glNormalStream3sATI
  glNormalStream3svATI_c
  glObjectLabel_c
  glObjectPtrLabel_c
  glObjectPurgeableAPPLE
  glObjectUnpurgeableAPPLE
  glOrtho
  glOrthof
  glOrthox
  glPassTexCoordATI
  glPassThrough
  glPatchParameterfv_c
  glPatchParameteri
  glPathColorGenNV_c
  glPathCommandsNV_c
  glPathCoordsNV_c
  glPathCoverDepthFuncNV
  glPathDashArrayNV_c
  glPathFogGenNV
  glPathGlyphIndexArrayNV_c
  glPathGlyphIndexRangeNV_c
  glPathGlyphRangeNV_c
  glPathGlyphsNV_c
  glPathMemoryGlyphIndexArrayNV_c
  glPathParameterfNV
  glPathParameterfvNV_c
  glPathParameteriNV
  glPathParameterivNV_c
  glPathStencilDepthOffsetNV
  glPathStencilFuncNV
  glPathStringNV_c
  glPathSubCommandsNV_c
  glPathSubCoordsNV_c
  glPathTexGenNV_c
  glPauseTransformFeedback
  glPauseTransformFeedbackNV
  glPixelDataRangeNV_c
  glPixelMapfv_c
  glPixelMapuiv_c
  glPixelMapusv_c
  glPixelStoref
  glPixelStorei
  glPixelTexGenSGIX
  glPixelTransferf
  glPixelTransferi
  glPixelTransformParameterfEXT
  glPixelTransformParameterfSGI
  glPixelTransformParameterfvEXT_c
  glPixelTransformParameterfvSGI_c
  glPixelTransformParameteriEXT
  glPixelTransformParameteriSGI
  glPixelTransformParameterivEXT_c
  glPixelTransformParameterivSGI_c
  glPixelTransformSGI
  glPixelZoom
  glPNTrianglesfATI
  glPNTrianglesiATI
  glPointAlongPathNV_c
  glPointParameterf
  glPointParameterfARB
  glPointParameterfEXT
  glPointParameterfvARB_c
  glPointParameterfvEXT_c
  glPointParameterfv_c
  glPointParameteri
  glPointParameteriNV
  glPointParameterivNV_c
  glPointParameteriv_c
  glPointParameterx
  glPointParameterxv_c
  glPointSize
  glPointSizePointerOES_c
  glPointSizex
  glPollAsyncSGIX_c
  glPolygonMode
  glPolygonModeNV
  glPolygonOffset
  glPolygonOffsetClamp
  glPolygonOffsetClampEXT
  glPolygonOffsetEXT
  glPolygonOffsetx
  glPolygonStipple_c
  glPopAttrib
  glPopClientAttrib
  glPopDebugGroup
  glPopGroupMarkerEXT
  glPopMatrix
  glPopName
  glPresentFrameDualFillNV
  glPresentFrameKeyedNV
  glPrimitiveBoundingBoxARB
  glPrimitiveRestartIndex
  glPrimitiveRestartIndexNV
  glPrimitiveRestartNV
  glPrioritizeTexturesEXT_c
  glPrioritizeTextures_c
  glPrioritizeVertexArraysSGIX_c
  glProgramBinary_c
  glProgramBufferParametersfvNV_c
  glProgramBufferParametersIivNV_c
  glProgramBufferParametersIuivNV_c
  glProgramEnvParameter4dARB
  glProgramEnvParameter4dvARB_c
  glProgramEnvParameter4fARB
  glProgramEnvParameter4fvARB_c
  glProgramEnvParameterI4iNV
  glProgramEnvParameterI4ivNV_c
  glProgramEnvParameterI4uiNV
  glProgramEnvParameterI4uivNV_c
  glProgramEnvParameters4fvEXT_c
  glProgramEnvParametersI4ivNV_c
  glProgramEnvParametersI4uivNV_c
  glProgramLocalParameter4dARB
  glProgramLocalParameter4dvARB_c
  glProgramLocalParameter4fARB
  glProgramLocalParameter4fvARB_c
  glProgramLocalParameterI4iNV
  glProgramLocalParameterI4ivNV_c
  glProgramLocalParameterI4uiNV
  glProgramLocalParameterI4uivNV_c
  glProgramLocalParameters4fvEXT_c
  glProgramLocalParametersI4ivNV_c
  glProgramLocalParametersI4uivNV_c
  glProgramNamedParameter4dNV_c
  glProgramNamedParameter4dvNV_c
  glProgramNamedParameter4fNV_c
  glProgramNamedParameter4fvNV_c
  glProgramParameter4dNV
  glProgramParameter4dvNV_c
  glProgramParameter4fNV
  glProgramParameter4fvNV_c
  glProgramParameteri
  glProgramParameteriARB
  glProgramParameteriEXT
  glProgramParameters4dvNV_c
  glProgramParameters4fvNV_c
  glProgramPathFragmentInputGenNV_c
  glProgramStringARB_c
  glProgramUniform1d
  glProgramUniform1dv_c
  glProgramUniform1f
  glProgramUniform1fEXT
  glProgramUniform1fvEXT_c
  glProgramUniform1fv_c
  glProgramUniform1i
  glProgramUniform1i64ARB
  glProgramUniform1i64NV
  glProgramUniform1i64vARB_c
  glProgramUniform1i64vNV_c
  glProgramUniform1iEXT
  glProgramUniform1ivEXT_c
  glProgramUniform1iv_c
  glProgramUniform1ui
  glProgramUniform1ui64ARB
  glProgramUniform1ui64NV
  glProgramUniform1ui64vARB_c
  glProgramUniform1ui64vNV_c
  glProgramUniform1uiEXT
  glProgramUniform1uivEXT_c
  glProgramUniform1uiv_c
  glProgramUniform2d
  glProgramUniform2dv_c
  glProgramUniform2f
  glProgramUniform2fEXT
  glProgramUniform2fvEXT_c
  glProgramUniform2fv_c
  glProgramUniform2i
  glProgramUniform2i64ARB
  glProgramUniform2i64NV
  glProgramUniform2i64vARB_c
  glProgramUniform2i64vNV_c
  glProgramUniform2iEXT
  glProgramUniform2ivEXT_c
  glProgramUniform2iv_c
  glProgramUniform2ui
  glProgramUniform2ui64ARB
  glProgramUniform2ui64NV
  glProgramUniform2ui64vARB_c
  glProgramUniform2ui64vNV_c
  glProgramUniform2uiEXT
  glProgramUniform2uivEXT_c
  glProgramUniform2uiv_c
  glProgramUniform3d
  glProgramUniform3dv_c
  glProgramUniform3f
  glProgramUniform3fEXT
  glProgramUniform3fvEXT_c
  glProgramUniform3fv_c
  glProgramUniform3i
  glProgramUniform3i64ARB
  glProgramUniform3i64NV
  glProgramUniform3i64vARB_c
  glProgramUniform3i64vNV_c
  glProgramUniform3iEXT
  glProgramUniform3ivEXT_c
  glProgramUniform3iv_c
  glProgramUniform3ui
  glProgramUniform3ui64ARB
  glProgramUniform3ui64NV
  glProgramUniform3ui64vARB_c
  glProgramUniform3ui64vNV_c
  glProgramUniform3uiEXT
  glProgramUniform3uivEXT_c
  glProgramUniform3uiv_c
  glProgramUniform4d
  glProgramUniform4dv_c
  glProgramUniform4f
  glProgramUniform4fEXT
  glProgramUniform4fvEXT_c
  glProgramUniform4fv_c
  glProgramUniform4i
  glProgramUniform4i64ARB
  glProgramUniform4i64NV
  glProgramUniform4i64vARB_c
  glProgramUniform4i64vNV_c
  glProgramUniform4iEXT
  glProgramUniform4ivEXT_c
  glProgramUniform4iv_c
  glProgramUniform4ui
  glProgramUniform4ui64ARB
  glProgramUniform4ui64NV
  glProgramUniform4ui64vARB_c
  glProgramUniform4ui64vNV_c
  glProgramUniform4uiEXT
  glProgramUniform4uivEXT_c
  glProgramUniform4uiv_c
  glProgramUniformHandleui64ARB
  glProgramUniformHandleui64NV
  glProgramUniformHandleui64vARB_c
  glProgramUniformHandleui64vNV_c
  glProgramUniformMatrix2dv_c
  glProgramUniformMatrix2fvEXT_c
  glProgramUniformMatrix2fv_c
  glProgramUniformMatrix2x3dv_c
  glProgramUniformMatrix2x3fvEXT_c
  glProgramUniformMatrix2x3fv_c
  glProgramUniformMatrix2x4dv_c
  glProgramUniformMatrix2x4fvEXT_c
  glProgramUniformMatrix2x4fv_c
  glProgramUniformMatrix3dv_c
  glProgramUniformMatrix3fvEXT_c
  glProgramUniformMatrix3fv_c
  glProgramUniformMatrix3x2dv_c
  glProgramUniformMatrix3x2fvEXT_c
  glProgramUniformMatrix3x2fv_c
  glProgramUniformMatrix3x4dv_c
  glProgramUniformMatrix3x4fvEXT_c
  glProgramUniformMatrix3x4fv_c
  glProgramUniformMatrix4dv_c
  glProgramUniformMatrix4fvEXT_c
  glProgramUniformMatrix4fv_c
  glProgramUniformMatrix4x2dv_c
  glProgramUniformMatrix4x2fvEXT_c
  glProgramUniformMatrix4x2fv_c
  glProgramUniformMatrix4x3dv_c
  glProgramUniformMatrix4x3fvEXT_c
  glProgramUniformMatrix4x3fv_c
  glProgramUniformui64NV
  glProgramUniformui64vNV_c
  glProgramVertexLimitNV
  glProvokingVertex
  glProvokingVertexEXT
  glPushAttrib
  glPushClientAttrib
  glPushClientAttribDefaultEXT
  glPushDebugGroup_c
  glPushGroupMarkerEXT_c
  glPushMatrix
  glPushName
  glQueryCounter
  glQueryCounterANGLE
  glQueryObjectParameteruiAMD
  glRasterPos2d
  glRasterPos2dv_c
  glRasterPos2f
  glRasterPos2fv_c
  glRasterPos2i
  glRasterPos2iv_c
  glRasterPos2s
  glRasterPos2sv_c
  glRasterPos3d
  glRasterPos3dv_c
  glRasterPos3f
  glRasterPos3fv_c
  glRasterPos3i
  glRasterPos3iv_c
  glRasterPos3s
  glRasterPos3sv_c
  glRasterPos4d
  glRasterPos4dv_c
  glRasterPos4f
  glRasterPos4fv_c
  glRasterPos4i
  glRasterPos4iv_c
  glRasterPos4s
  glRasterPos4sv_c
  glRasterSamplesEXT
  glReadBuffer
  glReadBufferIndexedEXT
  glReadBufferRegion
  glReadnPixelsARB_c
  glReadnPixels_c
  glReadPixels_c
  glReadVideoPixelsSUN_c
  glRectd
  glRectdv_c
  glRectf
  glRectfv_c
  glRecti
  glRectiv_c
  glRects
  glRectsv_c
  glReferencePlaneSGIX_c
  glReleaseKeyedMutexWin32EXT
  glReleaseShaderCompiler
  glRenderbufferStorage
  glRenderbufferStorageEXT
  glRenderbufferStorageMultisample
  glRenderbufferStorageMultisampleANGLE
  glRenderbufferStorageMultisampleAPPLE
  glRenderbufferStorageMultisampleCoverageNV
  glRenderbufferStorageMultisampleEXT
  glRenderbufferStorageMultisampleNV
  glRenderGpuMaskNV
  glRenderMode
  glReplacementCodePointerSUN_c
  glReplacementCodeubSUN
  glReplacementCodeubvSUN_c
  glReplacementCodeuiColor3fVertex3fSUN
  glReplacementCodeuiColor3fVertex3fvSUN_c
  glReplacementCodeuiColor4fNormal3fVertex3fSUN
  glReplacementCodeuiColor4fNormal3fVertex3fvSUN_c
  glReplacementCodeuiColor4ubVertex3fSUN
  glReplacementCodeuiColor4ubVertex3fvSUN_c
  glReplacementCodeuiNormal3fVertex3fSUN
  glReplacementCodeuiNormal3fVertex3fvSUN_c
  glReplacementCodeuiSUN
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_c
  glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
  glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_c
  glReplacementCodeuiTexCoord2fVertex3fSUN
  glReplacementCodeuiTexCoord2fVertex3fvSUN_c
  glReplacementCodeuiVertex3fSUN
  glReplacementCodeuiVertex3fvSUN_c
  glReplacementCodeuivSUN_c
  glReplacementCodeusSUN
  glReplacementCodeusvSUN_c
  glRequestResidentProgramsNV_c
  glResetHistogram
  glResetHistogramEXT
  glResetMinmax
  glResetMinmaxEXT
  glResizeBuffersMESA
  glResolveMultisampleFramebufferAPPLE
  glResumeTransformFeedback
  glResumeTransformFeedbackNV
  glRotated
  glRotatef
  glRotatex
  glSampleCoverage
  glSampleCoverageARB
  glSampleCoveragex
  glSampleMapATI
  glSampleMaskEXT
  glSampleMaski
  glSampleMaskIndexedNV
  glSampleMaskSGIS
  glSamplePatternEXT
  glSamplePatternSGIS
  glSamplerParameterf
  glSamplerParameterfv_c
  glSamplerParameteri
  glSamplerParameterIiv_c
  glSamplerParameterIuiv_c
  glSamplerParameteriv_c
  glScaled
  glScalef
  glScalex
  glScissor
  glScissorArrayvNV_c
  glScissorArrayv_c
  glScissorIndexed
  glScissorIndexedNV
  glScissorIndexedvNV_c
  glScissorIndexedv_c
  glSecondaryColor3b
  glSecondaryColor3bEXT
  glSecondaryColor3bvEXT_c
  glSecondaryColor3bv_c
  glSecondaryColor3d
  glSecondaryColor3dEXT
  glSecondaryColor3dvEXT_c
  glSecondaryColor3dv_c
  glSecondaryColor3f
  glSecondaryColor3fEXT
  glSecondaryColor3fvEXT_c
  glSecondaryColor3fv_c
  glSecondaryColor3hNV
  glSecondaryColor3hvNV_c
  glSecondaryColor3i
  glSecondaryColor3iEXT
  glSecondaryColor3ivEXT_c
  glSecondaryColor3iv_c
  glSecondaryColor3s
  glSecondaryColor3sEXT
  glSecondaryColor3svEXT_c
  glSecondaryColor3sv_c
  glSecondaryColor3ub
  glSecondaryColor3ubEXT
  glSecondaryColor3ubvEXT_c
  glSecondaryColor3ubv_c
  glSecondaryColor3ui
  glSecondaryColor3uiEXT
  glSecondaryColor3uivEXT_c
  glSecondaryColor3uiv_c
  glSecondaryColor3us
  glSecondaryColor3usEXT
  glSecondaryColor3usvEXT_c
  glSecondaryColor3usv_c
  glSecondaryColorFormatNV
  glSecondaryColorP3ui
  glSecondaryColorP3uiv_c
  glSecondaryColorPointerEXT_c
  glSecondaryColorPointerListIBM_c
  glSecondaryColorPointer_c
  glSelectBuffer_c
  glSelectPerfMonitorCountersAMD_c
  glSelectTextureCoordSetSGIS
  glSelectTextureSGIS
  glSelectTextureTransformSGIS
  glSemaphoreParameterui64vEXT_c
  glSeparableFilter2DEXT_c
  glSeparableFilter2D_c
  glSetFenceAPPLE
  glSetFenceNV
  glSetFragmentShaderConstantATI_c
  glSetInvariantEXT_c
  glSetLocalConstantEXT_c
  glSetMultisamplefvAMD_c
  glShadeModel
  glShaderBinary_c
  glShaderOp1EXT
  glShaderOp2EXT
  glShaderOp3EXT
  glShaderSourceARB_c
  glShaderSource_c
  glShaderSource_p
  glShaderStorageBlockBinding
  glSharpenTexFuncSGIS_c
  glSignalSemaphoreEXT_c
  glSignalVkFenceNV
  glSignalVkSemaphoreNV
  glSpecializeShaderARB_c
  glSpecializeShader_c
  glSpriteParameterfSGIX
  glSpriteParameterfvSGIX_c
  glSpriteParameteriSGIX
  glSpriteParameterivSGIX_c
  glStartTilingQCOM
  glStateCaptureNV
  glStencilFillPathInstancedNV_c
  glStencilFillPathNV
  glStencilFunc
  glStencilFuncSeparate
  glStencilFuncSeparateATI
  glStencilMask
  glStencilMaskSeparate
  glStencilOp
  glStencilOpSeparate
  glStencilOpSeparateATI
  glStencilOpValueAMD
  glStencilStrokePathInstancedNV_c
  glStencilStrokePathNV
  glStencilThenCoverFillPathInstancedNV_c
  glStencilThenCoverFillPathNV
  glStencilThenCoverStrokePathInstancedNV_c
  glStencilThenCoverStrokePathNV
  glStereoParameterfNV
  glStereoParameteriNV
  glStringMarkerGREMEDY_c
  glSubpixelPrecisionBiasNV
  glSwapMPEGPredictorsSGIX
  glSwizzleEXT
  glSyncTextureINTEL
  glTagSampleBufferSGIX
  glTangentPointerEXT_c
  glTbufferMask3DFX
  glTessellationFactorAMD
  glTessellationModeAMD
  glTestFenceAPPLE
  glTestFenceNV
  glTestObjectAPPLE
  glTexBuffer
  glTexBufferARB
  glTexBufferEXT
  glTexBufferRange
  glTexBumpParameterfvATI_c
  glTexBumpParameterivATI_c
  glTexCoord1d
  glTexCoord1dv_c
  glTexCoord1f
  glTexCoord1fv_c
  glTexCoord1hNV
  glTexCoord1hvNV_c
  glTexCoord1i
  glTexCoord1iv_c
  glTexCoord1s
  glTexCoord1sv_c
  glTexCoord2d
  glTexCoord2dv_c
  glTexCoord2f
  glTexCoord2fColor3fVertex3fSUN
  glTexCoord2fColor3fVertex3fvSUN_c
  glTexCoord2fColor4fNormal3fVertex3fSUN
  glTexCoord2fColor4fNormal3fVertex3fvSUN_c
  glTexCoord2fColor4ubVertex3fSUN
  glTexCoord2fColor4ubVertex3fvSUN_c
  glTexCoord2fNormal3fVertex3fSUN
  glTexCoord2fNormal3fVertex3fvSUN_c
  glTexCoord2fVertex3fSUN
  glTexCoord2fVertex3fvSUN_c
  glTexCoord2fv_c
  glTexCoord2hNV
  glTexCoord2hvNV_c
  glTexCoord2i
  glTexCoord2iv_c
  glTexCoord2s
  glTexCoord2sv_c
  glTexCoord3d
  glTexCoord3dv_c
  glTexCoord3f
  glTexCoord3fv_c
  glTexCoord3hNV
  glTexCoord3hvNV_c
  glTexCoord3i
  glTexCoord3iv_c
  glTexCoord3s
  glTexCoord3sv_c
  glTexCoord4d
  glTexCoord4dv_c
  glTexCoord4f
  glTexCoord4fColor4fNormal3fVertex4fSUN
  glTexCoord4fColor4fNormal3fVertex4fvSUN_c
  glTexCoord4fVertex4fSUN
  glTexCoord4fVertex4fvSUN_c
  glTexCoord4fv_c
  glTexCoord4hNV
  glTexCoord4hvNV_c
  glTexCoord4i
  glTexCoord4iv_c
  glTexCoord4s
  glTexCoord4sv_c
  glTexCoordFormatNV
  glTexCoordP1ui
  glTexCoordP1uiv_c
  glTexCoordP2ui
  glTexCoordP2uiv_c
  glTexCoordP3ui
  glTexCoordP3uiv_c
  glTexCoordP4ui
  glTexCoordP4uiv_c
  glTexCoordPointerEXT_c
  glTexCoordPointerListIBM_c
  glTexCoordPointervINTEL_c
  glTexCoordPointer_c
  glTexEnvf
  glTexEnvfv_c
  glTexEnvi
  glTexEnviv_c
  glTexEnvx
  glTexEnvxv_c
  glTexFilterFuncSGIS_c
  glTexGend
  glTexGendv_c
  glTexGenf
  glTexGenfv_c
  glTexGeni
  glTexGeniv_c
  glTexImage1D_c
  glTexImage2DMultisample
  glTexImage2DMultisampleCoverageNV
  glTexImage2D_c
  glTexImage3DEXT_c
  glTexImage3DMultisample
  glTexImage3DMultisampleCoverageNV
  glTexImage3DNV_c
  glTexImage3D_c
  glTexImage4DSGIS_c
  glTexPageCommitmentARB
  glTexPageCommitmentEXT
  glTexParameterf
  glTexParameterfv_c
  glTexParameteri
  glTexParameterIivEXT_c
  glTexParameterIiv_c
  glTexParameterIuivEXT_c
  glTexParameterIuiv_c
  glTexParameteriv_c
  glTexParameterx
  glTexParameterxv_c
  glTexRenderbufferNV
  glTexScissorFuncINTEL
  glTexScissorINTEL
  glTexStorage1D
  glTexStorage1DEXT
  glTexStorage2D
  glTexStorage2DEXT
  glTexStorage2DMultisample
  glTexStorage3D
  glTexStorage3DEXT
  glTexStorage3DMultisample
  glTexStorageMem1DEXT
  glTexStorageMem2DEXT
  glTexStorageMem2DMultisampleEXT
  glTexStorageMem3DEXT
  glTexStorageMem3DMultisampleEXT
  glTexStorageSparseAMD
  glTexSubImage1DEXT_c
  glTexSubImage1D_c
  glTexSubImage2DEXT_c
  glTexSubImage2D_c
  glTexSubImage3DEXT_c
  glTexSubImage3DNV_c
  glTexSubImage3D_c
  glTexSubImage4DSGIS_c
  glTextureBarrier
  glTextureBarrierNV
  glTextureBuffer
  glTextureBufferEXT
  glTextureBufferRange
  glTextureBufferRangeEXT
  glTextureFogSGIX
  glTextureImage1DEXT_c
  glTextureImage2DEXT_c
  glTextureImage2DMultisampleCoverageNV
  glTextureImage2DMultisampleNV
  glTextureImage3DEXT_c
  glTextureImage3DMultisampleCoverageNV
  glTextureImage3DMultisampleNV
  glTextureLightEXT
  glTextureMaterialEXT
  glTextureNormalEXT
  glTexturePageCommitmentEXT
  glTextureParameterf
  glTextureParameterfEXT
  glTextureParameterfvEXT_c
  glTextureParameterfv_c
  glTextureParameteri
  glTextureParameteriEXT
  glTextureParameterIivEXT_c
  glTextureParameterIiv_c
  glTextureParameterIuivEXT_c
  glTextureParameterIuiv_c
  glTextureParameterivEXT_c
  glTextureParameteriv_c
  glTextureRangeAPPLE_c
  glTextureRenderbufferEXT
  glTextureStorage1D
  glTextureStorage1DEXT
  glTextureStorage2D
  glTextureStorage2DEXT
  glTextureStorage2DMultisample
  glTextureStorage2DMultisampleEXT
  glTextureStorage3D
  glTextureStorage3DEXT
  glTextureStorage3DMultisample
  glTextureStorage3DMultisampleEXT
  glTextureStorageMem1DEXT
  glTextureStorageMem2DEXT
  glTextureStorageMem2DMultisampleEXT
  glTextureStorageMem3DEXT
  glTextureStorageMem3DMultisampleEXT
  glTextureStorageSparseAMD
  glTextureSubImage1DEXT_c
  glTextureSubImage1D_c
  glTextureSubImage2DEXT_c
  glTextureSubImage2D_c
  glTextureSubImage3DEXT_c
  glTextureSubImage3D_c
  glTextureView
  glTextureViewEXT
  glTrackMatrixNV
  glTransformFeedbackAttribsNV_c
  glTransformFeedbackBufferBase
  glTransformFeedbackBufferRange
  glTransformFeedbackVaryingsEXT_c
  glTransformFeedbackVaryingsNV_c
  glTransformFeedbackVaryings_c
  glTransformPathNV_c
  glTranslated
  glTranslatef
  glTranslatex
  glUniform1d
  glUniform1dv_c
  glUniform1f
  glUniform1fARB
  glUniform1fvARB_c
  glUniform1fv_c
  glUniform1i
  glUniform1i64ARB
  glUniform1i64NV
  glUniform1i64vARB_c
  glUniform1i64vNV_c
  glUniform1iARB
  glUniform1ivARB_c
  glUniform1iv_c
  glUniform1ui
  glUniform1ui64ARB
  glUniform1ui64NV
  glUniform1ui64vARB_c
  glUniform1ui64vNV_c
  glUniform1uiEXT
  glUniform1uivEXT_c
  glUniform1uiv_c
  glUniform2d
  glUniform2dv_c
  glUniform2f
  glUniform2fARB
  glUniform2fvARB_c
  glUniform2fv_c
  glUniform2i
  glUniform2i64ARB
  glUniform2i64NV
  glUniform2i64vARB_c
  glUniform2i64vNV_c
  glUniform2iARB
  glUniform2ivARB_c
  glUniform2iv_c
  glUniform2ui
  glUniform2ui64ARB
  glUniform2ui64NV
  glUniform2ui64vARB_c
  glUniform2ui64vNV_c
  glUniform2uiEXT
  glUniform2uivEXT_c
  glUniform2uiv_c
  glUniform3d
  glUniform3dv_c
  glUniform3f
  glUniform3fARB
  glUniform3fvARB_c
  glUniform3fv_c
  glUniform3i
  glUniform3i64ARB
  glUniform3i64NV
  glUniform3i64vARB_c
  glUniform3i64vNV_c
  glUniform3iARB
  glUniform3ivARB_c
  glUniform3iv_c
  glUniform3ui
  glUniform3ui64ARB
  glUniform3ui64NV
  glUniform3ui64vARB_c
  glUniform3ui64vNV_c
  glUniform3uiEXT
  glUniform3uivEXT_c
  glUniform3uiv_c
  glUniform4d
  glUniform4dv_c
  glUniform4f
  glUniform4fARB
  glUniform4fvARB_c
  glUniform4fv_c
  glUniform4i
  glUniform4i64ARB
  glUniform4i64NV
  glUniform4i64vARB_c
  glUniform4i64vNV_c
  glUniform4iARB
  glUniform4ivARB_c
  glUniform4iv_c
  glUniform4ui
  glUniform4ui64ARB
  glUniform4ui64NV
  glUniform4ui64vARB_c
  glUniform4ui64vNV_c
  glUniform4uiEXT
  glUniform4uivEXT_c
  glUniform4uiv_c
  glUniformBlockBinding
  glUniformBufferEXT
  glUniformHandleui64ARB
  glUniformHandleui64NV
  glUniformHandleui64vARB_c
  glUniformHandleui64vNV_c
  glUniformMatrix2dv_c
  glUniformMatrix2fvARB_c
  glUniformMatrix2fv_c
  glUniformMatrix2x3dv_c
  glUniformMatrix2x3fvNV_c
  glUniformMatrix2x3fv_c
  glUniformMatrix2x4dv_c
  glUniformMatrix2x4fvNV_c
  glUniformMatrix2x4fv_c
  glUniformMatrix3dv_c
  glUniformMatrix3fvARB_c
  glUniformMatrix3fv_c
  glUniformMatrix3x2dv_c
  glUniformMatrix3x2fvNV_c
  glUniformMatrix3x2fv_c
  glUniformMatrix3x4dv_c
  glUniformMatrix3x4fvNV_c
  glUniformMatrix3x4fv_c
  glUniformMatrix4dv_c
  glUniformMatrix4fvARB_c
  glUniformMatrix4fv_c
  glUniformMatrix4x2dv_c
  glUniformMatrix4x2fvNV_c
  glUniformMatrix4x2fv_c
  glUniformMatrix4x3dv_c
  glUniformMatrix4x3fvNV_c
  glUniformMatrix4x3fv_c
  glUniformSubroutinesuiv_c
  glUniformui64NV
  glUniformui64vNV_c
  glUnlockArraysEXT
  glUnmapBuffer
  glUnmapBufferARB
  glUnmapNamedBuffer
  glUnmapNamedBufferEXT
  glUnmapObjectBufferATI
  glUnmapTexture2DINTEL
  glUpdateObjectBufferATI_c
  glUseProgram
  glUseProgramObjectARB
  glUseProgramStages
  glUseShaderProgramEXT
  glValidateProgram
  glValidateProgramARB
  glValidateProgramPipeline
  glVariantArrayObjectATI
  glVariantbvEXT_c
  glVariantdvEXT_c
  glVariantfvEXT_c
  glVariantivEXT_c
  glVariantPointerEXT_c
  glVariantsvEXT_c
  glVariantubvEXT_c
  glVariantuivEXT_c
  glVariantusvEXT_c
  glVDPAUFiniNV
  glVDPAUGetSurfaceivNV_c
  glVDPAUInitNV_c
  glVDPAUIsSurfaceNV
  glVDPAUMapSurfacesNV_c
  glVDPAURegisterOutputSurfaceNV_c
  glVDPAURegisterVideoSurfaceNV_c
  glVDPAUSurfaceAccessNV
  glVDPAUUnmapSurfacesNV_c
  glVDPAUUnregisterSurfaceNV
  glVectorOperationSGIX
  glVertex2d
  glVertex2dv_c
  glVertex2f
  glVertex2fv_c
  glVertex2hNV
  glVertex2hvNV_c
  glVertex2i
  glVertex2iv_c
  glVertex2s
  glVertex2sv_c
  glVertex3d
  glVertex3dv_c
  glVertex3f
  glVertex3fv_c
  glVertex3hNV
  glVertex3hvNV_c
  glVertex3i
  glVertex3iv_c
  glVertex3s
  glVertex3sv_c
  glVertex4d
  glVertex4dv_c
  glVertex4f
  glVertex4fv_c
  glVertex4hNV
  glVertex4hvNV_c
  glVertex4i
  glVertex4iv_c
  glVertex4s
  glVertex4sv_c
  glVertexArrayAttribBinding
  glVertexArrayAttribFormat
  glVertexArrayAttribIFormat
  glVertexArrayAttribLFormat
  glVertexArrayBindingDivisor
  glVertexArrayBindVertexBufferEXT
  glVertexArrayColorOffsetEXT
  glVertexArrayEdgeFlagOffsetEXT
  glVertexArrayElementBuffer
  glVertexArrayFogCoordOffsetEXT
  glVertexArrayIndexOffsetEXT
  glVertexArrayMultiTexCoordOffsetEXT
  glVertexArrayNormalOffsetEXT
  glVertexArrayParameteriAPPLE
  glVertexArrayRangeAPPLE_c
  glVertexArrayRangeNV_c
  glVertexArraySecondaryColorOffsetEXT
  glVertexArrayTexCoordOffsetEXT
  glVertexArrayVertexAttribBindingEXT
  glVertexArrayVertexAttribDivisorEXT
  glVertexArrayVertexAttribFormatEXT
  glVertexArrayVertexAttribIFormatEXT
  glVertexArrayVertexAttribIOffsetEXT
  glVertexArrayVertexAttribLFormatEXT
  glVertexArrayVertexAttribLOffsetEXT
  glVertexArrayVertexAttribOffsetEXT
  glVertexArrayVertexBindingDivisorEXT
  glVertexArrayVertexBuffer
  glVertexArrayVertexBuffers_c
  glVertexArrayVertexOffsetEXT
  glVertexAttrib1d
  glVertexAttrib1dARB
  glVertexAttrib1dNV
  glVertexAttrib1dvARB_c
  glVertexAttrib1dvNV_c
  glVertexAttrib1dv_c
  glVertexAttrib1f
  glVertexAttrib1fARB
  glVertexAttrib1fNV
  glVertexAttrib1fvARB_c
  glVertexAttrib1fvNV_c
  glVertexAttrib1fv_c
  glVertexAttrib1hNV
  glVertexAttrib1hvNV_c
  glVertexAttrib1s
  glVertexAttrib1sARB
  glVertexAttrib1sNV
  glVertexAttrib1svARB_c
  glVertexAttrib1svNV_c
  glVertexAttrib1sv_c
  glVertexAttrib2d
  glVertexAttrib2dARB
  glVertexAttrib2dNV
  glVertexAttrib2dvARB_c
  glVertexAttrib2dvNV_c
  glVertexAttrib2dv_c
  glVertexAttrib2f
  glVertexAttrib2fARB
  glVertexAttrib2fNV
  glVertexAttrib2fvARB_c
  glVertexAttrib2fvNV_c
  glVertexAttrib2fv_c
  glVertexAttrib2hNV
  glVertexAttrib2hvNV_c
  glVertexAttrib2s
  glVertexAttrib2sARB
  glVertexAttrib2sNV
  glVertexAttrib2svARB_c
  glVertexAttrib2svNV_c
  glVertexAttrib2sv_c
  glVertexAttrib3d
  glVertexAttrib3dARB
  glVertexAttrib3dNV
  glVertexAttrib3dvARB_c
  glVertexAttrib3dvNV_c
  glVertexAttrib3dv_c
  glVertexAttrib3f
  glVertexAttrib3fARB
  glVertexAttrib3fNV
  glVertexAttrib3fvARB_c
  glVertexAttrib3fvNV_c
  glVertexAttrib3fv_c
  glVertexAttrib3hNV
  glVertexAttrib3hvNV_c
  glVertexAttrib3s
  glVertexAttrib3sARB
  glVertexAttrib3sNV
  glVertexAttrib3svARB_c
  glVertexAttrib3svNV_c
  glVertexAttrib3sv_c
  glVertexAttrib4bvARB_c
  glVertexAttrib4bv_c
  glVertexAttrib4d
  glVertexAttrib4dARB
  glVertexAttrib4dNV
  glVertexAttrib4dvARB_c
  glVertexAttrib4dvNV_c
  glVertexAttrib4dv_c
  glVertexAttrib4f
  glVertexAttrib4fARB
  glVertexAttrib4fNV
  glVertexAttrib4fvARB_c
  glVertexAttrib4fvNV_c
  glVertexAttrib4fv_c
  glVertexAttrib4hNV
  glVertexAttrib4hvNV_c
  glVertexAttrib4ivARB_c
  glVertexAttrib4iv_c
  glVertexAttrib4NbvARB_c
  glVertexAttrib4Nbv_c
  glVertexAttrib4NivARB_c
  glVertexAttrib4Niv_c
  glVertexAttrib4NsvARB_c
  glVertexAttrib4Nsv_c
  glVertexAttrib4Nub
  glVertexAttrib4NubARB
  glVertexAttrib4NubvARB_c
  glVertexAttrib4Nubv_c
  glVertexAttrib4NuivARB_c
  glVertexAttrib4Nuiv_c
  glVertexAttrib4NusvARB_c
  glVertexAttrib4Nusv_c
  glVertexAttrib4s
  glVertexAttrib4sARB
  glVertexAttrib4sNV
  glVertexAttrib4svARB_c
  glVertexAttrib4svNV_c
  glVertexAttrib4sv_c
  glVertexAttrib4ubNV
  glVertexAttrib4ubvARB_c
  glVertexAttrib4ubvNV_c
  glVertexAttrib4ubv_c
  glVertexAttrib4uivARB_c
  glVertexAttrib4uiv_c
  glVertexAttrib4usvARB_c
  glVertexAttrib4usv_c
  glVertexAttribArrayObjectATI
  glVertexAttribBinding
  glVertexAttribDivisor
  glVertexAttribDivisorANGLE
  glVertexAttribDivisorARB
  glVertexAttribDivisorEXT
  glVertexAttribDivisorNV
  glVertexAttribFormat
  glVertexAttribFormatNV
  glVertexAttribI1i
  glVertexAttribI1iEXT
  glVertexAttribI1ivEXT_c
  glVertexAttribI1iv_c
  glVertexAttribI1ui
  glVertexAttribI1uiEXT
  glVertexAttribI1uivEXT_c
  glVertexAttribI1uiv_c
  glVertexAttribI2i
  glVertexAttribI2iEXT
  glVertexAttribI2ivEXT_c
  glVertexAttribI2iv_c
  glVertexAttribI2ui
  glVertexAttribI2uiEXT
  glVertexAttribI2uivEXT_c
  glVertexAttribI2uiv_c
  glVertexAttribI3i
  glVertexAttribI3iEXT
  glVertexAttribI3ivEXT_c
  glVertexAttribI3iv_c
  glVertexAttribI3ui
  glVertexAttribI3uiEXT
  glVertexAttribI3uivEXT_c
  glVertexAttribI3uiv_c
  glVertexAttribI4bvEXT_c
  glVertexAttribI4bv_c
  glVertexAttribI4i
  glVertexAttribI4iEXT
  glVertexAttribI4ivEXT_c
  glVertexAttribI4iv_c
  glVertexAttribI4svEXT_c
  glVertexAttribI4sv_c
  glVertexAttribI4ubvEXT_c
  glVertexAttribI4ubv_c
  glVertexAttribI4ui
  glVertexAttribI4uiEXT
  glVertexAttribI4uivEXT_c
  glVertexAttribI4uiv_c
  glVertexAttribI4usvEXT_c
  glVertexAttribI4usv_c
  glVertexAttribIFormat
  glVertexAttribIFormatNV
  glVertexAttribIPointerEXT_c
  glVertexAttribIPointer_c
  glVertexAttribL1d
  glVertexAttribL1dEXT
  glVertexAttribL1dvEXT_c
  glVertexAttribL1dv_c
  glVertexAttribL1i64NV
  glVertexAttribL1i64vNV_c
  glVertexAttribL1ui64ARB
  glVertexAttribL1ui64NV
  glVertexAttribL1ui64vARB_c
  glVertexAttribL1ui64vNV_c
  glVertexAttribL2d
  glVertexAttribL2dEXT
  glVertexAttribL2dvEXT_c
  glVertexAttribL2dv_c
  glVertexAttribL2i64NV
  glVertexAttribL2i64vNV_c
  glVertexAttribL2ui64NV
  glVertexAttribL2ui64vNV_c
  glVertexAttribL3d
  glVertexAttribL3dEXT
  glVertexAttribL3dvEXT_c
  glVertexAttribL3dv_c
  glVertexAttribL3i64NV
  glVertexAttribL3i64vNV_c
  glVertexAttribL3ui64NV
  glVertexAttribL3ui64vNV_c
  glVertexAttribL4d
  glVertexAttribL4dEXT
  glVertexAttribL4dvEXT_c
  glVertexAttribL4dv_c
  glVertexAttribL4i64NV
  glVertexAttribL4i64vNV_c
  glVertexAttribL4ui64NV
  glVertexAttribL4ui64vNV_c
  glVertexAttribLFormat
  glVertexAttribLFormatNV
  glVertexAttribLPointerEXT_c
  glVertexAttribLPointer_c
  glVertexAttribP1ui
  glVertexAttribP1uiv_c
  glVertexAttribP2ui
  glVertexAttribP2uiv_c
  glVertexAttribP3ui
  glVertexAttribP3uiv_c
  glVertexAttribP4ui
  glVertexAttribP4uiv_c
  glVertexAttribParameteriAMD
  glVertexAttribPointerARB_c
  glVertexAttribPointerNV_c
  glVertexAttribPointer_c
  glVertexAttribs1dvNV_c
  glVertexAttribs1fvNV_c
  glVertexAttribs1hvNV_c
  glVertexAttribs1svNV_c
  glVertexAttribs2dvNV_c
  glVertexAttribs2fvNV_c
  glVertexAttribs2hvNV_c
  glVertexAttribs2svNV_c
  glVertexAttribs3dvNV_c
  glVertexAttribs3fvNV_c
  glVertexAttribs3hvNV_c
  glVertexAttribs3svNV_c
  glVertexAttribs4dvNV_c
  glVertexAttribs4fvNV_c
  glVertexAttribs4hvNV_c
  glVertexAttribs4svNV_c
  glVertexAttribs4ubvNV_c
  glVertexBindingDivisor
  glVertexBlendARB
  glVertexBlendEnvfATI
  glVertexBlendEnviATI
  glVertexFormatNV
  glVertexP2ui
  glVertexP2uiv_c
  glVertexP3ui
  glVertexP3uiv_c
  glVertexP4ui
  glVertexP4uiv_c
  glVertexPointerEXT_c
  glVertexPointerListIBM_c
  glVertexPointervINTEL_c
  glVertexPointer_c
  glVertexStream1dATI
  glVertexStream1dvATI_c
  glVertexStream1fATI
  glVertexStream1fvATI_c
  glVertexStream1iATI
  glVertexStream1ivATI_c
  glVertexStream1sATI
  glVertexStream1svATI_c
  glVertexStream2dATI
  glVertexStream2dvATI_c
  glVertexStream2fATI
  glVertexStream2fvATI_c
  glVertexStream2iATI
  glVertexStream2ivATI_c
  glVertexStream2sATI
  glVertexStream2svATI_c
  glVertexStream3dATI
  glVertexStream3dvATI_c
  glVertexStream3fATI
  glVertexStream3fvATI_c
  glVertexStream3iATI
  glVertexStream3ivATI_c
  glVertexStream3sATI
  glVertexStream3svATI_c
  glVertexStream4dATI
  glVertexStream4dvATI_c
  glVertexStream4fATI
  glVertexStream4fvATI_c
  glVertexStream4iATI
  glVertexStream4ivATI_c
  glVertexStream4sATI
  glVertexStream4svATI_c
  glVertexWeightfEXT
  glVertexWeightfvEXT_c
  glVertexWeighthNV
  glVertexWeighthvNV_c
  glVertexWeightPointerEXT_c
  glVideoCaptureNV_c
  glVideoCaptureStreamParameterdvNV_c
  glVideoCaptureStreamParameterfvNV_c
  glVideoCaptureStreamParameterivNV_c
  glViewport
  glViewportArrayvNV_c
  glViewportArrayv_c
  glViewportIndexedf
  glViewportIndexedfNV
  glViewportIndexedfvNV_c
  glViewportIndexedfv_c
  glViewportPositionWScaleNV
  glViewportSwizzleNV
  glWaitSemaphoreEXT_c
  glWaitSync
  glWaitSyncAPPLE
  glWaitVkSemaphoreNV
  glWeightbvARB_c
  glWeightdvARB_c
  glWeightfvARB_c
  glWeightivARB_c
  glWeightPathsNV_c
  glWeightPointerARB_c
  glWeightsvARB_c
  glWeightubvARB_c
  glWeightuivARB_c
  glWeightusvARB_c
  glWindowPos2d
  glWindowPos2dARB
  glWindowPos2dMESA
  glWindowPos2dvARB_c
  glWindowPos2dvMESA_c
  glWindowPos2dv_c
  glWindowPos2f
  glWindowPos2fARB
  glWindowPos2fMESA
  glWindowPos2fvARB_c
  glWindowPos2fvMESA_c
  glWindowPos2fv_c
  glWindowPos2i
  glWindowPos2iARB
  glWindowPos2iMESA
  glWindowPos2ivARB_c
  glWindowPos2ivMESA_c
  glWindowPos2iv_c
  glWindowPos2s
  glWindowPos2sARB
  glWindowPos2sMESA
  glWindowPos2svARB_c
  glWindowPos2svMESA_c
  glWindowPos2sv_c
  glWindowPos3d
  glWindowPos3dARB
  glWindowPos3dMESA
  glWindowPos3dvARB_c
  glWindowPos3dvMESA_c
  glWindowPos3dv_c
  glWindowPos3f
  glWindowPos3fARB
  glWindowPos3fMESA
  glWindowPos3fvARB_c
  glWindowPos3fvMESA_c
  glWindowPos3fv_c
  glWindowPos3i
  glWindowPos3iARB
  glWindowPos3iMESA
  glWindowPos3ivARB_c
  glWindowPos3ivMESA_c
  glWindowPos3iv_c
  glWindowPos3s
  glWindowPos3sARB
  glWindowPos3sMESA
  glWindowPos3svARB_c
  glWindowPos3svMESA_c
  glWindowPos3sv_c
  glWindowPos4dMESA
  glWindowPos4dvMESA_c
  glWindowPos4fMESA
  glWindowPos4fvMESA_c
  glWindowPos4iMESA
  glWindowPos4ivMESA_c
  glWindowPos4sMESA
  glWindowPos4svMESA_c
  glWindowRectanglesEXT_c
  glWriteMaskEXT
)}

sub EXPORT_TAGS_GL {(
  'GL_3DFX_tbuffer' => [
    'glTbufferMask3DFX'
  ],
  'GL_AMD_debug_output' => [
    'glDebugMessageCallbackAMD',
    'glDebugMessageEnableAMD',
    'glDebugMessageInsertAMD',
    'glGetDebugMessageLogAMD'
  ],
  'GL_AMD_draw_buffers_blend' => [
    'glBlendEquationIndexedAMD',
    'glBlendEquationSeparateIndexedAMD',
    'glBlendFuncIndexedAMD',
    'glBlendFuncSeparateIndexedAMD'
  ],
  'GL_AMD_framebuffer_sample_positions' => [
    'glFramebufferSamplePositionsfvAMD',
    'glGetFramebufferParameterfvAMD',
    'glGetNamedFramebufferParameterfvAMD',
    'glNamedFramebufferSamplePositionsfvAMD'
  ],
  'GL_AMD_interleaved_elements' => [
    'glVertexAttribParameteriAMD'
  ],
  'GL_AMD_multi_draw_indirect' => [
    'glMultiDrawArraysIndirectAMD',
    'glMultiDrawElementsIndirectAMD'
  ],
  'GL_AMD_name_gen_delete' => [
    'glDeleteNamesAMD',
    'glGenNamesAMD',
    'glIsNameAMD'
  ],
  'GL_AMD_occlusion_query_event' => [
    'glQueryObjectParameteruiAMD'
  ],
  'GL_AMD_performance_monitor' => [
    'glBeginPerfMonitorAMD',
    'glDeletePerfMonitorsAMD',
    'glEndPerfMonitorAMD',
    'glGenPerfMonitorsAMD',
    'glGetPerfMonitorCounterDataAMD',
    'glGetPerfMonitorCounterInfoAMD',
    'glGetPerfMonitorCountersAMD',
    'glGetPerfMonitorCounterStringAMD',
    'glGetPerfMonitorGroupsAMD',
    'glGetPerfMonitorGroupStringAMD',
    'glSelectPerfMonitorCountersAMD'
  ],
  'GL_AMD_sample_positions' => [
    'glSetMultisamplefvAMD'
  ],
  'GL_AMD_sparse_texture' => [
    'glTexStorageSparseAMD',
    'glTextureStorageSparseAMD'
  ],
  'GL_AMD_stencil_operation_extended' => [
    'glStencilOpValueAMD'
  ],
  'GL_AMD_vertex_shader_tessellator' => [
    'glTessellationFactorAMD',
    'glTessellationModeAMD'
  ],
  'GL_ANGLE_framebuffer_blit' => [
    'glBlitFramebufferANGLE'
  ],
  'GL_ANGLE_framebuffer_multisample' => [
    'glRenderbufferStorageMultisampleANGLE'
  ],
  'GL_ANGLE_instanced_arrays' => [
    'glDrawArraysInstancedANGLE',
    'glDrawElementsInstancedANGLE',
    'glVertexAttribDivisorANGLE'
  ],
  'GL_ANGLE_timer_query' => [
    'glBeginQueryANGLE',
    'glDeleteQueriesANGLE',
    'glEndQueryANGLE',
    'glGenQueriesANGLE',
    'glGetQueryivANGLE',
    'glGetQueryObjecti64vANGLE',
    'glGetQueryObjectivANGLE',
    'glGetQueryObjectui64vANGLE',
    'glGetQueryObjectuivANGLE',
    'glIsQueryANGLE',
    'glQueryCounterANGLE'
  ],
  'GL_ANGLE_translated_shader_source' => [
    'glGetTranslatedShaderSourceANGLE'
  ],
  'GL_APPLE_copy_texture_levels' => [
    'glCopyTextureLevelsAPPLE'
  ],
  'GL_APPLE_element_array' => [
    'glDrawElementArrayAPPLE',
    'glDrawRangeElementArrayAPPLE',
    'glElementPointerAPPLE',
    'glMultiDrawElementArrayAPPLE',
    'glMultiDrawRangeElementArrayAPPLE'
  ],
  'GL_APPLE_fence' => [
    'glDeleteFencesAPPLE',
    'glFinishFenceAPPLE',
    'glFinishObjectAPPLE',
    'glGenFencesAPPLE',
    'glIsFenceAPPLE',
    'glSetFenceAPPLE',
    'glTestFenceAPPLE',
    'glTestObjectAPPLE'
  ],
  'GL_APPLE_flush_buffer_range' => [
    'glBufferParameteriAPPLE',
    'glFlushMappedBufferRangeAPPLE'
  ],
  'GL_APPLE_framebuffer_multisample' => [
    'glRenderbufferStorageMultisampleAPPLE',
    'glResolveMultisampleFramebufferAPPLE'
  ],
  'GL_APPLE_object_purgeable' => [
    'glGetObjectParameterivAPPLE',
    'glObjectPurgeableAPPLE',
    'glObjectUnpurgeableAPPLE'
  ],
  'GL_APPLE_sync' => [
    'glClientWaitSyncAPPLE',
    'glDeleteSyncAPPLE',
    'glFenceSyncAPPLE',
    'glGetInteger64vAPPLE',
    'glGetSyncivAPPLE',
    'glIsSyncAPPLE',
    'glWaitSyncAPPLE'
  ],
  'GL_APPLE_texture_range' => [
    'glGetTexParameterPointervAPPLE',
    'glTextureRangeAPPLE'
  ],
  'GL_APPLE_vertex_array_object' => [
    'glBindVertexArrayAPPLE',
    'glDeleteVertexArraysAPPLE',
    'glGenVertexArraysAPPLE',
    'glIsVertexArrayAPPLE'
  ],
  'GL_APPLE_vertex_array_range' => [
    'glFlushVertexArrayRangeAPPLE',
    'glVertexArrayParameteriAPPLE',
    'glVertexArrayRangeAPPLE'
  ],
  'GL_APPLE_vertex_program_evaluators' => [
    'glDisableVertexAttribAPPLE',
    'glEnableVertexAttribAPPLE',
    'glIsVertexAttribEnabledAPPLE',
    'glMapVertexAttrib1dAPPLE',
    'glMapVertexAttrib1fAPPLE',
    'glMapVertexAttrib2dAPPLE',
    'glMapVertexAttrib2fAPPLE'
  ],
  'GL_ARB_ES2_compatibility' => [
    'glClearDepthf',
    'glDepthRangef',
    'glGetShaderPrecisionFormat',
    'glReleaseShaderCompiler',
    'glShaderBinary'
  ],
  'GL_ARB_ES3_1_compatibility' => [
    'glMemoryBarrierByRegion'
  ],
  'GL_ARB_ES3_2_compatibility' => [
    'glPrimitiveBoundingBoxARB'
  ],
  'GL_ARB_base_instance' => [
    'glDrawArraysInstancedBaseInstance',
    'glDrawElementsInstancedBaseInstance',
    'glDrawElementsInstancedBaseVertexBaseInstance'
  ],
  'GL_ARB_bindless_texture' => [
    'glGetImageHandleARB',
    'glGetTextureHandleARB',
    'glGetTextureSamplerHandleARB',
    'glGetVertexAttribLui64vARB',
    'glIsImageHandleResidentARB',
    'glIsTextureHandleResidentARB',
    'glMakeImageHandleNonResidentARB',
    'glMakeImageHandleResidentARB',
    'glMakeTextureHandleNonResidentARB',
    'glMakeTextureHandleResidentARB',
    'glProgramUniformHandleui64ARB',
    'glProgramUniformHandleui64vARB',
    'glUniformHandleui64ARB',
    'glUniformHandleui64vARB',
    'glVertexAttribL1ui64ARB',
    'glVertexAttribL1ui64vARB'
  ],
  'GL_ARB_blend_func_extended' => [
    'glBindFragDataLocationIndexed',
    'glGetFragDataIndex'
  ],
  'GL_ARB_buffer_storage' => [
    'glBufferStorage'
  ],
  'GL_ARB_cl_event' => [
    'glCreateSyncFromCLeventARB'
  ],
  'GL_ARB_clear_buffer_object' => [
    'glClearBufferData',
    'glClearBufferSubData',
    'glClearNamedBufferDataEXT',
    'glClearNamedBufferSubDataEXT'
  ],
  'GL_ARB_clear_texture' => [
    'glClearTexImage',
    'glClearTexSubImage'
  ],
  'GL_ARB_clip_control' => [
    'glClipControl'
  ],
  'GL_ARB_color_buffer_float' => [
    'glClampColorARB'
  ],
  'GL_ARB_compute_shader' => [
    'glDispatchCompute',
    'glDispatchComputeIndirect'
  ],
  'GL_ARB_compute_variable_group_size' => [
    'glDispatchComputeGroupSizeARB'
  ],
  'GL_ARB_copy_buffer' => [
    'glCopyBufferSubData'
  ],
  'GL_ARB_copy_image' => [
    'glCopyImageSubData'
  ],
  'GL_ARB_debug_output' => [
    'glDebugMessageCallbackARB',
    'glDebugMessageControlARB',
    'glDebugMessageInsertARB',
    'glGetDebugMessageLogARB'
  ],
  'GL_ARB_direct_state_access' => [
    'glBindTextureUnit',
    'glBlitNamedFramebuffer',
    'glCheckNamedFramebufferStatus',
    'glClearNamedBufferData',
    'glClearNamedBufferSubData',
    'glClearNamedFramebufferfi',
    'glClearNamedFramebufferfv',
    'glClearNamedFramebufferiv',
    'glClearNamedFramebufferuiv',
    'glCompressedTextureSubImage1D',
    'glCompressedTextureSubImage2D',
    'glCompressedTextureSubImage3D',
    'glCopyNamedBufferSubData',
    'glCopyTextureSubImage1D',
    'glCopyTextureSubImage2D',
    'glCopyTextureSubImage3D',
    'glCreateBuffers',
    'glCreateFramebuffers',
    'glCreateProgramPipelines',
    'glCreateQueries',
    'glCreateRenderbuffers',
    'glCreateSamplers',
    'glCreateTextures',
    'glCreateTransformFeedbacks',
    'glCreateVertexArrays',
    'glDisableVertexArrayAttrib',
    'glEnableVertexArrayAttrib',
    'glFlushMappedNamedBufferRange',
    'glGenerateTextureMipmap',
    'glGetCompressedTextureImage',
    'glGetNamedBufferParameteri64v',
    'glGetNamedBufferParameteriv',
    'glGetNamedBufferPointerv',
    'glGetNamedBufferSubData',
    'glGetNamedFramebufferAttachmentParameteriv',
    'glGetNamedFramebufferParameteriv',
    'glGetNamedRenderbufferParameteriv',
    'glGetQueryBufferObjecti64v',
    'glGetQueryBufferObjectiv',
    'glGetQueryBufferObjectui64v',
    'glGetQueryBufferObjectuiv',
    'glGetTextureImage',
    'glGetTextureLevelParameterfv',
    'glGetTextureLevelParameteriv',
    'glGetTextureParameterfv',
    'glGetTextureParameterIiv',
    'glGetTextureParameterIuiv',
    'glGetTextureParameteriv',
    'glGetTransformFeedbacki64_v',
    'glGetTransformFeedbackiv',
    'glGetTransformFeedbacki_v',
    'glGetVertexArrayIndexed64iv',
    'glGetVertexArrayIndexediv',
    'glGetVertexArrayiv',
    'glInvalidateNamedFramebufferData',
    'glInvalidateNamedFramebufferSubData',
    'glMapNamedBuffer',
    'glMapNamedBufferRange',
    'glNamedBufferData',
    'glNamedBufferStorage',
    'glNamedBufferSubData',
    'glNamedFramebufferDrawBuffer',
    'glNamedFramebufferDrawBuffers',
    'glNamedFramebufferParameteri',
    'glNamedFramebufferReadBuffer',
    'glNamedFramebufferRenderbuffer',
    'glNamedFramebufferTexture',
    'glNamedFramebufferTextureLayer',
    'glNamedRenderbufferStorage',
    'glNamedRenderbufferStorageMultisample',
    'glTextureBuffer',
    'glTextureBufferRange',
    'glTextureParameterf',
    'glTextureParameterfv',
    'glTextureParameteri',
    'glTextureParameterIiv',
    'glTextureParameterIuiv',
    'glTextureParameteriv',
    'glTextureStorage1D',
    'glTextureStorage2D',
    'glTextureStorage2DMultisample',
    'glTextureStorage3D',
    'glTextureStorage3DMultisample',
    'glTextureSubImage1D',
    'glTextureSubImage2D',
    'glTextureSubImage3D',
    'glTransformFeedbackBufferBase',
    'glTransformFeedbackBufferRange',
    'glUnmapNamedBuffer',
    'glVertexArrayAttribBinding',
    'glVertexArrayAttribFormat',
    'glVertexArrayAttribIFormat',
    'glVertexArrayAttribLFormat',
    'glVertexArrayBindingDivisor',
    'glVertexArrayElementBuffer',
    'glVertexArrayVertexBuffer',
    'glVertexArrayVertexBuffers'
  ],
  'GL_ARB_draw_buffers' => [
    'glDrawBuffersARB'
  ],
  'GL_ARB_draw_buffers_blend' => [
    'glBlendEquationiARB',
    'glBlendEquationSeparateiARB',
    'glBlendFunciARB',
    'glBlendFuncSeparateiARB'
  ],
  'GL_ARB_draw_elements_base_vertex' => [
    'glDrawElementsBaseVertex',
    'glDrawElementsInstancedBaseVertex',
    'glDrawRangeElementsBaseVertex',
    'glMultiDrawElementsBaseVertex'
  ],
  'GL_ARB_draw_indirect' => [
    'glDrawArraysIndirect',
    'glDrawElementsIndirect'
  ],
  'GL_ARB_framebuffer_no_attachments' => [
    'glFramebufferParameteri',
    'glGetFramebufferParameteriv',
    'glGetNamedFramebufferParameterivEXT',
    'glNamedFramebufferParameteriEXT'
  ],
  'GL_ARB_framebuffer_object' => [
    'glBindFramebuffer',
    'glBindRenderbuffer',
    'glBlitFramebuffer',
    'glCheckFramebufferStatus',
    'glDeleteFramebuffers',
    'glDeleteRenderbuffers',
    'glFramebufferRenderbuffer',
    'glFramebufferTexture1D',
    'glFramebufferTexture2D',
    'glFramebufferTexture3D',
    'glFramebufferTextureLayer',
    'glGenerateMipmap',
    'glGenFramebuffers',
    'glGenRenderbuffers',
    'glGetFramebufferAttachmentParameteriv',
    'glGetRenderbufferParameteriv',
    'glIsFramebuffer',
    'glIsRenderbuffer',
    'glRenderbufferStorage',
    'glRenderbufferStorageMultisample'
  ],
  'GL_ARB_geometry_shader4' => [
    'glFramebufferTextureARB',
    'glFramebufferTextureFaceARB',
    'glFramebufferTextureLayerARB',
    'glProgramParameteriARB'
  ],
  'GL_ARB_get_program_binary' => [
    'glGetProgramBinary',
    'glProgramBinary',
    'glProgramParameteri'
  ],
  'GL_ARB_get_texture_sub_image' => [
    'glGetCompressedTextureSubImage',
    'glGetTextureSubImage'
  ],
  'GL_ARB_gl_spirv' => [
    'glSpecializeShaderARB'
  ],
  'GL_ARB_gpu_shader_fp64' => [
    'glGetUniformdv',
    'glUniform1d',
    'glUniform1dv',
    'glUniform2d',
    'glUniform2dv',
    'glUniform3d',
    'glUniform3dv',
    'glUniform4d',
    'glUniform4dv',
    'glUniformMatrix2dv',
    'glUniformMatrix2x3dv',
    'glUniformMatrix2x4dv',
    'glUniformMatrix3dv',
    'glUniformMatrix3x2dv',
    'glUniformMatrix3x4dv',
    'glUniformMatrix4dv',
    'glUniformMatrix4x2dv',
    'glUniformMatrix4x3dv'
  ],
  'GL_ARB_gpu_shader_int64' => [
    'glGetnUniformi64vARB',
    'glGetnUniformui64vARB',
    'glGetUniformi64vARB',
    'glGetUniformui64vARB',
    'glProgramUniform1i64ARB',
    'glProgramUniform1i64vARB',
    'glProgramUniform1ui64ARB',
    'glProgramUniform1ui64vARB',
    'glProgramUniform2i64ARB',
    'glProgramUniform2i64vARB',
    'glProgramUniform2ui64ARB',
    'glProgramUniform2ui64vARB',
    'glProgramUniform3i64ARB',
    'glProgramUniform3i64vARB',
    'glProgramUniform3ui64ARB',
    'glProgramUniform3ui64vARB',
    'glProgramUniform4i64ARB',
    'glProgramUniform4i64vARB',
    'glProgramUniform4ui64ARB',
    'glProgramUniform4ui64vARB',
    'glUniform1i64ARB',
    'glUniform1i64vARB',
    'glUniform1ui64ARB',
    'glUniform1ui64vARB',
    'glUniform2i64ARB',
    'glUniform2i64vARB',
    'glUniform2ui64ARB',
    'glUniform2ui64vARB',
    'glUniform3i64ARB',
    'glUniform3i64vARB',
    'glUniform3ui64ARB',
    'glUniform3ui64vARB',
    'glUniform4i64ARB',
    'glUniform4i64vARB',
    'glUniform4ui64ARB',
    'glUniform4ui64vARB'
  ],
  'GL_ARB_imaging' => [
    'glColorSubTable',
    'glColorTable',
    'glColorTableParameterfv',
    'glColorTableParameteriv',
    'glConvolutionFilter1D',
    'glConvolutionFilter2D',
    'glConvolutionParameterf',
    'glConvolutionParameterfv',
    'glConvolutionParameteri',
    'glConvolutionParameteriv',
    'glCopyColorSubTable',
    'glCopyColorTable',
    'glCopyConvolutionFilter1D',
    'glCopyConvolutionFilter2D',
    'glGetColorTable',
    'glGetColorTableParameterfv',
    'glGetColorTableParameteriv',
    'glGetConvolutionFilter',
    'glGetConvolutionParameterfv',
    'glGetConvolutionParameteriv',
    'glGetHistogram',
    'glGetHistogramParameterfv',
    'glGetHistogramParameteriv',
    'glGetMinmax',
    'glGetMinmaxParameterfv',
    'glGetMinmaxParameteriv',
    'glGetSeparableFilter',
    'glHistogram',
    'glMinmax',
    'glResetHistogram',
    'glResetMinmax',
    'glSeparableFilter2D'
  ],
  'GL_ARB_indirect_parameters' => [
    'glMultiDrawArraysIndirectCountARB',
    'glMultiDrawElementsIndirectCountARB'
  ],
  'GL_ARB_instanced_arrays' => [
    'glDrawArraysInstancedARB',
    'glDrawElementsInstancedARB',
    'glVertexAttribDivisorARB'
  ],
  'GL_ARB_internalformat_query' => [
    'glGetInternalformativ'
  ],
  'GL_ARB_internalformat_query2' => [
    'glGetInternalformati64v'
  ],
  'GL_ARB_invalidate_subdata' => [
    'glInvalidateBufferData',
    'glInvalidateBufferSubData',
    'glInvalidateFramebuffer',
    'glInvalidateSubFramebuffer',
    'glInvalidateTexImage',
    'glInvalidateTexSubImage'
  ],
  'GL_ARB_map_buffer_range' => [
    'glFlushMappedBufferRange',
    'glMapBufferRange'
  ],
  'GL_ARB_matrix_palette' => [
    'glCurrentPaletteMatrixARB',
    'glMatrixIndexPointerARB',
    'glMatrixIndexubvARB',
    'glMatrixIndexuivARB',
    'glMatrixIndexusvARB'
  ],
  'GL_ARB_multi_bind' => [
    'glBindBuffersBase',
    'glBindBuffersRange',
    'glBindImageTextures',
    'glBindSamplers',
    'glBindTextures',
    'glBindVertexBuffers'
  ],
  'GL_ARB_multi_draw_indirect' => [
    'glMultiDrawArraysIndirect',
    'glMultiDrawElementsIndirect'
  ],
  'GL_ARB_multisample' => [
    'glSampleCoverageARB'
  ],
  'GL_ARB_multitexture' => [
    'glActiveTextureARB',
    'glClientActiveTextureARB',
    'glMultiTexCoord1dARB',
    'glMultiTexCoord1dvARB',
    'glMultiTexCoord1fARB',
    'glMultiTexCoord1fvARB',
    'glMultiTexCoord1iARB',
    'glMultiTexCoord1ivARB',
    'glMultiTexCoord1sARB',
    'glMultiTexCoord1svARB',
    'glMultiTexCoord2dARB',
    'glMultiTexCoord2dvARB',
    'glMultiTexCoord2fARB',
    'glMultiTexCoord2fvARB',
    'glMultiTexCoord2iARB',
    'glMultiTexCoord2ivARB',
    'glMultiTexCoord2sARB',
    'glMultiTexCoord2svARB',
    'glMultiTexCoord3dARB',
    'glMultiTexCoord3dvARB',
    'glMultiTexCoord3fARB',
    'glMultiTexCoord3fvARB',
    'glMultiTexCoord3iARB',
    'glMultiTexCoord3ivARB',
    'glMultiTexCoord3sARB',
    'glMultiTexCoord3svARB',
    'glMultiTexCoord4dARB',
    'glMultiTexCoord4dvARB',
    'glMultiTexCoord4fARB',
    'glMultiTexCoord4fvARB',
    'glMultiTexCoord4iARB',
    'glMultiTexCoord4ivARB',
    'glMultiTexCoord4sARB',
    'glMultiTexCoord4svARB'
  ],
  'GL_ARB_occlusion_query' => [
    'glBeginQueryARB',
    'glDeleteQueriesARB',
    'glEndQueryARB',
    'glGenQueriesARB',
    'glGetQueryivARB',
    'glGetQueryObjectivARB',
    'glGetQueryObjectuivARB',
    'glIsQueryARB'
  ],
  'GL_ARB_parallel_shader_compile' => [
    'glMaxShaderCompilerThreadsARB'
  ],
  'GL_ARB_point_parameters' => [
    'glPointParameterfARB',
    'glPointParameterfvARB'
  ],
  'GL_ARB_polygon_offset_clamp' => [
    'glPolygonOffsetClamp'
  ],
  'GL_ARB_program_interface_query' => [
    'glGetProgramInterfaceiv',
    'glGetProgramResourceIndex',
    'glGetProgramResourceiv',
    'glGetProgramResourceLocation',
    'glGetProgramResourceLocationIndex',
    'glGetProgramResourceName'
  ],
  'GL_ARB_provoking_vertex' => [
    'glProvokingVertex'
  ],
  'GL_ARB_robustness' => [
    'glGetGraphicsResetStatusARB',
    'glGetnColorTableARB',
    'glGetnCompressedTexImageARB',
    'glGetnConvolutionFilterARB',
    'glGetnHistogramARB',
    'glGetnMapdvARB',
    'glGetnMapfvARB',
    'glGetnMapivARB',
    'glGetnMinmaxARB',
    'glGetnPixelMapfvARB',
    'glGetnPixelMapuivARB',
    'glGetnPixelMapusvARB',
    'glGetnPolygonStippleARB',
    'glGetnSeparableFilterARB',
    'glGetnTexImageARB',
    'glGetnUniformdvARB',
    'glGetnUniformfvARB',
    'glGetnUniformivARB',
    'glGetnUniformuivARB',
    'glReadnPixelsARB'
  ],
  'GL_ARB_sample_locations' => [
    'glFramebufferSampleLocationsfvARB',
    'glNamedFramebufferSampleLocationsfvARB'
  ],
  'GL_ARB_sample_shading' => [
    'glMinSampleShadingARB'
  ],
  'GL_ARB_sampler_objects' => [
    'glBindSampler',
    'glDeleteSamplers',
    'glGenSamplers',
    'glGetSamplerParameterfv',
    'glGetSamplerParameterIiv',
    'glGetSamplerParameterIuiv',
    'glGetSamplerParameteriv',
    'glIsSampler',
    'glSamplerParameterf',
    'glSamplerParameterfv',
    'glSamplerParameteri',
    'glSamplerParameterIiv',
    'glSamplerParameterIuiv',
    'glSamplerParameteriv'
  ],
  'GL_ARB_separate_shader_objects' => [
    'glActiveShaderProgram',
    'glBindProgramPipeline',
    'glCreateShaderProgramv',
    'glDeleteProgramPipelines',
    'glGenProgramPipelines',
    'glGetProgramPipelineInfoLog',
    'glGetProgramPipelineiv',
    'glIsProgramPipeline',
    'glProgramUniform1d',
    'glProgramUniform1dv',
    'glProgramUniform1f',
    'glProgramUniform1fv',
    'glProgramUniform1i',
    'glProgramUniform1iv',
    'glProgramUniform1ui',
    'glProgramUniform1uiv',
    'glProgramUniform2d',
    'glProgramUniform2dv',
    'glProgramUniform2f',
    'glProgramUniform2fv',
    'glProgramUniform2i',
    'glProgramUniform2iv',
    'glProgramUniform2ui',
    'glProgramUniform2uiv',
    'glProgramUniform3d',
    'glProgramUniform3dv',
    'glProgramUniform3f',
    'glProgramUniform3fv',
    'glProgramUniform3i',
    'glProgramUniform3iv',
    'glProgramUniform3ui',
    'glProgramUniform3uiv',
    'glProgramUniform4d',
    'glProgramUniform4dv',
    'glProgramUniform4f',
    'glProgramUniform4fv',
    'glProgramUniform4i',
    'glProgramUniform4iv',
    'glProgramUniform4ui',
    'glProgramUniform4uiv',
    'glProgramUniformMatrix2dv',
    'glProgramUniformMatrix2fv',
    'glProgramUniformMatrix2x3dv',
    'glProgramUniformMatrix2x3fv',
    'glProgramUniformMatrix2x4dv',
    'glProgramUniformMatrix2x4fv',
    'glProgramUniformMatrix3dv',
    'glProgramUniformMatrix3fv',
    'glProgramUniformMatrix3x2dv',
    'glProgramUniformMatrix3x2fv',
    'glProgramUniformMatrix3x4dv',
    'glProgramUniformMatrix3x4fv',
    'glProgramUniformMatrix4dv',
    'glProgramUniformMatrix4fv',
    'glProgramUniformMatrix4x2dv',
    'glProgramUniformMatrix4x2fv',
    'glProgramUniformMatrix4x3dv',
    'glProgramUniformMatrix4x3fv',
    'glUseProgramStages',
    'glValidateProgramPipeline'
  ],
  'GL_ARB_shader_atomic_counters' => [
    'glGetActiveAtomicCounterBufferiv'
  ],
  'GL_ARB_shader_image_load_store' => [
    'glBindImageTexture',
    'glMemoryBarrier'
  ],
  'GL_ARB_shader_objects' => [
    'glAttachObjectARB',
    'glCompileShaderARB',
    'glCreateProgramObjectARB',
    'glCreateShaderObjectARB',
    'glDeleteObjectARB',
    'glDetachObjectARB',
    'glGetActiveUniformARB',
    'glGetAttachedObjectsARB',
    'glGetHandleARB',
    'glGetInfoLogARB',
    'glGetObjectParameterfvARB',
    'glGetObjectParameterivARB',
    'glGetShaderSourceARB',
    'glGetUniformfvARB',
    'glGetUniformivARB',
    'glGetUniformLocationARB',
    'glLinkProgramARB',
    'glShaderSourceARB',
    'glUniform1fARB',
    'glUniform1fvARB',
    'glUniform1iARB',
    'glUniform1ivARB',
    'glUniform2fARB',
    'glUniform2fvARB',
    'glUniform2iARB',
    'glUniform2ivARB',
    'glUniform3fARB',
    'glUniform3fvARB',
    'glUniform3iARB',
    'glUniform3ivARB',
    'glUniform4fARB',
    'glUniform4fvARB',
    'glUniform4iARB',
    'glUniform4ivARB',
    'glUniformMatrix2fvARB',
    'glUniformMatrix3fvARB',
    'glUniformMatrix4fvARB',
    'glUseProgramObjectARB',
    'glValidateProgramARB'
  ],
  'GL_ARB_shader_storage_buffer_object' => [
    'glShaderStorageBlockBinding'
  ],
  'GL_ARB_shader_subroutine' => [
    'glGetActiveSubroutineName',
    'glGetActiveSubroutineUniformiv',
    'glGetActiveSubroutineUniformName',
    'glGetProgramStageiv',
    'glGetSubroutineIndex',
    'glGetSubroutineUniformLocation',
    'glGetUniformSubroutineuiv',
    'glUniformSubroutinesuiv'
  ],
  'GL_ARB_shading_language_include' => [
    'glCompileShaderIncludeARB',
    'glDeleteNamedStringARB',
    'glGetNamedStringARB',
    'glGetNamedStringivARB',
    'glIsNamedStringARB',
    'glNamedStringARB'
  ],
  'GL_ARB_sparse_buffer' => [
    'glBufferPageCommitmentARB'
  ],
  'GL_ARB_sparse_texture' => [
    'glTexPageCommitmentARB'
  ],
  'GL_ARB_sync' => [
    'glClientWaitSync',
    'glDeleteSync',
    'glFenceSync',
    'glGetInteger64v',
    'glGetSynciv',
    'glIsSync',
    'glWaitSync'
  ],
  'GL_ARB_tessellation_shader' => [
    'glPatchParameterfv',
    'glPatchParameteri'
  ],
  'GL_ARB_texture_barrier' => [
    'glTextureBarrier'
  ],
  'GL_ARB_texture_buffer_object' => [
    'glTexBufferARB'
  ],
  'GL_ARB_texture_buffer_range' => [
    'glTexBufferRange',
    'glTextureBufferRangeEXT'
  ],
  'GL_ARB_texture_compression' => [
    'glCompressedTexImage1DARB',
    'glCompressedTexImage2DARB',
    'glCompressedTexImage3DARB',
    'glCompressedTexSubImage1DARB',
    'glCompressedTexSubImage2DARB',
    'glCompressedTexSubImage3DARB',
    'glGetCompressedTexImageARB'
  ],
  'GL_ARB_texture_multisample' => [
    'glGetMultisamplefv',
    'glSampleMaski',
    'glTexImage2DMultisample',
    'glTexImage3DMultisample'
  ],
  'GL_ARB_texture_storage' => [
    'glTexStorage1D',
    'glTexStorage2D',
    'glTexStorage3D'
  ],
  'GL_ARB_texture_storage_multisample' => [
    'glTexStorage2DMultisample',
    'glTexStorage3DMultisample',
    'glTextureStorage2DMultisampleEXT',
    'glTextureStorage3DMultisampleEXT'
  ],
  'GL_ARB_texture_view' => [
    'glTextureView'
  ],
  'GL_ARB_timer_query' => [
    'glGetQueryObjecti64v',
    'glGetQueryObjectui64v',
    'glQueryCounter'
  ],
  'GL_ARB_transform_feedback2' => [
    'glBindTransformFeedback',
    'glDeleteTransformFeedbacks',
    'glDrawTransformFeedback',
    'glGenTransformFeedbacks',
    'glIsTransformFeedback',
    'glPauseTransformFeedback',
    'glResumeTransformFeedback'
  ],
  'GL_ARB_transform_feedback3' => [
    'glBeginQueryIndexed',
    'glDrawTransformFeedbackStream',
    'glEndQueryIndexed',
    'glGetQueryIndexediv'
  ],
  'GL_ARB_transform_feedback_instanced' => [
    'glDrawTransformFeedbackInstanced',
    'glDrawTransformFeedbackStreamInstanced'
  ],
  'GL_ARB_transpose_matrix' => [
    'glLoadTransposeMatrixdARB',
    'glLoadTransposeMatrixfARB',
    'glMultTransposeMatrixdARB',
    'glMultTransposeMatrixfARB'
  ],
  'GL_ARB_uniform_buffer_object' => [
    'glBindBufferBase',
    'glBindBufferRange',
    'glGetActiveUniformBlockiv',
    'glGetActiveUniformBlockName',
    'glGetActiveUniformName',
    'glGetActiveUniformsiv',
    'glGetIntegeri_v',
    'glGetUniformBlockIndex',
    'glGetUniformIndices',
    'glUniformBlockBinding'
  ],
  'GL_ARB_vertex_array_object' => [
    'glBindVertexArray',
    'glDeleteVertexArrays',
    'glGenVertexArrays',
    'glIsVertexArray'
  ],
  'GL_ARB_vertex_attrib_64bit' => [
    'glGetVertexAttribLdv',
    'glVertexAttribL1d',
    'glVertexAttribL1dv',
    'glVertexAttribL2d',
    'glVertexAttribL2dv',
    'glVertexAttribL3d',
    'glVertexAttribL3dv',
    'glVertexAttribL4d',
    'glVertexAttribL4dv',
    'glVertexAttribLPointer'
  ],
  'GL_ARB_vertex_attrib_binding' => [
    'glBindVertexBuffer',
    'glVertexArrayBindVertexBufferEXT',
    'glVertexArrayVertexAttribBindingEXT',
    'glVertexArrayVertexAttribFormatEXT',
    'glVertexArrayVertexAttribIFormatEXT',
    'glVertexArrayVertexAttribLFormatEXT',
    'glVertexArrayVertexBindingDivisorEXT',
    'glVertexAttribBinding',
    'glVertexAttribFormat',
    'glVertexAttribIFormat',
    'glVertexAttribLFormat',
    'glVertexBindingDivisor'
  ],
  'GL_ARB_vertex_blend' => [
    'glVertexBlendARB',
    'glWeightbvARB',
    'glWeightdvARB',
    'glWeightfvARB',
    'glWeightivARB',
    'glWeightPointerARB',
    'glWeightsvARB',
    'glWeightubvARB',
    'glWeightuivARB',
    'glWeightusvARB'
  ],
  'GL_ARB_vertex_buffer_object' => [
    'glBindBufferARB',
    'glBufferDataARB',
    'glBufferSubDataARB',
    'glDeleteBuffersARB',
    'glGenBuffersARB',
    'glGetBufferParameterivARB',
    'glGetBufferPointervARB',
    'glGetBufferSubDataARB',
    'glIsBufferARB',
    'glMapBufferARB',
    'glUnmapBufferARB'
  ],
  'GL_ARB_vertex_program' => [
    'glBindProgramARB',
    'glDeleteProgramsARB',
    'glDisableVertexAttribArrayARB',
    'glEnableVertexAttribArrayARB',
    'glGenProgramsARB',
    'glGetProgramEnvParameterdvARB',
    'glGetProgramEnvParameterfvARB',
    'glGetProgramivARB',
    'glGetProgramLocalParameterdvARB',
    'glGetProgramLocalParameterfvARB',
    'glGetProgramStringARB',
    'glGetVertexAttribdvARB',
    'glGetVertexAttribfvARB',
    'glGetVertexAttribivARB',
    'glGetVertexAttribPointervARB',
    'glIsProgramARB',
    'glProgramEnvParameter4dARB',
    'glProgramEnvParameter4dvARB',
    'glProgramEnvParameter4fARB',
    'glProgramEnvParameter4fvARB',
    'glProgramLocalParameter4dARB',
    'glProgramLocalParameter4dvARB',
    'glProgramLocalParameter4fARB',
    'glProgramLocalParameter4fvARB',
    'glProgramStringARB',
    'glVertexAttrib1dARB',
    'glVertexAttrib1dvARB',
    'glVertexAttrib1fARB',
    'glVertexAttrib1fvARB',
    'glVertexAttrib1sARB',
    'glVertexAttrib1svARB',
    'glVertexAttrib2dARB',
    'glVertexAttrib2dvARB',
    'glVertexAttrib2fARB',
    'glVertexAttrib2fvARB',
    'glVertexAttrib2sARB',
    'glVertexAttrib2svARB',
    'glVertexAttrib3dARB',
    'glVertexAttrib3dvARB',
    'glVertexAttrib3fARB',
    'glVertexAttrib3fvARB',
    'glVertexAttrib3sARB',
    'glVertexAttrib3svARB',
    'glVertexAttrib4bvARB',
    'glVertexAttrib4dARB',
    'glVertexAttrib4dvARB',
    'glVertexAttrib4fARB',
    'glVertexAttrib4fvARB',
    'glVertexAttrib4ivARB',
    'glVertexAttrib4NbvARB',
    'glVertexAttrib4NivARB',
    'glVertexAttrib4NsvARB',
    'glVertexAttrib4NubARB',
    'glVertexAttrib4NubvARB',
    'glVertexAttrib4NuivARB',
    'glVertexAttrib4NusvARB',
    'glVertexAttrib4sARB',
    'glVertexAttrib4svARB',
    'glVertexAttrib4ubvARB',
    'glVertexAttrib4uivARB',
    'glVertexAttrib4usvARB',
    'glVertexAttribPointerARB'
  ],
  'GL_ARB_vertex_shader' => [
    'glBindAttribLocationARB',
    'glGetActiveAttribARB',
    'glGetAttribLocationARB'
  ],
  'GL_ARB_vertex_type_2_10_10_10_rev' => [
    'glColorP3ui',
    'glColorP3uiv',
    'glColorP4ui',
    'glColorP4uiv',
    'glMultiTexCoordP1ui',
    'glMultiTexCoordP1uiv',
    'glMultiTexCoordP2ui',
    'glMultiTexCoordP2uiv',
    'glMultiTexCoordP3ui',
    'glMultiTexCoordP3uiv',
    'glMultiTexCoordP4ui',
    'glMultiTexCoordP4uiv',
    'glNormalP3ui',
    'glNormalP3uiv',
    'glSecondaryColorP3ui',
    'glSecondaryColorP3uiv',
    'glTexCoordP1ui',
    'glTexCoordP1uiv',
    'glTexCoordP2ui',
    'glTexCoordP2uiv',
    'glTexCoordP3ui',
    'glTexCoordP3uiv',
    'glTexCoordP4ui',
    'glTexCoordP4uiv',
    'glVertexAttribP1ui',
    'glVertexAttribP1uiv',
    'glVertexAttribP2ui',
    'glVertexAttribP2uiv',
    'glVertexAttribP3ui',
    'glVertexAttribP3uiv',
    'glVertexAttribP4ui',
    'glVertexAttribP4uiv',
    'glVertexP2ui',
    'glVertexP2uiv',
    'glVertexP3ui',
    'glVertexP3uiv',
    'glVertexP4ui',
    'glVertexP4uiv'
  ],
  'GL_ARB_viewport_array' => [
    'glDepthRangeArrayv',
    'glDepthRangeIndexed',
    'glGetDoublei_v',
    'glGetFloati_v',
    'glScissorArrayv',
    'glScissorIndexed',
    'glScissorIndexedv',
    'glViewportArrayv',
    'glViewportIndexedf',
    'glViewportIndexedfv'
  ],
  'GL_ARB_window_pos' => [
    'glWindowPos2dARB',
    'glWindowPos2dvARB',
    'glWindowPos2fARB',
    'glWindowPos2fvARB',
    'glWindowPos2iARB',
    'glWindowPos2ivARB',
    'glWindowPos2sARB',
    'glWindowPos2svARB',
    'glWindowPos3dARB',
    'glWindowPos3dvARB',
    'glWindowPos3fARB',
    'glWindowPos3fvARB',
    'glWindowPos3iARB',
    'glWindowPos3ivARB',
    'glWindowPos3sARB',
    'glWindowPos3svARB'
  ],
  'GL_ATI_draw_buffers' => [
    'glDrawBuffersATI'
  ],
  'GL_ATI_element_array' => [
    'glDrawElementArrayATI',
    'glDrawRangeElementArrayATI',
    'glElementPointerATI'
  ],
  'GL_ATI_envmap_bumpmap' => [
    'glGetTexBumpParameterfvATI',
    'glGetTexBumpParameterivATI',
    'glTexBumpParameterfvATI',
    'glTexBumpParameterivATI'
  ],
  'GL_ATI_fragment_shader' => [
    'glAlphaFragmentOp1ATI',
    'glAlphaFragmentOp2ATI',
    'glAlphaFragmentOp3ATI',
    'glBeginFragmentShaderATI',
    'glBindFragmentShaderATI',
    'glColorFragmentOp1ATI',
    'glColorFragmentOp2ATI',
    'glColorFragmentOp3ATI',
    'glDeleteFragmentShaderATI',
    'glEndFragmentShaderATI',
    'glGenFragmentShadersATI',
    'glPassTexCoordATI',
    'glSampleMapATI',
    'glSetFragmentShaderConstantATI'
  ],
  'GL_ATI_map_object_buffer' => [
    'glMapObjectBufferATI',
    'glUnmapObjectBufferATI'
  ],
  'GL_ATI_pn_triangles' => [
    'glPNTrianglesfATI',
    'glPNTrianglesiATI'
  ],
  'GL_ATI_separate_stencil' => [
    'glStencilFuncSeparateATI',
    'glStencilOpSeparateATI'
  ],
  'GL_ATI_vertex_array_object' => [
    'glArrayObjectATI',
    'glFreeObjectBufferATI',
    'glGetArrayObjectfvATI',
    'glGetArrayObjectivATI',
    'glGetObjectBufferfvATI',
    'glGetObjectBufferivATI',
    'glGetVariantArrayObjectfvATI',
    'glGetVariantArrayObjectivATI',
    'glIsObjectBufferATI',
    'glNewObjectBufferATI',
    'glUpdateObjectBufferATI',
    'glVariantArrayObjectATI'
  ],
  'GL_ATI_vertex_attrib_array_object' => [
    'glGetVertexAttribArrayObjectfvATI',
    'glGetVertexAttribArrayObjectivATI',
    'glVertexAttribArrayObjectATI'
  ],
  'GL_ATI_vertex_streams' => [
    'glClientActiveVertexStreamATI',
    'glNormalStream3bATI',
    'glNormalStream3bvATI',
    'glNormalStream3dATI',
    'glNormalStream3dvATI',
    'glNormalStream3fATI',
    'glNormalStream3fvATI',
    'glNormalStream3iATI',
    'glNormalStream3ivATI',
    'glNormalStream3sATI',
    'glNormalStream3svATI',
    'glVertexBlendEnvfATI',
    'glVertexBlendEnviATI',
    'glVertexStream1dATI',
    'glVertexStream1dvATI',
    'glVertexStream1fATI',
    'glVertexStream1fvATI',
    'glVertexStream1iATI',
    'glVertexStream1ivATI',
    'glVertexStream1sATI',
    'glVertexStream1svATI',
    'glVertexStream2dATI',
    'glVertexStream2dvATI',
    'glVertexStream2fATI',
    'glVertexStream2fvATI',
    'glVertexStream2iATI',
    'glVertexStream2ivATI',
    'glVertexStream2sATI',
    'glVertexStream2svATI',
    'glVertexStream3dATI',
    'glVertexStream3dvATI',
    'glVertexStream3fATI',
    'glVertexStream3fvATI',
    'glVertexStream3iATI',
    'glVertexStream3ivATI',
    'glVertexStream3sATI',
    'glVertexStream3svATI',
    'glVertexStream4dATI',
    'glVertexStream4dvATI',
    'glVertexStream4fATI',
    'glVertexStream4fvATI',
    'glVertexStream4iATI',
    'glVertexStream4ivATI',
    'glVertexStream4sATI',
    'glVertexStream4svATI'
  ],
  'GL_EXT_base_instance' => [
    'glDrawArraysInstancedBaseInstanceEXT',
    'glDrawElementsInstancedBaseInstanceEXT',
    'glDrawElementsInstancedBaseVertexBaseInstanceEXT'
  ],
  'GL_EXT_bindable_uniform' => [
    'glGetUniformBufferSizeEXT',
    'glGetUniformOffsetEXT',
    'glUniformBufferEXT'
  ],
  'GL_EXT_blend_color' => [
    'glBlendColorEXT'
  ],
  'GL_EXT_blend_equation_separate' => [
    'glBlendEquationSeparateEXT'
  ],
  'GL_EXT_blend_func_extended' => [
    'glBindFragDataLocationIndexedEXT',
    'glGetFragDataIndexEXT',
    'glGetProgramResourceLocationIndexEXT'
  ],
  'GL_EXT_blend_func_separate' => [
    'glBlendFuncSeparateEXT'
  ],
  'GL_EXT_blend_minmax' => [
    'glBlendEquationEXT'
  ],
  'GL_EXT_buffer_storage' => [
    'glBufferStorageEXT',
    'glNamedBufferStorageEXT'
  ],
  'GL_EXT_clear_texture' => [
    'glClearTexImageEXT',
    'glClearTexSubImageEXT'
  ],
  'GL_EXT_color_subtable' => [
    'glColorSubTableEXT',
    'glCopyColorSubTableEXT'
  ],
  'GL_EXT_compiled_vertex_array' => [
    'glLockArraysEXT',
    'glUnlockArraysEXT'
  ],
  'GL_EXT_convolution' => [
    'glConvolutionFilter1DEXT',
    'glConvolutionFilter2DEXT',
    'glConvolutionParameterfEXT',
    'glConvolutionParameterfvEXT',
    'glConvolutionParameteriEXT',
    'glConvolutionParameterivEXT',
    'glCopyConvolutionFilter1DEXT',
    'glCopyConvolutionFilter2DEXT',
    'glGetConvolutionFilterEXT',
    'glGetConvolutionParameterfvEXT',
    'glGetConvolutionParameterivEXT',
    'glGetSeparableFilterEXT',
    'glSeparableFilter2DEXT'
  ],
  'GL_EXT_coordinate_frame' => [
    'glBinormalPointerEXT',
    'glTangentPointerEXT'
  ],
  'GL_EXT_copy_image' => [
    'glCopyImageSubDataEXT'
  ],
  'GL_EXT_copy_texture' => [
    'glCopyTexImage1DEXT',
    'glCopyTexImage2DEXT',
    'glCopyTexSubImage1DEXT',
    'glCopyTexSubImage2DEXT',
    'glCopyTexSubImage3DEXT'
  ],
  'GL_EXT_cull_vertex' => [
    'glCullParameterdvEXT',
    'glCullParameterfvEXT'
  ],
  'GL_EXT_debug_label' => [
    'glGetObjectLabelEXT',
    'glLabelObjectEXT'
  ],
  'GL_EXT_debug_marker' => [
    'glInsertEventMarkerEXT',
    'glPopGroupMarkerEXT',
    'glPushGroupMarkerEXT'
  ],
  'GL_EXT_depth_bounds_test' => [
    'glDepthBoundsEXT'
  ],
  'GL_EXT_direct_state_access' => [
    'glBindMultiTextureEXT',
    'glCheckNamedFramebufferStatusEXT',
    'glClientAttribDefaultEXT',
    'glCompressedMultiTexImage1DEXT',
    'glCompressedMultiTexImage2DEXT',
    'glCompressedMultiTexImage3DEXT',
    'glCompressedMultiTexSubImage1DEXT',
    'glCompressedMultiTexSubImage2DEXT',
    'glCompressedMultiTexSubImage3DEXT',
    'glCompressedTextureImage1DEXT',
    'glCompressedTextureImage2DEXT',
    'glCompressedTextureImage3DEXT',
    'glCompressedTextureSubImage1DEXT',
    'glCompressedTextureSubImage2DEXT',
    'glCompressedTextureSubImage3DEXT',
    'glCopyMultiTexImage1DEXT',
    'glCopyMultiTexImage2DEXT',
    'glCopyMultiTexSubImage1DEXT',
    'glCopyMultiTexSubImage2DEXT',
    'glCopyMultiTexSubImage3DEXT',
    'glCopyTextureImage1DEXT',
    'glCopyTextureImage2DEXT',
    'glCopyTextureSubImage1DEXT',
    'glCopyTextureSubImage2DEXT',
    'glCopyTextureSubImage3DEXT',
    'glDisableClientStateiEXT',
    'glDisableClientStateIndexedEXT',
    'glDisableVertexArrayAttribEXT',
    'glDisableVertexArrayEXT',
    'glEnableClientStateiEXT',
    'glEnableClientStateIndexedEXT',
    'glEnableVertexArrayAttribEXT',
    'glEnableVertexArrayEXT',
    'glFlushMappedNamedBufferRangeEXT',
    'glFramebufferDrawBufferEXT',
    'glFramebufferDrawBuffersEXT',
    'glFramebufferReadBufferEXT',
    'glGenerateMultiTexMipmapEXT',
    'glGenerateTextureMipmapEXT',
    'glGetCompressedMultiTexImageEXT',
    'glGetCompressedTextureImageEXT',
    'glGetDoubleIndexedvEXT',
    'glGetDoublei_vEXT',
    'glGetFloatIndexedvEXT',
    'glGetFloati_vEXT',
    'glGetFramebufferParameterivEXT',
    'glGetMultiTexEnvfvEXT',
    'glGetMultiTexEnvivEXT',
    'glGetMultiTexGendvEXT',
    'glGetMultiTexGenfvEXT',
    'glGetMultiTexGenivEXT',
    'glGetMultiTexImageEXT',
    'glGetMultiTexLevelParameterfvEXT',
    'glGetMultiTexLevelParameterivEXT',
    'glGetMultiTexParameterfvEXT',
    'glGetMultiTexParameterIivEXT',
    'glGetMultiTexParameterIuivEXT',
    'glGetMultiTexParameterivEXT',
    'glGetNamedBufferParameterivEXT',
    'glGetNamedBufferPointervEXT',
    'glGetNamedBufferSubDataEXT',
    'glGetNamedFramebufferAttachmentParameterivEXT',
    'glGetNamedProgramivEXT',
    'glGetNamedProgramLocalParameterdvEXT',
    'glGetNamedProgramLocalParameterfvEXT',
    'glGetNamedProgramLocalParameterIivEXT',
    'glGetNamedProgramLocalParameterIuivEXT',
    'glGetNamedProgramStringEXT',
    'glGetNamedRenderbufferParameterivEXT',
    'glGetPointerIndexedvEXT',
    'glGetPointeri_vEXT',
    'glGetTextureImageEXT',
    'glGetTextureLevelParameterfvEXT',
    'glGetTextureLevelParameterivEXT',
    'glGetTextureParameterfvEXT',
    'glGetTextureParameterIivEXT',
    'glGetTextureParameterIuivEXT',
    'glGetTextureParameterivEXT',
    'glGetVertexArrayIntegeri_vEXT',
    'glGetVertexArrayIntegervEXT',
    'glGetVertexArrayPointeri_vEXT',
    'glGetVertexArrayPointervEXT',
    'glMapNamedBufferEXT',
    'glMapNamedBufferRangeEXT',
    'glMatrixFrustumEXT',
    'glMatrixLoaddEXT',
    'glMatrixLoadfEXT',
    'glMatrixLoadIdentityEXT',
    'glMatrixLoadTransposedEXT',
    'glMatrixLoadTransposefEXT',
    'glMatrixMultdEXT',
    'glMatrixMultfEXT',
    'glMatrixMultTransposedEXT',
    'glMatrixMultTransposefEXT',
    'glMatrixOrthoEXT',
    'glMatrixPopEXT',
    'glMatrixPushEXT',
    'glMatrixRotatedEXT',
    'glMatrixRotatefEXT',
    'glMatrixScaledEXT',
    'glMatrixScalefEXT',
    'glMatrixTranslatedEXT',
    'glMatrixTranslatefEXT',
    'glMultiTexBufferEXT',
    'glMultiTexCoordPointerEXT',
    'glMultiTexEnvfEXT',
    'glMultiTexEnvfvEXT',
    'glMultiTexEnviEXT',
    'glMultiTexEnvivEXT',
    'glMultiTexGendEXT',
    'glMultiTexGendvEXT',
    'glMultiTexGenfEXT',
    'glMultiTexGenfvEXT',
    'glMultiTexGeniEXT',
    'glMultiTexGenivEXT',
    'glMultiTexImage1DEXT',
    'glMultiTexImage2DEXT',
    'glMultiTexImage3DEXT',
    'glMultiTexParameterfEXT',
    'glMultiTexParameterfvEXT',
    'glMultiTexParameteriEXT',
    'glMultiTexParameterIivEXT',
    'glMultiTexParameterIuivEXT',
    'glMultiTexParameterivEXT',
    'glMultiTexRenderbufferEXT',
    'glMultiTexSubImage1DEXT',
    'glMultiTexSubImage2DEXT',
    'glMultiTexSubImage3DEXT',
    'glNamedBufferDataEXT',
    'glNamedBufferSubDataEXT',
    'glNamedCopyBufferSubDataEXT',
    'glNamedFramebufferRenderbufferEXT',
    'glNamedFramebufferTexture1DEXT',
    'glNamedFramebufferTexture2DEXT',
    'glNamedFramebufferTexture3DEXT',
    'glNamedFramebufferTextureEXT',
    'glNamedFramebufferTextureFaceEXT',
    'glNamedFramebufferTextureLayerEXT',
    'glNamedProgramLocalParameter4dEXT',
    'glNamedProgramLocalParameter4dvEXT',
    'glNamedProgramLocalParameter4fEXT',
    'glNamedProgramLocalParameter4fvEXT',
    'glNamedProgramLocalParameterI4iEXT',
    'glNamedProgramLocalParameterI4ivEXT',
    'glNamedProgramLocalParameterI4uiEXT',
    'glNamedProgramLocalParameterI4uivEXT',
    'glNamedProgramLocalParameters4fvEXT',
    'glNamedProgramLocalParametersI4ivEXT',
    'glNamedProgramLocalParametersI4uivEXT',
    'glNamedProgramStringEXT',
    'glNamedRenderbufferStorageEXT',
    'glNamedRenderbufferStorageMultisampleCoverageEXT',
    'glNamedRenderbufferStorageMultisampleEXT',
    'glProgramUniform1fEXT',
    'glProgramUniform1fvEXT',
    'glProgramUniform1iEXT',
    'glProgramUniform1ivEXT',
    'glProgramUniform1uiEXT',
    'glProgramUniform1uivEXT',
    'glProgramUniform2fEXT',
    'glProgramUniform2fvEXT',
    'glProgramUniform2iEXT',
    'glProgramUniform2ivEXT',
    'glProgramUniform2uiEXT',
    'glProgramUniform2uivEXT',
    'glProgramUniform3fEXT',
    'glProgramUniform3fvEXT',
    'glProgramUniform3iEXT',
    'glProgramUniform3ivEXT',
    'glProgramUniform3uiEXT',
    'glProgramUniform3uivEXT',
    'glProgramUniform4fEXT',
    'glProgramUniform4fvEXT',
    'glProgramUniform4iEXT',
    'glProgramUniform4ivEXT',
    'glProgramUniform4uiEXT',
    'glProgramUniform4uivEXT',
    'glProgramUniformMatrix2fvEXT',
    'glProgramUniformMatrix2x3fvEXT',
    'glProgramUniformMatrix2x4fvEXT',
    'glProgramUniformMatrix3fvEXT',
    'glProgramUniformMatrix3x2fvEXT',
    'glProgramUniformMatrix3x4fvEXT',
    'glProgramUniformMatrix4fvEXT',
    'glProgramUniformMatrix4x2fvEXT',
    'glProgramUniformMatrix4x3fvEXT',
    'glPushClientAttribDefaultEXT',
    'glTextureBufferEXT',
    'glTextureImage1DEXT',
    'glTextureImage2DEXT',
    'glTextureImage3DEXT',
    'glTextureParameterfEXT',
    'glTextureParameterfvEXT',
    'glTextureParameteriEXT',
    'glTextureParameterIivEXT',
    'glTextureParameterIuivEXT',
    'glTextureParameterivEXT',
    'glTextureRenderbufferEXT',
    'glTextureSubImage1DEXT',
    'glTextureSubImage2DEXT',
    'glTextureSubImage3DEXT',
    'glUnmapNamedBufferEXT',
    'glVertexArrayColorOffsetEXT',
    'glVertexArrayEdgeFlagOffsetEXT',
    'glVertexArrayFogCoordOffsetEXT',
    'glVertexArrayIndexOffsetEXT',
    'glVertexArrayMultiTexCoordOffsetEXT',
    'glVertexArrayNormalOffsetEXT',
    'glVertexArraySecondaryColorOffsetEXT',
    'glVertexArrayTexCoordOffsetEXT',
    'glVertexArrayVertexAttribDivisorEXT',
    'glVertexArrayVertexAttribIOffsetEXT',
    'glVertexArrayVertexAttribOffsetEXT',
    'glVertexArrayVertexOffsetEXT'
  ],
  'GL_EXT_discard_framebuffer' => [
    'glDiscardFramebufferEXT'
  ],
  'GL_EXT_draw_buffers' => [
    'glDrawBuffersEXT'
  ],
  'GL_EXT_draw_buffers2' => [
    'glColorMaskIndexedEXT',
    'glDisableIndexedEXT',
    'glEnableIndexedEXT',
    'glGetBooleanIndexedvEXT',
    'glGetIntegerIndexedvEXT',
    'glIsEnabledIndexedEXT'
  ],
  'GL_EXT_draw_buffers_indexed' => [
    'glBlendEquationiEXT',
    'glBlendEquationSeparateiEXT',
    'glBlendFunciEXT',
    'glBlendFuncSeparateiEXT',
    'glColorMaskiEXT',
    'glDisableiEXT',
    'glEnableiEXT',
    'glIsEnablediEXT'
  ],
  'GL_EXT_draw_elements_base_vertex' => [
    'glDrawElementsBaseVertexEXT',
    'glDrawElementsInstancedBaseVertexEXT',
    'glDrawRangeElementsBaseVertexEXT',
    'glMultiDrawElementsBaseVertexEXT'
  ],
  'GL_EXT_draw_instanced' => [
    'glDrawArraysInstancedEXT',
    'glDrawElementsInstancedEXT'
  ],
  'GL_EXT_draw_range_elements' => [
    'glDrawRangeElementsEXT'
  ],
  'GL_EXT_external_buffer' => [
    'glBufferStorageExternalEXT',
    'glNamedBufferStorageExternalEXT'
  ],
  'GL_EXT_fog_coord' => [
    'glFogCoorddEXT',
    'glFogCoorddvEXT',
    'glFogCoordfEXT',
    'glFogCoordfvEXT',
    'glFogCoordPointerEXT'
  ],
  'GL_EXT_fragment_lighting' => [
    'glFragmentColorMaterialEXT',
    'glFragmentLightfEXT',
    'glFragmentLightfvEXT',
    'glFragmentLightiEXT',
    'glFragmentLightivEXT',
    'glFragmentLightModelfEXT',
    'glFragmentLightModelfvEXT',
    'glFragmentLightModeliEXT',
    'glFragmentLightModelivEXT',
    'glFragmentMaterialfEXT',
    'glFragmentMaterialfvEXT',
    'glFragmentMaterialiEXT',
    'glFragmentMaterialivEXT',
    'glGetFragmentLightfvEXT',
    'glGetFragmentLightivEXT',
    'glGetFragmentMaterialfvEXT',
    'glGetFragmentMaterialivEXT',
    'glLightEnviEXT'
  ],
  'GL_EXT_framebuffer_blit' => [
    'glBlitFramebufferEXT'
  ],
  'GL_EXT_framebuffer_multisample' => [
    'glRenderbufferStorageMultisampleEXT'
  ],
  'GL_EXT_framebuffer_object' => [
    'glBindFramebufferEXT',
    'glBindRenderbufferEXT',
    'glCheckFramebufferStatusEXT',
    'glDeleteFramebuffersEXT',
    'glDeleteRenderbuffersEXT',
    'glFramebufferRenderbufferEXT',
    'glFramebufferTexture1DEXT',
    'glFramebufferTexture2DEXT',
    'glFramebufferTexture3DEXT',
    'glGenerateMipmapEXT',
    'glGenFramebuffersEXT',
    'glGenRenderbuffersEXT',
    'glGetFramebufferAttachmentParameterivEXT',
    'glGetRenderbufferParameterivEXT',
    'glIsFramebufferEXT',
    'glIsRenderbufferEXT',
    'glRenderbufferStorageEXT'
  ],
  'GL_EXT_geometry_shader4' => [
    'glFramebufferTextureEXT',
    'glFramebufferTextureFaceEXT',
    'glProgramParameteriEXT'
  ],
  'GL_EXT_gpu_program_parameters' => [
    'glProgramEnvParameters4fvEXT',
    'glProgramLocalParameters4fvEXT'
  ],
  'GL_EXT_gpu_shader4' => [
    'glBindFragDataLocationEXT',
    'glGetFragDataLocationEXT',
    'glGetUniformuivEXT',
    'glGetVertexAttribIivEXT',
    'glGetVertexAttribIuivEXT',
    'glUniform1uiEXT',
    'glUniform1uivEXT',
    'glUniform2uiEXT',
    'glUniform2uivEXT',
    'glUniform3uiEXT',
    'glUniform3uivEXT',
    'glUniform4uiEXT',
    'glUniform4uivEXT',
    'glVertexAttribI1iEXT',
    'glVertexAttribI1ivEXT',
    'glVertexAttribI1uiEXT',
    'glVertexAttribI1uivEXT',
    'glVertexAttribI2iEXT',
    'glVertexAttribI2ivEXT',
    'glVertexAttribI2uiEXT',
    'glVertexAttribI2uivEXT',
    'glVertexAttribI3iEXT',
    'glVertexAttribI3ivEXT',
    'glVertexAttribI3uiEXT',
    'glVertexAttribI3uivEXT',
    'glVertexAttribI4bvEXT',
    'glVertexAttribI4iEXT',
    'glVertexAttribI4ivEXT',
    'glVertexAttribI4svEXT',
    'glVertexAttribI4ubvEXT',
    'glVertexAttribI4uiEXT',
    'glVertexAttribI4uivEXT',
    'glVertexAttribI4usvEXT',
    'glVertexAttribIPointerEXT'
  ],
  'GL_EXT_histogram' => [
    'glGetHistogramEXT',
    'glGetHistogramParameterfvEXT',
    'glGetHistogramParameterivEXT',
    'glGetMinmaxEXT',
    'glGetMinmaxParameterfvEXT',
    'glGetMinmaxParameterivEXT',
    'glHistogramEXT',
    'glMinmaxEXT',
    'glResetHistogramEXT',
    'glResetMinmaxEXT'
  ],
  'GL_EXT_index_func' => [
    'glIndexFuncEXT'
  ],
  'GL_EXT_index_material' => [
    'glIndexMaterialEXT'
  ],
  'GL_EXT_instanced_arrays' => [
    'glVertexAttribDivisorEXT'
  ],
  'GL_EXT_light_texture' => [
    'glApplyTextureEXT',
    'glTextureLightEXT',
    'glTextureMaterialEXT'
  ],
  'GL_EXT_map_buffer_range' => [
    'glFlushMappedBufferRangeEXT',
    'glMapBufferRangeEXT'
  ],
  'GL_EXT_memory_object' => [
    'glBufferStorageMemEXT',
    'glCreateMemoryObjectsEXT',
    'glDeleteMemoryObjectsEXT',
    'glGetMemoryObjectParameterivEXT',
    'glGetUnsignedBytei_vEXT',
    'glGetUnsignedBytevEXT',
    'glIsMemoryObjectEXT',
    'glMemoryObjectParameterivEXT',
    'glNamedBufferStorageMemEXT',
    'glTexStorageMem1DEXT',
    'glTexStorageMem2DEXT',
    'glTexStorageMem2DMultisampleEXT',
    'glTexStorageMem3DEXT',
    'glTexStorageMem3DMultisampleEXT',
    'glTextureStorageMem1DEXT',
    'glTextureStorageMem2DEXT',
    'glTextureStorageMem2DMultisampleEXT',
    'glTextureStorageMem3DEXT',
    'glTextureStorageMem3DMultisampleEXT'
  ],
  'GL_EXT_memory_object_fd' => [
    'glImportMemoryFdEXT'
  ],
  'GL_EXT_memory_object_win32' => [
    'glImportMemoryWin32HandleEXT',
    'glImportMemoryWin32NameEXT'
  ],
  'GL_EXT_multi_draw_arrays' => [
    'glMultiDrawArraysEXT',
    'glMultiDrawElementsEXT'
  ],
  'GL_EXT_multi_draw_indirect' => [
    'glMultiDrawArraysIndirectEXT',
    'glMultiDrawElementsIndirectEXT'
  ],
  'GL_EXT_multisample' => [
    'glSampleMaskEXT',
    'glSamplePatternEXT'
  ],
  'GL_EXT_multisampled_render_to_texture' => [
    'glFramebufferTexture2DMultisampleEXT'
  ],
  'GL_EXT_multiview_draw_buffers' => [
    'glDrawBuffersIndexedEXT',
    'glGetIntegeri_vEXT',
    'glReadBufferIndexedEXT'
  ],
  'GL_EXT_paletted_texture' => [
    'glColorTableEXT',
    'glGetColorTableEXT',
    'glGetColorTableParameterfvEXT',
    'glGetColorTableParameterivEXT'
  ],
  'GL_EXT_pixel_transform' => [
    'glGetPixelTransformParameterfvEXT',
    'glGetPixelTransformParameterivEXT',
    'glPixelTransformParameterfEXT',
    'glPixelTransformParameterfvEXT',
    'glPixelTransformParameteriEXT',
    'glPixelTransformParameterivEXT'
  ],
  'GL_EXT_point_parameters' => [
    'glPointParameterfEXT',
    'glPointParameterfvEXT'
  ],
  'GL_EXT_polygon_offset' => [
    'glPolygonOffsetEXT'
  ],
  'GL_EXT_polygon_offset_clamp' => [
    'glPolygonOffsetClampEXT'
  ],
  'GL_EXT_provoking_vertex' => [
    'glProvokingVertexEXT'
  ],
  'GL_EXT_raster_multisample' => [
    'glCoverageModulationNV',
    'glCoverageModulationTableNV',
    'glGetCoverageModulationTableNV',
    'glRasterSamplesEXT'
  ],
  'GL_EXT_scene_marker' => [
    'glBeginSceneEXT',
    'glEndSceneEXT'
  ],
  'GL_EXT_secondary_color' => [
    'glSecondaryColor3bEXT',
    'glSecondaryColor3bvEXT',
    'glSecondaryColor3dEXT',
    'glSecondaryColor3dvEXT',
    'glSecondaryColor3fEXT',
    'glSecondaryColor3fvEXT',
    'glSecondaryColor3iEXT',
    'glSecondaryColor3ivEXT',
    'glSecondaryColor3sEXT',
    'glSecondaryColor3svEXT',
    'glSecondaryColor3ubEXT',
    'glSecondaryColor3ubvEXT',
    'glSecondaryColor3uiEXT',
    'glSecondaryColor3uivEXT',
    'glSecondaryColor3usEXT',
    'glSecondaryColor3usvEXT',
    'glSecondaryColorPointerEXT'
  ],
  'GL_EXT_semaphore' => [
    'glDeleteSemaphoresEXT',
    'glGenSemaphoresEXT',
    'glGetSemaphoreParameterui64vEXT',
    'glIsSemaphoreEXT',
    'glSemaphoreParameterui64vEXT',
    'glSignalSemaphoreEXT',
    'glWaitSemaphoreEXT'
  ],
  'GL_EXT_semaphore_fd' => [
    'glImportSemaphoreFdEXT'
  ],
  'GL_EXT_semaphore_win32' => [
    'glImportSemaphoreWin32HandleEXT',
    'glImportSemaphoreWin32NameEXT'
  ],
  'GL_EXT_separate_shader_objects' => [
    'glActiveProgramEXT',
    'glCreateShaderProgramEXT',
    'glUseShaderProgramEXT'
  ],
  'GL_EXT_shader_image_load_store' => [
    'glBindImageTextureEXT',
    'glMemoryBarrierEXT'
  ],
  'GL_EXT_shader_pixel_local_storage2' => [
    'glClearPixelLocalStorageuiEXT',
    'glFramebufferPixelLocalStorageSizeEXT',
    'glGetFramebufferPixelLocalStorageSizeEXT'
  ],
  'GL_EXT_sparse_texture' => [
    'glTexPageCommitmentEXT',
    'glTexturePageCommitmentEXT'
  ],
  'GL_EXT_stencil_two_side' => [
    'glActiveStencilFaceEXT'
  ],
  'GL_EXT_subtexture' => [
    'glTexSubImage1DEXT',
    'glTexSubImage2DEXT',
    'glTexSubImage3DEXT'
  ],
  'GL_EXT_texture3D' => [
    'glTexImage3DEXT'
  ],
  'GL_EXT_texture_array' => [
    'glFramebufferTextureLayerEXT'
  ],
  'GL_EXT_texture_buffer_object' => [
    'glTexBufferEXT'
  ],
  'GL_EXT_texture_integer' => [
    'glClearColorIiEXT',
    'glClearColorIuiEXT',
    'glGetTexParameterIivEXT',
    'glGetTexParameterIuivEXT',
    'glTexParameterIivEXT',
    'glTexParameterIuivEXT'
  ],
  'GL_EXT_texture_object' => [
    'glAreTexturesResidentEXT',
    'glBindTextureEXT',
    'glDeleteTexturesEXT',
    'glGenTexturesEXT',
    'glIsTextureEXT',
    'glPrioritizeTexturesEXT'
  ],
  'GL_EXT_texture_perturb_normal' => [
    'glTextureNormalEXT'
  ],
  'GL_EXT_texture_storage' => [
    'glTexStorage1DEXT',
    'glTexStorage2DEXT',
    'glTexStorage3DEXT',
    'glTextureStorage1DEXT',
    'glTextureStorage2DEXT',
    'glTextureStorage3DEXT'
  ],
  'GL_EXT_texture_view' => [
    'glTextureViewEXT'
  ],
  'GL_EXT_timer_query' => [
    'glGetQueryObjecti64vEXT',
    'glGetQueryObjectui64vEXT'
  ],
  'GL_EXT_transform_feedback' => [
    'glBeginTransformFeedbackEXT',
    'glBindBufferBaseEXT',
    'glBindBufferOffsetEXT',
    'glBindBufferRangeEXT',
    'glEndTransformFeedbackEXT',
    'glGetTransformFeedbackVaryingEXT',
    'glTransformFeedbackVaryingsEXT'
  ],
  'GL_EXT_vertex_array' => [
    'glArrayElementEXT',
    'glColorPointerEXT',
    'glDrawArraysEXT',
    'glEdgeFlagPointerEXT',
    'glIndexPointerEXT',
    'glNormalPointerEXT',
    'glTexCoordPointerEXT',
    'glVertexPointerEXT'
  ],
  'GL_EXT_vertex_array_setXXX' => [
    'glBindArraySetEXT',
    'glDeleteArraySetsEXT'
  ],
  'GL_EXT_vertex_attrib_64bit' => [
    'glGetVertexAttribLdvEXT',
    'glVertexArrayVertexAttribLOffsetEXT',
    'glVertexAttribL1dEXT',
    'glVertexAttribL1dvEXT',
    'glVertexAttribL2dEXT',
    'glVertexAttribL2dvEXT',
    'glVertexAttribL3dEXT',
    'glVertexAttribL3dvEXT',
    'glVertexAttribL4dEXT',
    'glVertexAttribL4dvEXT',
    'glVertexAttribLPointerEXT'
  ],
  'GL_EXT_vertex_shader' => [
    'glBeginVertexShaderEXT',
    'glBindLightParameterEXT',
    'glBindMaterialParameterEXT',
    'glBindParameterEXT',
    'glBindTexGenParameterEXT',
    'glBindTextureUnitParameterEXT',
    'glBindVertexShaderEXT',
    'glDeleteVertexShaderEXT',
    'glDisableVariantClientStateEXT',
    'glEnableVariantClientStateEXT',
    'glEndVertexShaderEXT',
    'glExtractComponentEXT',
    'glGenSymbolsEXT',
    'glGenVertexShadersEXT',
    'glGetInvariantBooleanvEXT',
    'glGetInvariantFloatvEXT',
    'glGetInvariantIntegervEXT',
    'glGetLocalConstantBooleanvEXT',
    'glGetLocalConstantFloatvEXT',
    'glGetLocalConstantIntegervEXT',
    'glGetVariantBooleanvEXT',
    'glGetVariantFloatvEXT',
    'glGetVariantIntegervEXT',
    'glGetVariantPointervEXT',
    'glInsertComponentEXT',
    'glIsVariantEnabledEXT',
    'glSetInvariantEXT',
    'glSetLocalConstantEXT',
    'glShaderOp1EXT',
    'glShaderOp2EXT',
    'glShaderOp3EXT',
    'glSwizzleEXT',
    'glVariantbvEXT',
    'glVariantdvEXT',
    'glVariantfvEXT',
    'glVariantivEXT',
    'glVariantPointerEXT',
    'glVariantsvEXT',
    'glVariantubvEXT',
    'glVariantuivEXT',
    'glVariantusvEXT',
    'glWriteMaskEXT'
  ],
  'GL_EXT_vertex_weighting' => [
    'glVertexWeightfEXT',
    'glVertexWeightfvEXT',
    'glVertexWeightPointerEXT'
  ],
  'GL_EXT_win32_keyed_mutex' => [
    'glAcquireKeyedMutexWin32EXT',
    'glReleaseKeyedMutexWin32EXT'
  ],
  'GL_EXT_window_rectangles' => [
    'glWindowRectanglesEXT'
  ],
  'GL_EXT_x11_sync_object' => [
    'glImportSyncEXT'
  ],
  'GL_GREMEDY_frame_terminator' => [
    'glFrameTerminatorGREMEDY'
  ],
  'GL_GREMEDY_string_marker' => [
    'glStringMarkerGREMEDY'
  ],
  'GL_HP_image_transform' => [
    'glGetImageTransformParameterfvHP',
    'glGetImageTransformParameterivHP',
    'glImageTransformParameterfHP',
    'glImageTransformParameterfvHP',
    'glImageTransformParameteriHP',
    'glImageTransformParameterivHP'
  ],
  'GL_IBM_multimode_draw_arrays' => [
    'glMultiModeDrawArraysIBM',
    'glMultiModeDrawElementsIBM'
  ],
  'GL_IBM_vertex_array_lists' => [
    'glColorPointerListIBM',
    'glEdgeFlagPointerListIBM',
    'glFogCoordPointerListIBM',
    'glIndexPointerListIBM',
    'glNormalPointerListIBM',
    'glSecondaryColorPointerListIBM',
    'glTexCoordPointerListIBM',
    'glVertexPointerListIBM'
  ],
  'GL_INTEL_parallel_arrays' => [
    'glColorPointervINTEL',
    'glNormalPointervINTEL',
    'glTexCoordPointervINTEL',
    'glVertexPointervINTEL'
  ],
  'GL_INTEL_performance_query' => [
    'glBeginPerfQueryINTEL',
    'glCreatePerfQueryINTEL',
    'glDeletePerfQueryINTEL',
    'glEndPerfQueryINTEL',
    'glGetFirstPerfQueryIdINTEL',
    'glGetNextPerfQueryIdINTEL',
    'glGetPerfCounterInfoINTEL',
    'glGetPerfQueryDataINTEL',
    'glGetPerfQueryIdByNameINTEL',
    'glGetPerfQueryInfoINTEL'
  ],
  'GL_INTEL_texture_scissor' => [
    'glTexScissorFuncINTEL',
    'glTexScissorINTEL'
  ],
  'GL_KHR_blend_equation_advanced' => [
    'glBlendBarrierKHR'
  ],
  'GL_KHR_debug' => [
    'glDebugMessageCallback',
    'glDebugMessageControl',
    'glDebugMessageInsert',
    'glGetDebugMessageLog',
    'glGetObjectLabel',
    'glGetObjectPtrLabel',
    'glObjectLabel',
    'glObjectPtrLabel',
    'glPopDebugGroup',
    'glPushDebugGroup'
  ],
  'GL_KHR_parallel_shader_compile' => [
    'glMaxShaderCompilerThreadsKHR'
  ],
  'GL_KHR_robustness' => [
    'glGetnUniformfv',
    'glGetnUniformiv',
    'glGetnUniformuiv',
    'glReadnPixels'
  ],
  'GL_KTX_buffer_region' => [
    'glBufferRegionEnabled',
    'glDeleteBufferRegion',
    'glDrawBufferRegion',
    'glNewBufferRegion',
    'glReadBufferRegion'
  ],
  'GL_LAYOUT_LINEAR_INTEL' => [
    'glMapTexture2DINTEL',
    'glSyncTextureINTEL',
    'glUnmapTexture2DINTEL'
  ],
  'GL_MESA_resize_buffers' => [
    'glResizeBuffersMESA'
  ],
  'GL_MESA_window_pos' => [
    'glWindowPos2dMESA',
    'glWindowPos2dvMESA',
    'glWindowPos2fMESA',
    'glWindowPos2fvMESA',
    'glWindowPos2iMESA',
    'glWindowPos2ivMESA',
    'glWindowPos2sMESA',
    'glWindowPos2svMESA',
    'glWindowPos3dMESA',
    'glWindowPos3dvMESA',
    'glWindowPos3fMESA',
    'glWindowPos3fvMESA',
    'glWindowPos3iMESA',
    'glWindowPos3ivMESA',
    'glWindowPos3sMESA',
    'glWindowPos3svMESA',
    'glWindowPos4dMESA',
    'glWindowPos4dvMESA',
    'glWindowPos4fMESA',
    'glWindowPos4fvMESA',
    'glWindowPos4iMESA',
    'glWindowPos4ivMESA',
    'glWindowPos4sMESA',
    'glWindowPos4svMESA'
  ],
  'GL_NVX_conditional_render' => [
    'glBeginConditionalRenderNVX',
    'glEndConditionalRenderNVX'
  ],
  'GL_NVX_linked_gpu_multicast' => [
    'glLGPUCopyImageSubDataNVX',
    'glLGPUInterlockNVX',
    'glLGPUNamedBufferSubDataNVX'
  ],
  'GL_NV_3dvision_settings' => [
    'glStereoParameterfNV',
    'glStereoParameteriNV'
  ],
  'GL_NV_bindless_multi_draw_indirect' => [
    'glMultiDrawArraysIndirectBindlessNV',
    'glMultiDrawElementsIndirectBindlessNV'
  ],
  'GL_NV_bindless_multi_draw_indirect_count' => [
    'glMultiDrawArraysIndirectBindlessCountNV',
    'glMultiDrawElementsIndirectBindlessCountNV'
  ],
  'GL_NV_bindless_texture' => [
    'glGetImageHandleNV',
    'glGetTextureHandleNV',
    'glGetTextureSamplerHandleNV',
    'glIsImageHandleResidentNV',
    'glIsTextureHandleResidentNV',
    'glMakeImageHandleNonResidentNV',
    'glMakeImageHandleResidentNV',
    'glMakeTextureHandleNonResidentNV',
    'glMakeTextureHandleResidentNV',
    'glProgramUniformHandleui64NV',
    'glProgramUniformHandleui64vNV',
    'glUniformHandleui64NV',
    'glUniformHandleui64vNV'
  ],
  'GL_NV_blend_equation_advanced' => [
    'glBlendBarrierNV',
    'glBlendParameteriNV'
  ],
  'GL_NV_clip_space_w_scaling' => [
    'glViewportPositionWScaleNV'
  ],
  'GL_NV_command_list' => [
    'glCallCommandListNV',
    'glCommandListSegmentsNV',
    'glCompileCommandListNV',
    'glCreateCommandListsNV',
    'glCreateStatesNV',
    'glDeleteCommandListsNV',
    'glDeleteStatesNV',
    'glDrawCommandsAddressNV',
    'glDrawCommandsNV',
    'glDrawCommandsStatesAddressNV',
    'glDrawCommandsStatesNV',
    'glGetCommandHeaderNV',
    'glGetStageIndexNV',
    'glIsCommandListNV',
    'glIsStateNV',
    'glListDrawCommandsStatesClientNV',
    'glStateCaptureNV'
  ],
  'GL_NV_conditional_render' => [
    'glBeginConditionalRenderNV',
    'glEndConditionalRenderNV'
  ],
  'GL_NV_conservative_raster' => [
    'glSubpixelPrecisionBiasNV'
  ],
  'GL_NV_conservative_raster_dilate' => [
    'glConservativeRasterParameterfNV'
  ],
  'GL_NV_conservative_raster_pre_snap_triangles' => [
    'glConservativeRasterParameteriNV'
  ],
  'GL_NV_copy_buffer' => [
    'glCopyBufferSubDataNV'
  ],
  'GL_NV_copy_image' => [
    'glCopyImageSubDataNV'
  ],
  'GL_NV_depth_buffer_float' => [
    'glClearDepthdNV',
    'glDepthBoundsdNV',
    'glDepthRangedNV'
  ],
  'GL_NV_draw_buffers' => [
    'glDrawBuffersNV'
  ],
  'GL_NV_draw_instanced' => [
    'glDrawArraysInstancedNV',
    'glDrawElementsInstancedNV'
  ],
  'GL_NV_draw_texture' => [
    'glDrawTextureNV'
  ],
  'GL_NV_draw_vulkan_image' => [
    'glDrawVkImageNV',
    'glGetVkProcAddrNV',
    'glSignalVkFenceNV',
    'glSignalVkSemaphoreNV',
    'glWaitVkSemaphoreNV'
  ],
  'GL_NV_evaluators' => [
    'glEvalMapsNV',
    'glGetMapAttribParameterfvNV',
    'glGetMapAttribParameterivNV',
    'glGetMapControlPointsNV',
    'glGetMapParameterfvNV',
    'glGetMapParameterivNV',
    'glMapControlPointsNV',
    'glMapParameterfvNV',
    'glMapParameterivNV'
  ],
  'GL_NV_explicit_multisample' => [
    'glGetMultisamplefvNV',
    'glSampleMaskIndexedNV',
    'glTexRenderbufferNV'
  ],
  'GL_NV_fence' => [
    'glDeleteFencesNV',
    'glFinishFenceNV',
    'glGenFencesNV',
    'glGetFenceivNV',
    'glIsFenceNV',
    'glSetFenceNV',
    'glTestFenceNV'
  ],
  'GL_NV_fragment_coverage_to_color' => [
    'glFragmentCoverageColorNV'
  ],
  'GL_NV_fragment_program' => [
    'glGetProgramNamedParameterdvNV',
    'glGetProgramNamedParameterfvNV',
    'glProgramNamedParameter4dNV',
    'glProgramNamedParameter4dvNV',
    'glProgramNamedParameter4fNV',
    'glProgramNamedParameter4fvNV'
  ],
  'GL_NV_framebuffer_blit' => [
    'glBlitFramebufferNV'
  ],
  'GL_NV_framebuffer_multisample' => [
    'glRenderbufferStorageMultisampleNV'
  ],
  'GL_NV_framebuffer_multisample_coverage' => [
    'glRenderbufferStorageMultisampleCoverageNV'
  ],
  'GL_NV_geometry_program4' => [
    'glProgramVertexLimitNV'
  ],
  'GL_NV_gpu_multicast' => [
    'glMulticastBarrierNV',
    'glMulticastBlitFramebufferNV',
    'glMulticastBufferSubDataNV',
    'glMulticastCopyBufferSubDataNV',
    'glMulticastCopyImageSubDataNV',
    'glMulticastFramebufferSampleLocationsfvNV',
    'glMulticastGetQueryObjecti64vNV',
    'glMulticastGetQueryObjectivNV',
    'glMulticastGetQueryObjectui64vNV',
    'glMulticastGetQueryObjectuivNV',
    'glMulticastWaitSyncNV',
    'glRenderGpuMaskNV'
  ],
  'GL_NV_gpu_program4' => [
    'glProgramEnvParameterI4iNV',
    'glProgramEnvParameterI4ivNV',
    'glProgramEnvParameterI4uiNV',
    'glProgramEnvParameterI4uivNV',
    'glProgramEnvParametersI4ivNV',
    'glProgramEnvParametersI4uivNV',
    'glProgramLocalParameterI4iNV',
    'glProgramLocalParameterI4ivNV',
    'glProgramLocalParameterI4uiNV',
    'glProgramLocalParameterI4uivNV',
    'glProgramLocalParametersI4ivNV',
    'glProgramLocalParametersI4uivNV'
  ],
  'GL_NV_gpu_shader5' => [
    'glGetUniformi64vNV',
    'glGetUniformui64vNV',
    'glProgramUniform1i64NV',
    'glProgramUniform1i64vNV',
    'glProgramUniform1ui64NV',
    'glProgramUniform1ui64vNV',
    'glProgramUniform2i64NV',
    'glProgramUniform2i64vNV',
    'glProgramUniform2ui64NV',
    'glProgramUniform2ui64vNV',
    'glProgramUniform3i64NV',
    'glProgramUniform3i64vNV',
    'glProgramUniform3ui64NV',
    'glProgramUniform3ui64vNV',
    'glProgramUniform4i64NV',
    'glProgramUniform4i64vNV',
    'glProgramUniform4ui64NV',
    'glProgramUniform4ui64vNV',
    'glUniform1i64NV',
    'glUniform1i64vNV',
    'glUniform1ui64NV',
    'glUniform1ui64vNV',
    'glUniform2i64NV',
    'glUniform2i64vNV',
    'glUniform2ui64NV',
    'glUniform2ui64vNV',
    'glUniform3i64NV',
    'glUniform3i64vNV',
    'glUniform3ui64NV',
    'glUniform3ui64vNV',
    'glUniform4i64NV',
    'glUniform4i64vNV',
    'glUniform4ui64NV',
    'glUniform4ui64vNV'
  ],
  'GL_NV_half_float' => [
    'glColor3hNV',
    'glColor3hvNV',
    'glColor4hNV',
    'glColor4hvNV',
    'glFogCoordhNV',
    'glFogCoordhvNV',
    'glMultiTexCoord1hNV',
    'glMultiTexCoord1hvNV',
    'glMultiTexCoord2hNV',
    'glMultiTexCoord2hvNV',
    'glMultiTexCoord3hNV',
    'glMultiTexCoord3hvNV',
    'glMultiTexCoord4hNV',
    'glMultiTexCoord4hvNV',
    'glNormal3hNV',
    'glNormal3hvNV',
    'glSecondaryColor3hNV',
    'glSecondaryColor3hvNV',
    'glTexCoord1hNV',
    'glTexCoord1hvNV',
    'glTexCoord2hNV',
    'glTexCoord2hvNV',
    'glTexCoord3hNV',
    'glTexCoord3hvNV',
    'glTexCoord4hNV',
    'glTexCoord4hvNV',
    'glVertex2hNV',
    'glVertex2hvNV',
    'glVertex3hNV',
    'glVertex3hvNV',
    'glVertex4hNV',
    'glVertex4hvNV',
    'glVertexAttrib1hNV',
    'glVertexAttrib1hvNV',
    'glVertexAttrib2hNV',
    'glVertexAttrib2hvNV',
    'glVertexAttrib3hNV',
    'glVertexAttrib3hvNV',
    'glVertexAttrib4hNV',
    'glVertexAttrib4hvNV',
    'glVertexAttribs1hvNV',
    'glVertexAttribs2hvNV',
    'glVertexAttribs3hvNV',
    'glVertexAttribs4hvNV',
    'glVertexWeighthNV',
    'glVertexWeighthvNV'
  ],
  'GL_NV_instanced_arrays' => [
    'glVertexAttribDivisorNV'
  ],
  'GL_NV_internalformat_sample_query' => [
    'glGetInternalformatSampleivNV'
  ],
  'GL_NV_non_square_matrices' => [
    'glUniformMatrix2x3fvNV',
    'glUniformMatrix2x4fvNV',
    'glUniformMatrix3x2fvNV',
    'glUniformMatrix3x4fvNV',
    'glUniformMatrix4x2fvNV',
    'glUniformMatrix4x3fvNV'
  ],
  'GL_NV_occlusion_query' => [
    'glBeginOcclusionQueryNV',
    'glDeleteOcclusionQueriesNV',
    'glEndOcclusionQueryNV',
    'glGenOcclusionQueriesNV',
    'glGetOcclusionQueryivNV',
    'glGetOcclusionQueryuivNV',
    'glIsOcclusionQueryNV'
  ],
  'GL_NV_parameter_buffer_object' => [
    'glProgramBufferParametersfvNV',
    'glProgramBufferParametersIivNV',
    'glProgramBufferParametersIuivNV'
  ],
  'GL_NV_path_rendering' => [
    'glCopyPathNV',
    'glCoverFillPathInstancedNV',
    'glCoverFillPathNV',
    'glCoverStrokePathInstancedNV',
    'glCoverStrokePathNV',
    'glDeletePathsNV',
    'glGenPathsNV',
    'glGetPathColorGenfvNV',
    'glGetPathColorGenivNV',
    'glGetPathCommandsNV',
    'glGetPathCoordsNV',
    'glGetPathDashArrayNV',
    'glGetPathLengthNV',
    'glGetPathMetricRangeNV',
    'glGetPathMetricsNV',
    'glGetPathParameterfvNV',
    'glGetPathParameterivNV',
    'glGetPathSpacingNV',
    'glGetPathTexGenfvNV',
    'glGetPathTexGenivNV',
    'glGetProgramResourcefvNV',
    'glInterpolatePathsNV',
    'glIsPathNV',
    'glIsPointInFillPathNV',
    'glIsPointInStrokePathNV',
    'glMatrixLoad3x2fNV',
    'glMatrixLoad3x3fNV',
    'glMatrixLoadTranspose3x3fNV',
    'glMatrixMult3x2fNV',
    'glMatrixMult3x3fNV',
    'glMatrixMultTranspose3x3fNV',
    'glPathColorGenNV',
    'glPathCommandsNV',
    'glPathCoordsNV',
    'glPathCoverDepthFuncNV',
    'glPathDashArrayNV',
    'glPathFogGenNV',
    'glPathGlyphIndexArrayNV',
    'glPathGlyphIndexRangeNV',
    'glPathGlyphRangeNV',
    'glPathGlyphsNV',
    'glPathMemoryGlyphIndexArrayNV',
    'glPathParameterfNV',
    'glPathParameterfvNV',
    'glPathParameteriNV',
    'glPathParameterivNV',
    'glPathStencilDepthOffsetNV',
    'glPathStencilFuncNV',
    'glPathStringNV',
    'glPathSubCommandsNV',
    'glPathSubCoordsNV',
    'glPathTexGenNV',
    'glPointAlongPathNV',
    'glProgramPathFragmentInputGenNV',
    'glStencilFillPathInstancedNV',
    'glStencilFillPathNV',
    'glStencilStrokePathInstancedNV',
    'glStencilStrokePathNV',
    'glStencilThenCoverFillPathInstancedNV',
    'glStencilThenCoverFillPathNV',
    'glStencilThenCoverStrokePathInstancedNV',
    'glStencilThenCoverStrokePathNV',
    'glTransformPathNV',
    'glWeightPathsNV'
  ],
  'GL_NV_pixel_data_range' => [
    'glFlushPixelDataRangeNV',
    'glPixelDataRangeNV'
  ],
  'GL_NV_point_sprite' => [
    'glPointParameteriNV',
    'glPointParameterivNV'
  ],
  'GL_NV_polygon_mode' => [
    'glPolygonModeNV'
  ],
  'GL_NV_present_video' => [
    'glGetVideoi64vNV',
    'glGetVideoivNV',
    'glGetVideoui64vNV',
    'glGetVideouivNV',
    'glPresentFrameDualFillNV',
    'glPresentFrameKeyedNV'
  ],
  'GL_NV_primitive_restart' => [
    'glPrimitiveRestartIndexNV',
    'glPrimitiveRestartNV'
  ],
  'GL_NV_register_combiners' => [
    'glCombinerInputNV',
    'glCombinerOutputNV',
    'glCombinerParameterfNV',
    'glCombinerParameterfvNV',
    'glCombinerParameteriNV',
    'glCombinerParameterivNV',
    'glFinalCombinerInputNV',
    'glGetCombinerInputParameterfvNV',
    'glGetCombinerInputParameterivNV',
    'glGetCombinerOutputParameterfvNV',
    'glGetCombinerOutputParameterivNV',
    'glGetFinalCombinerInputParameterfvNV',
    'glGetFinalCombinerInputParameterivNV'
  ],
  'GL_NV_register_combiners2' => [
    'glCombinerStageParameterfvNV',
    'glGetCombinerStageParameterfvNV'
  ],
  'GL_NV_sample_locations' => [
    'glFramebufferSampleLocationsfvNV',
    'glNamedFramebufferSampleLocationsfvNV'
  ],
  'GL_NV_shader_buffer_load' => [
    'glGetBufferParameterui64vNV',
    'glGetIntegerui64vNV',
    'glGetNamedBufferParameterui64vNV',
    'glIsBufferResidentNV',
    'glIsNamedBufferResidentNV',
    'glMakeBufferNonResidentNV',
    'glMakeBufferResidentNV',
    'glMakeNamedBufferNonResidentNV',
    'glMakeNamedBufferResidentNV',
    'glProgramUniformui64NV',
    'glProgramUniformui64vNV',
    'glUniformui64NV',
    'glUniformui64vNV'
  ],
  'GL_NV_texture_array' => [
    'glCompressedTexImage3DNV',
    'glCompressedTexSubImage3DNV',
    'glCopyTexSubImage3DNV',
    'glFramebufferTextureLayerNV',
    'glTexImage3DNV',
    'glTexSubImage3DNV'
  ],
  'GL_NV_texture_barrier' => [
    'glTextureBarrierNV'
  ],
  'GL_NV_texture_multisample' => [
    'glTexImage2DMultisampleCoverageNV',
    'glTexImage3DMultisampleCoverageNV',
    'glTextureImage2DMultisampleCoverageNV',
    'glTextureImage2DMultisampleNV',
    'glTextureImage3DMultisampleCoverageNV',
    'glTextureImage3DMultisampleNV'
  ],
  'GL_NV_transform_feedback' => [
    'glActiveVaryingNV',
    'glBeginTransformFeedbackNV',
    'glBindBufferBaseNV',
    'glBindBufferOffsetNV',
    'glBindBufferRangeNV',
    'glEndTransformFeedbackNV',
    'glGetActiveVaryingNV',
    'glGetTransformFeedbackVaryingNV',
    'glGetVaryingLocationNV',
    'glTransformFeedbackAttribsNV',
    'glTransformFeedbackVaryingsNV'
  ],
  'GL_NV_transform_feedback2' => [
    'glBindTransformFeedbackNV',
    'glDeleteTransformFeedbacksNV',
    'glDrawTransformFeedbackNV',
    'glGenTransformFeedbacksNV',
    'glIsTransformFeedbackNV',
    'glPauseTransformFeedbackNV',
    'glResumeTransformFeedbackNV'
  ],
  'GL_NV_vdpau_interop' => [
    'glVDPAUFiniNV',
    'glVDPAUGetSurfaceivNV',
    'glVDPAUInitNV',
    'glVDPAUIsSurfaceNV',
    'glVDPAUMapSurfacesNV',
    'glVDPAURegisterOutputSurfaceNV',
    'glVDPAURegisterVideoSurfaceNV',
    'glVDPAUSurfaceAccessNV',
    'glVDPAUUnmapSurfacesNV',
    'glVDPAUUnregisterSurfaceNV'
  ],
  'GL_NV_vertex_array_range' => [
    'glFlushVertexArrayRangeNV',
    'glVertexArrayRangeNV'
  ],
  'GL_NV_vertex_attrib_integer_64bit' => [
    'glGetVertexAttribLi64vNV',
    'glGetVertexAttribLui64vNV',
    'glVertexAttribL1i64NV',
    'glVertexAttribL1i64vNV',
    'glVertexAttribL1ui64NV',
    'glVertexAttribL1ui64vNV',
    'glVertexAttribL2i64NV',
    'glVertexAttribL2i64vNV',
    'glVertexAttribL2ui64NV',
    'glVertexAttribL2ui64vNV',
    'glVertexAttribL3i64NV',
    'glVertexAttribL3i64vNV',
    'glVertexAttribL3ui64NV',
    'glVertexAttribL3ui64vNV',
    'glVertexAttribL4i64NV',
    'glVertexAttribL4i64vNV',
    'glVertexAttribL4ui64NV',
    'glVertexAttribL4ui64vNV',
    'glVertexAttribLFormatNV'
  ],
  'GL_NV_vertex_buffer_unified_memory' => [
    'glBufferAddressRangeNV',
    'glColorFormatNV',
    'glEdgeFlagFormatNV',
    'glFogCoordFormatNV',
    'glGetIntegerui64i_vNV',
    'glIndexFormatNV',
    'glNormalFormatNV',
    'glSecondaryColorFormatNV',
    'glTexCoordFormatNV',
    'glVertexAttribFormatNV',
    'glVertexAttribIFormatNV',
    'glVertexFormatNV'
  ],
  'GL_NV_vertex_program' => [
    'glAreProgramsResidentNV',
    'glBindProgramNV',
    'glDeleteProgramsNV',
    'glExecuteProgramNV',
    'glGenProgramsNV',
    'glGetProgramivNV',
    'glGetProgramParameterdvNV',
    'glGetProgramParameterfvNV',
    'glGetProgramStringNV',
    'glGetTrackMatrixivNV',
    'glGetVertexAttribdvNV',
    'glGetVertexAttribfvNV',
    'glGetVertexAttribivNV',
    'glGetVertexAttribPointervNV',
    'glIsProgramNV',
    'glLoadProgramNV',
    'glProgramParameter4dNV',
    'glProgramParameter4dvNV',
    'glProgramParameter4fNV',
    'glProgramParameter4fvNV',
    'glProgramParameters4dvNV',
    'glProgramParameters4fvNV',
    'glRequestResidentProgramsNV',
    'glTrackMatrixNV',
    'glVertexAttrib1dNV',
    'glVertexAttrib1dvNV',
    'glVertexAttrib1fNV',
    'glVertexAttrib1fvNV',
    'glVertexAttrib1sNV',
    'glVertexAttrib1svNV',
    'glVertexAttrib2dNV',
    'glVertexAttrib2dvNV',
    'glVertexAttrib2fNV',
    'glVertexAttrib2fvNV',
    'glVertexAttrib2sNV',
    'glVertexAttrib2svNV',
    'glVertexAttrib3dNV',
    'glVertexAttrib3dvNV',
    'glVertexAttrib3fNV',
    'glVertexAttrib3fvNV',
    'glVertexAttrib3sNV',
    'glVertexAttrib3svNV',
    'glVertexAttrib4dNV',
    'glVertexAttrib4dvNV',
    'glVertexAttrib4fNV',
    'glVertexAttrib4fvNV',
    'glVertexAttrib4sNV',
    'glVertexAttrib4svNV',
    'glVertexAttrib4ubNV',
    'glVertexAttrib4ubvNV',
    'glVertexAttribPointerNV',
    'glVertexAttribs1dvNV',
    'glVertexAttribs1fvNV',
    'glVertexAttribs1svNV',
    'glVertexAttribs2dvNV',
    'glVertexAttribs2fvNV',
    'glVertexAttribs2svNV',
    'glVertexAttribs3dvNV',
    'glVertexAttribs3fvNV',
    'glVertexAttribs3svNV',
    'glVertexAttribs4dvNV',
    'glVertexAttribs4fvNV',
    'glVertexAttribs4svNV',
    'glVertexAttribs4ubvNV'
  ],
  'GL_NV_video_capture' => [
    'glBeginVideoCaptureNV',
    'glBindVideoCaptureStreamBufferNV',
    'glBindVideoCaptureStreamTextureNV',
    'glEndVideoCaptureNV',
    'glGetVideoCaptureivNV',
    'glGetVideoCaptureStreamdvNV',
    'glGetVideoCaptureStreamfvNV',
    'glGetVideoCaptureStreamivNV',
    'glVideoCaptureNV',
    'glVideoCaptureStreamParameterdvNV',
    'glVideoCaptureStreamParameterfvNV',
    'glVideoCaptureStreamParameterivNV'
  ],
  'GL_NV_viewport_array' => [
    'glDepthRangeArrayfvNV',
    'glDepthRangeIndexedfNV',
    'glDisableiNV',
    'glEnableiNV',
    'glGetFloati_vNV',
    'glIsEnablediNV',
    'glScissorArrayvNV',
    'glScissorIndexedNV',
    'glScissorIndexedvNV',
    'glViewportArrayvNV',
    'glViewportIndexedfNV',
    'glViewportIndexedfvNV'
  ],
  'GL_NV_viewport_swizzle' => [
    'glViewportSwizzleNV'
  ],
  'GL_OVR_multiview' => [
    'glFramebufferTextureMultiviewOVR'
  ],
  'GL_OVR_multiview_multisampled_render_to_texture' => [
    'glFramebufferTextureMultisampleMultiviewOVR'
  ],
  'GL_QCOM_alpha_test' => [
    'glAlphaFuncQCOM'
  ],
  'GL_QCOM_driver_control' => [
    'glDisableDriverControlQCOM',
    'glEnableDriverControlQCOM',
    'glGetDriverControlsQCOM',
    'glGetDriverControlStringQCOM'
  ],
  'GL_QCOM_extended_get' => [
    'glExtGetBufferPointervQCOM',
    'glExtGetBuffersQCOM',
    'glExtGetFramebuffersQCOM',
    'glExtGetRenderbuffersQCOM',
    'glExtGetTexLevelParameterivQCOM',
    'glExtGetTexSubImageQCOM',
    'glExtGetTexturesQCOM',
    'glExtTexObjectStateOverrideiQCOM'
  ],
  'GL_QCOM_extended_get2' => [
    'glExtGetProgramBinarySourceQCOM',
    'glExtGetProgramsQCOM',
    'glExtGetShadersQCOM',
    'glExtIsProgramBinaryQCOM'
  ],
  'GL_QCOM_framebuffer_foveated' => [
    'glFramebufferFoveationConfigQCOM',
    'glFramebufferFoveationParametersQCOM'
  ],
  'GL_QCOM_shader_framebuffer_fetch_noncoherent' => [
    'glFramebufferFetchBarrierQCOM'
  ],
  'GL_QCOM_tiled_rendering' => [
    'glEndTilingQCOM',
    'glStartTilingQCOM'
  ],
  'GL_REGAL_ES1_0_compatibility' => [
    'glAlphaFuncx',
    'glClearColorx',
    'glClearDepthx',
    'glColor4x',
    'glDepthRangex',
    'glFogx',
    'glFogxv',
    'glFrustumf',
    'glFrustumx',
    'glLightModelx',
    'glLightModelxv',
    'glLightx',
    'glLightxv',
    'glLineWidthx',
    'glLoadMatrixx',
    'glMaterialx',
    'glMaterialxv',
    'glMultiTexCoord4x',
    'glMultMatrixx',
    'glNormal3x',
    'glOrthof',
    'glOrthox',
    'glPointSizex',
    'glPolygonOffsetx',
    'glRotatex',
    'glSampleCoveragex',
    'glScalex',
    'glTexEnvx',
    'glTexEnvxv',
    'glTexParameterx',
    'glTranslatex'
  ],
  'GL_REGAL_ES1_1_compatibility' => [
    'glClipPlanef',
    'glClipPlanex',
    'glGetClipPlanef',
    'glGetClipPlanex',
    'glGetFixedv',
    'glGetLightxv',
    'glGetMaterialxv',
    'glGetTexEnvxv',
    'glGetTexParameterxv',
    'glPointParameterx',
    'glPointParameterxv',
    'glPointSizePointerOES',
    'glTexParameterxv'
  ],
  'GL_REGAL_extension_query' => [
    'glGetExtensionREGAL',
    'glIsSupportedREGAL'
  ],
  'GL_REGAL_log' => [
    'glLogMessageCallbackREGAL'
  ],
  'GL_REGAL_proc_address' => [
    'glGetProcAddressREGAL'
  ],
  'GL_SGIS_detail_texture' => [
    'glDetailTexFuncSGIS',
    'glGetDetailTexFuncSGIS'
  ],
  'GL_SGIS_fog_function' => [
    'glFogFuncSGIS',
    'glGetFogFuncSGIS'
  ],
  'GL_SGIS_multisample' => [
    'glSampleMaskSGIS',
    'glSamplePatternSGIS'
  ],
  'GL_SGIS_multitexture' => [
    'glInterleavedTextureCoordSetsSGIS',
    'glSelectTextureCoordSetSGIS',
    'glSelectTextureSGIS',
    'glSelectTextureTransformSGIS'
  ],
  'GL_SGIS_shared_multisample' => [
    'glMultisampleSubRectPosSGIS'
  ],
  'GL_SGIS_sharpen_texture' => [
    'glGetSharpenTexFuncSGIS',
    'glSharpenTexFuncSGIS'
  ],
  'GL_SGIS_texture4D' => [
    'glTexImage4DSGIS',
    'glTexSubImage4DSGIS'
  ],
  'GL_SGIS_texture_filter4' => [
    'glGetTexFilterFuncSGIS',
    'glTexFilterFuncSGIS'
  ],
  'GL_SGIX_async' => [
    'glAsyncMarkerSGIX',
    'glDeleteAsyncMarkersSGIX',
    'glFinishAsyncSGIX',
    'glGenAsyncMarkersSGIX',
    'glIsAsyncMarkerSGIX',
    'glPollAsyncSGIX'
  ],
  'GL_SGIX_datapipe' => [
    'glAddressSpace',
    'glDataPipe'
  ],
  'GL_SGIX_flush_raster' => [
    'glFlushRasterSGIX'
  ],
  'GL_SGIX_fog_layers' => [
    'glFogLayersSGIX',
    'glGetFogLayersSGIX'
  ],
  'GL_SGIX_fog_texture' => [
    'glTextureFogSGIX'
  ],
  'GL_SGIX_fragment_specular_lighting' => [
    'glFragmentColorMaterialSGIX',
    'glFragmentLightfSGIX',
    'glFragmentLightfvSGIX',
    'glFragmentLightiSGIX',
    'glFragmentLightivSGIX',
    'glFragmentLightModelfSGIX',
    'glFragmentLightModelfvSGIX',
    'glFragmentLightModeliSGIX',
    'glFragmentLightModelivSGIX',
    'glFragmentMaterialfSGIX',
    'glFragmentMaterialfvSGIX',
    'glFragmentMaterialiSGIX',
    'glFragmentMaterialivSGIX',
    'glGetFragmentLightfvSGIX',
    'glGetFragmentLightivSGIX',
    'glGetFragmentMaterialfvSGIX',
    'glGetFragmentMaterialivSGIX'
  ],
  'GL_SGIX_framezoom' => [
    'glFrameZoomSGIX'
  ],
  'GL_SGIX_igloo_interface' => [
    'glIglooInterfaceSGIX'
  ],
  'GL_SGIX_mpeg1' => [
    'glAllocMPEGPredictorsSGIX',
    'glDeleteMPEGPredictorsSGIX',
    'glGenMPEGPredictorsSGIX',
    'glGetMPEGParameterfvSGIX',
    'glGetMPEGParameterivSGIX',
    'glGetMPEGPredictorSGIX',
    'glGetMPEGQuantTableubv',
    'glIsMPEGPredictorSGIX',
    'glMPEGPredictorSGIX',
    'glMPEGQuantTableubv',
    'glSwapMPEGPredictorsSGIX'
  ],
  'GL_SGIX_nonlinear_lighting_pervertex' => [
    'glGetNonlinLightfvSGIX',
    'glGetNonlinMaterialfvSGIX',
    'glNonlinLightfvSGIX',
    'glNonlinMaterialfvSGIX'
  ],
  'GL_SGIX_pixel_texture' => [
    'glPixelTexGenSGIX'
  ],
  'GL_SGIX_polynomial_ffd' => [
    'glDeformSGIX',
    'glLoadIdentityDeformationMapSGIX'
  ],
  'GL_SGIX_quad_mesh' => [
    'glMeshBreadthSGIX',
    'glMeshStrideSGIX'
  ],
  'GL_SGIX_reference_plane' => [
    'glReferencePlaneSGIX'
  ],
  'GL_SGIX_sprite' => [
    'glSpriteParameterfSGIX',
    'glSpriteParameterfvSGIX',
    'glSpriteParameteriSGIX',
    'glSpriteParameterivSGIX'
  ],
  'GL_SGIX_tag_sample_buffer' => [
    'glTagSampleBufferSGIX'
  ],
  'GL_SGIX_vector_ops' => [
    'glGetVectorOperationSGIX',
    'glVectorOperationSGIX'
  ],
  'GL_SGIX_vertex_array_object' => [
    'glAreVertexArraysResidentSGIX',
    'glBindVertexArraySGIX',
    'glDeleteVertexArraysSGIX',
    'glGenVertexArraysSGIX',
    'glIsVertexArraySGIX',
    'glPrioritizeVertexArraysSGIX'
  ],
  'GL_SGI_color_table' => [
    'glColorTableParameterfvSGI',
    'glColorTableParameterivSGI',
    'glColorTableSGI',
    'glCopyColorTableSGI',
    'glGetColorTableParameterfvSGI',
    'glGetColorTableParameterivSGI',
    'glGetColorTableSGI'
  ],
  'GL_SGI_fft' => [
    'glGetPixelTransformParameterfvSGI',
    'glGetPixelTransformParameterivSGI',
    'glPixelTransformParameterfSGI',
    'glPixelTransformParameterfvSGI',
    'glPixelTransformParameteriSGI',
    'glPixelTransformParameterivSGI',
    'glPixelTransformSGI'
  ],
  'GL_SUNX_constant_data' => [
    'glFinishTextureSUNX'
  ],
  'GL_SUN_global_alpha' => [
    'glGlobalAlphaFactorbSUN',
    'glGlobalAlphaFactordSUN',
    'glGlobalAlphaFactorfSUN',
    'glGlobalAlphaFactoriSUN',
    'glGlobalAlphaFactorsSUN',
    'glGlobalAlphaFactorubSUN',
    'glGlobalAlphaFactoruiSUN',
    'glGlobalAlphaFactorusSUN'
  ],
  'GL_SUN_read_video_pixels' => [
    'glReadVideoPixelsSUN'
  ],
  'GL_SUN_triangle_list' => [
    'glReplacementCodePointerSUN',
    'glReplacementCodeubSUN',
    'glReplacementCodeubvSUN',
    'glReplacementCodeuiSUN',
    'glReplacementCodeuivSUN',
    'glReplacementCodeusSUN',
    'glReplacementCodeusvSUN'
  ],
  'GL_SUN_vertex' => [
    'glColor3fVertex3fSUN',
    'glColor3fVertex3fvSUN',
    'glColor4fNormal3fVertex3fSUN',
    'glColor4fNormal3fVertex3fvSUN',
    'glColor4ubVertex2fSUN',
    'glColor4ubVertex2fvSUN',
    'glColor4ubVertex3fSUN',
    'glColor4ubVertex3fvSUN',
    'glNormal3fVertex3fSUN',
    'glNormal3fVertex3fvSUN',
    'glReplacementCodeuiColor3fVertex3fSUN',
    'glReplacementCodeuiColor3fVertex3fvSUN',
    'glReplacementCodeuiColor4fNormal3fVertex3fSUN',
    'glReplacementCodeuiColor4fNormal3fVertex3fvSUN',
    'glReplacementCodeuiColor4ubVertex3fSUN',
    'glReplacementCodeuiColor4ubVertex3fvSUN',
    'glReplacementCodeuiNormal3fVertex3fSUN',
    'glReplacementCodeuiNormal3fVertex3fvSUN',
    'glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN',
    'glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN',
    'glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN',
    'glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN',
    'glReplacementCodeuiTexCoord2fVertex3fSUN',
    'glReplacementCodeuiTexCoord2fVertex3fvSUN',
    'glReplacementCodeuiVertex3fSUN',
    'glReplacementCodeuiVertex3fvSUN',
    'glTexCoord2fColor3fVertex3fSUN',
    'glTexCoord2fColor3fVertex3fvSUN',
    'glTexCoord2fColor4fNormal3fVertex3fSUN',
    'glTexCoord2fColor4fNormal3fVertex3fvSUN',
    'glTexCoord2fColor4ubVertex3fSUN',
    'glTexCoord2fColor4ubVertex3fvSUN',
    'glTexCoord2fNormal3fVertex3fSUN',
    'glTexCoord2fNormal3fVertex3fvSUN',
    'glTexCoord2fVertex3fSUN',
    'glTexCoord2fVertex3fvSUN',
    'glTexCoord4fColor4fNormal3fVertex4fSUN',
    'glTexCoord4fColor4fNormal3fVertex4fvSUN',
    'glTexCoord4fVertex4fSUN',
    'glTexCoord4fVertex4fvSUN'
  ],
  'GL_VERSION_1_1' => [
    'glAccum',
    'glAlphaFunc',
    'glAreTexturesResident',
    'glArrayElement',
    'glBegin',
    'glBindTexture',
    'glBitmap',
    'glBlendFunc',
    'glCallList',
    'glCallLists',
    'glClear',
    'glClearAccum',
    'glClearColor',
    'glClearDepth',
    'glClearIndex',
    'glClearStencil',
    'glClipPlane',
    'glColor3b',
    'glColor3bv',
    'glColor3d',
    'glColor3dv',
    'glColor3f',
    'glColor3fv',
    'glColor3i',
    'glColor3iv',
    'glColor3s',
    'glColor3sv',
    'glColor3ub',
    'glColor3ubv',
    'glColor3ui',
    'glColor3uiv',
    'glColor3us',
    'glColor3usv',
    'glColor4b',
    'glColor4bv',
    'glColor4d',
    'glColor4dv',
    'glColor4f',
    'glColor4fv',
    'glColor4i',
    'glColor4iv',
    'glColor4s',
    'glColor4sv',
    'glColor4ub',
    'glColor4ubv',
    'glColor4ui',
    'glColor4uiv',
    'glColor4us',
    'glColor4usv',
    'glColorMask',
    'glColorMaterial',
    'glColorPointer',
    'glCopyPixels',
    'glCopyTexImage1D',
    'glCopyTexImage2D',
    'glCopyTexSubImage1D',
    'glCopyTexSubImage2D',
    'glCullFace',
    'glDeleteLists',
    'glDeleteTextures',
    'glDepthFunc',
    'glDepthMask',
    'glDepthRange',
    'glDisable',
    'glDisableClientState',
    'glDrawArrays',
    'glDrawBuffer',
    'glDrawElements',
    'glDrawPixels',
    'glEdgeFlag',
    'glEdgeFlagPointer',
    'glEdgeFlagv',
    'glEnable',
    'glEnableClientState',
    'glEnd',
    'glEndList',
    'glEvalCoord1d',
    'glEvalCoord1dv',
    'glEvalCoord1f',
    'glEvalCoord1fv',
    'glEvalCoord2d',
    'glEvalCoord2dv',
    'glEvalCoord2f',
    'glEvalCoord2fv',
    'glEvalMesh1',
    'glEvalMesh2',
    'glEvalPoint1',
    'glEvalPoint2',
    'glFeedbackBuffer',
    'glFinish',
    'glFlush',
    'glFogf',
    'glFogfv',
    'glFogi',
    'glFogiv',
    'glFrontFace',
    'glFrustum',
    'glGenLists',
    'glGenTextures',
    'glGetBooleanv',
    'glGetClipPlane',
    'glGetDoublev',
    'glGetError',
    'glGetFloatv',
    'glGetIntegerv',
    'glGetLightfv',
    'glGetLightiv',
    'glGetMapdv',
    'glGetMapfv',
    'glGetMapiv',
    'glGetMaterialfv',
    'glGetMaterialiv',
    'glGetPixelMapfv',
    'glGetPixelMapuiv',
    'glGetPixelMapusv',
    'glGetPointerv',
    'glGetPolygonStipple',
    'glGetString',
    'glGetTexEnvfv',
    'glGetTexEnviv',
    'glGetTexGendv',
    'glGetTexGenfv',
    'glGetTexGeniv',
    'glGetTexImage',
    'glGetTexLevelParameterfv',
    'glGetTexLevelParameteriv',
    'glGetTexParameterfv',
    'glGetTexParameteriv',
    'glHint',
    'glIndexd',
    'glIndexdv',
    'glIndexf',
    'glIndexfv',
    'glIndexi',
    'glIndexiv',
    'glIndexMask',
    'glIndexPointer',
    'glIndexs',
    'glIndexsv',
    'glIndexub',
    'glIndexubv',
    'glInitNames',
    'glInterleavedArrays',
    'glIsEnabled',
    'glIsList',
    'glIsTexture',
    'glLightf',
    'glLightfv',
    'glLighti',
    'glLightiv',
    'glLightModelf',
    'glLightModelfv',
    'glLightModeli',
    'glLightModeliv',
    'glLineStipple',
    'glLineWidth',
    'glListBase',
    'glLoadIdentity',
    'glLoadMatrixd',
    'glLoadMatrixf',
    'glLoadName',
    'glLogicOp',
    'glMap1d',
    'glMap1f',
    'glMap2d',
    'glMap2f',
    'glMapGrid1d',
    'glMapGrid1f',
    'glMapGrid2d',
    'glMapGrid2f',
    'glMaterialf',
    'glMaterialfv',
    'glMateriali',
    'glMaterialiv',
    'glMatrixMode',
    'glMultMatrixd',
    'glMultMatrixf',
    'glNewList',
    'glNormal3b',
    'glNormal3bv',
    'glNormal3d',
    'glNormal3dv',
    'glNormal3f',
    'glNormal3fv',
    'glNormal3i',
    'glNormal3iv',
    'glNormal3s',
    'glNormal3sv',
    'glNormalPointer',
    'glOrtho',
    'glPassThrough',
    'glPixelMapfv',
    'glPixelMapuiv',
    'glPixelMapusv',
    'glPixelStoref',
    'glPixelStorei',
    'glPixelTransferf',
    'glPixelTransferi',
    'glPixelZoom',
    'glPointSize',
    'glPolygonMode',
    'glPolygonOffset',
    'glPolygonStipple',
    'glPopAttrib',
    'glPopClientAttrib',
    'glPopMatrix',
    'glPopName',
    'glPrioritizeTextures',
    'glPushAttrib',
    'glPushClientAttrib',
    'glPushMatrix',
    'glPushName',
    'glRasterPos2d',
    'glRasterPos2dv',
    'glRasterPos2f',
    'glRasterPos2fv',
    'glRasterPos2i',
    'glRasterPos2iv',
    'glRasterPos2s',
    'glRasterPos2sv',
    'glRasterPos3d',
    'glRasterPos3dv',
    'glRasterPos3f',
    'glRasterPos3fv',
    'glRasterPos3i',
    'glRasterPos3iv',
    'glRasterPos3s',
    'glRasterPos3sv',
    'glRasterPos4d',
    'glRasterPos4dv',
    'glRasterPos4f',
    'glRasterPos4fv',
    'glRasterPos4i',
    'glRasterPos4iv',
    'glRasterPos4s',
    'glRasterPos4sv',
    'glReadBuffer',
    'glReadPixels',
    'glRectd',
    'glRectdv',
    'glRectf',
    'glRectfv',
    'glRecti',
    'glRectiv',
    'glRects',
    'glRectsv',
    'glRenderMode',
    'glRotated',
    'glRotatef',
    'glScaled',
    'glScalef',
    'glScissor',
    'glSelectBuffer',
    'glShadeModel',
    'glStencilFunc',
    'glStencilMask',
    'glStencilOp',
    'glTexCoord1d',
    'glTexCoord1dv',
    'glTexCoord1f',
    'glTexCoord1fv',
    'glTexCoord1i',
    'glTexCoord1iv',
    'glTexCoord1s',
    'glTexCoord1sv',
    'glTexCoord2d',
    'glTexCoord2dv',
    'glTexCoord2f',
    'glTexCoord2fv',
    'glTexCoord2i',
    'glTexCoord2iv',
    'glTexCoord2s',
    'glTexCoord2sv',
    'glTexCoord3d',
    'glTexCoord3dv',
    'glTexCoord3f',
    'glTexCoord3fv',
    'glTexCoord3i',
    'glTexCoord3iv',
    'glTexCoord3s',
    'glTexCoord3sv',
    'glTexCoord4d',
    'glTexCoord4dv',
    'glTexCoord4f',
    'glTexCoord4fv',
    'glTexCoord4i',
    'glTexCoord4iv',
    'glTexCoord4s',
    'glTexCoord4sv',
    'glTexCoordPointer',
    'glTexEnvf',
    'glTexEnvfv',
    'glTexEnvi',
    'glTexEnviv',
    'glTexGend',
    'glTexGendv',
    'glTexGenf',
    'glTexGenfv',
    'glTexGeni',
    'glTexGeniv',
    'glTexImage1D',
    'glTexImage2D',
    'glTexParameterf',
    'glTexParameterfv',
    'glTexParameteri',
    'glTexParameteriv',
    'glTexSubImage1D',
    'glTexSubImage2D',
    'glTranslated',
    'glTranslatef',
    'glVertex2d',
    'glVertex2dv',
    'glVertex2f',
    'glVertex2fv',
    'glVertex2i',
    'glVertex2iv',
    'glVertex2s',
    'glVertex2sv',
    'glVertex3d',
    'glVertex3dv',
    'glVertex3f',
    'glVertex3fv',
    'glVertex3i',
    'glVertex3iv',
    'glVertex3s',
    'glVertex3sv',
    'glVertex4d',
    'glVertex4dv',
    'glVertex4f',
    'glVertex4fv',
    'glVertex4i',
    'glVertex4iv',
    'glVertex4s',
    'glVertex4sv',
    'glVertexPointer',
    'glViewport'
  ],
  'GL_VERSION_1_2' => [
    'glCopyTexSubImage3D',
    'glDrawRangeElements',
    'glTexImage3D',
    'glTexSubImage3D'
  ],
  'GL_VERSION_1_3' => [
    'glActiveTexture',
    'glClientActiveTexture',
    'glCompressedTexImage1D',
    'glCompressedTexImage2D',
    'glCompressedTexImage3D',
    'glCompressedTexSubImage1D',
    'glCompressedTexSubImage2D',
    'glCompressedTexSubImage3D',
    'glGetCompressedTexImage',
    'glLoadTransposeMatrixd',
    'glLoadTransposeMatrixf',
    'glMultiTexCoord1d',
    'glMultiTexCoord1dv',
    'glMultiTexCoord1f',
    'glMultiTexCoord1fv',
    'glMultiTexCoord1i',
    'glMultiTexCoord1iv',
    'glMultiTexCoord1s',
    'glMultiTexCoord1sv',
    'glMultiTexCoord2d',
    'glMultiTexCoord2dv',
    'glMultiTexCoord2f',
    'glMultiTexCoord2fv',
    'glMultiTexCoord2i',
    'glMultiTexCoord2iv',
    'glMultiTexCoord2s',
    'glMultiTexCoord2sv',
    'glMultiTexCoord3d',
    'glMultiTexCoord3dv',
    'glMultiTexCoord3f',
    'glMultiTexCoord3fv',
    'glMultiTexCoord3i',
    'glMultiTexCoord3iv',
    'glMultiTexCoord3s',
    'glMultiTexCoord3sv',
    'glMultiTexCoord4d',
    'glMultiTexCoord4dv',
    'glMultiTexCoord4f',
    'glMultiTexCoord4fv',
    'glMultiTexCoord4i',
    'glMultiTexCoord4iv',
    'glMultiTexCoord4s',
    'glMultiTexCoord4sv',
    'glMultTransposeMatrixd',
    'glMultTransposeMatrixf',
    'glSampleCoverage'
  ],
  'GL_VERSION_1_4' => [
    'glBlendColor',
    'glBlendEquation',
    'glBlendFuncSeparate',
    'glFogCoordd',
    'glFogCoorddv',
    'glFogCoordf',
    'glFogCoordfv',
    'glFogCoordPointer',
    'glMultiDrawArrays',
    'glMultiDrawElements',
    'glPointParameterf',
    'glPointParameterfv',
    'glPointParameteri',
    'glPointParameteriv',
    'glSecondaryColor3b',
    'glSecondaryColor3bv',
    'glSecondaryColor3d',
    'glSecondaryColor3dv',
    'glSecondaryColor3f',
    'glSecondaryColor3fv',
    'glSecondaryColor3i',
    'glSecondaryColor3iv',
    'glSecondaryColor3s',
    'glSecondaryColor3sv',
    'glSecondaryColor3ub',
    'glSecondaryColor3ubv',
    'glSecondaryColor3ui',
    'glSecondaryColor3uiv',
    'glSecondaryColor3us',
    'glSecondaryColor3usv',
    'glSecondaryColorPointer',
    'glWindowPos2d',
    'glWindowPos2dv',
    'glWindowPos2f',
    'glWindowPos2fv',
    'glWindowPos2i',
    'glWindowPos2iv',
    'glWindowPos2s',
    'glWindowPos2sv',
    'glWindowPos3d',
    'glWindowPos3dv',
    'glWindowPos3f',
    'glWindowPos3fv',
    'glWindowPos3i',
    'glWindowPos3iv',
    'glWindowPos3s',
    'glWindowPos3sv'
  ],
  'GL_VERSION_1_5' => [
    'glBeginQuery',
    'glBindBuffer',
    'glBufferData',
    'glBufferSubData',
    'glDeleteBuffers',
    'glDeleteQueries',
    'glEndQuery',
    'glGenBuffers',
    'glGenQueries',
    'glGetBufferParameteriv',
    'glGetBufferPointerv',
    'glGetBufferSubData',
    'glGetQueryiv',
    'glGetQueryObjectiv',
    'glGetQueryObjectuiv',
    'glIsBuffer',
    'glIsQuery',
    'glMapBuffer',
    'glUnmapBuffer'
  ],
  'GL_VERSION_2_0' => [
    'glAttachShader',
    'glBindAttribLocation',
    'glBlendEquationSeparate',
    'glCompileShader',
    'glCreateProgram',
    'glCreateShader',
    'glDeleteProgram',
    'glDeleteShader',
    'glDetachShader',
    'glDisableVertexAttribArray',
    'glDrawBuffers',
    'glEnableVertexAttribArray',
    'glGetActiveAttrib',
    'glGetActiveUniform',
    'glGetAttachedShaders',
    'glGetAttribLocation',
    'glGetProgramInfoLog',
    'glGetProgramiv',
    'glGetShaderInfoLog',
    'glGetShaderiv',
    'glGetShaderSource',
    'glGetUniformfv',
    'glGetUniformiv',
    'glGetUniformLocation',
    'glGetVertexAttribdv',
    'glGetVertexAttribfv',
    'glGetVertexAttribiv',
    'glGetVertexAttribPointerv',
    'glIsProgram',
    'glIsShader',
    'glLinkProgram',
    'glShaderSource',
    'glStencilFuncSeparate',
    'glStencilMaskSeparate',
    'glStencilOpSeparate',
    'glUniform1f',
    'glUniform1fv',
    'glUniform1i',
    'glUniform1iv',
    'glUniform2f',
    'glUniform2fv',
    'glUniform2i',
    'glUniform2iv',
    'glUniform3f',
    'glUniform3fv',
    'glUniform3i',
    'glUniform3iv',
    'glUniform4f',
    'glUniform4fv',
    'glUniform4i',
    'glUniform4iv',
    'glUniformMatrix2fv',
    'glUniformMatrix3fv',
    'glUniformMatrix4fv',
    'glUseProgram',
    'glValidateProgram',
    'glVertexAttrib1d',
    'glVertexAttrib1dv',
    'glVertexAttrib1f',
    'glVertexAttrib1fv',
    'glVertexAttrib1s',
    'glVertexAttrib1sv',
    'glVertexAttrib2d',
    'glVertexAttrib2dv',
    'glVertexAttrib2f',
    'glVertexAttrib2fv',
    'glVertexAttrib2s',
    'glVertexAttrib2sv',
    'glVertexAttrib3d',
    'glVertexAttrib3dv',
    'glVertexAttrib3f',
    'glVertexAttrib3fv',
    'glVertexAttrib3s',
    'glVertexAttrib3sv',
    'glVertexAttrib4bv',
    'glVertexAttrib4d',
    'glVertexAttrib4dv',
    'glVertexAttrib4f',
    'glVertexAttrib4fv',
    'glVertexAttrib4iv',
    'glVertexAttrib4Nbv',
    'glVertexAttrib4Niv',
    'glVertexAttrib4Nsv',
    'glVertexAttrib4Nub',
    'glVertexAttrib4Nubv',
    'glVertexAttrib4Nuiv',
    'glVertexAttrib4Nusv',
    'glVertexAttrib4s',
    'glVertexAttrib4sv',
    'glVertexAttrib4ubv',
    'glVertexAttrib4uiv',
    'glVertexAttrib4usv',
    'glVertexAttribPointer'
  ],
  'GL_VERSION_2_1' => [
    'glUniformMatrix2x3fv',
    'glUniformMatrix2x4fv',
    'glUniformMatrix3x2fv',
    'glUniformMatrix3x4fv',
    'glUniformMatrix4x2fv',
    'glUniformMatrix4x3fv'
  ],
  'GL_VERSION_3_0' => [
    'glBeginConditionalRender',
    'glBeginTransformFeedback',
    'glBindFragDataLocation',
    'glClampColor',
    'glClearBufferfi',
    'glClearBufferfv',
    'glClearBufferiv',
    'glClearBufferuiv',
    'glColorMaski',
    'glDisablei',
    'glEnablei',
    'glEndConditionalRender',
    'glEndTransformFeedback',
    'glGetBooleani_v',
    'glGetFragDataLocation',
    'glGetTexParameterIiv',
    'glGetTexParameterIuiv',
    'glGetTransformFeedbackVarying',
    'glGetUniformuiv',
    'glGetVertexAttribIiv',
    'glGetVertexAttribIuiv',
    'glIsEnabledi',
    'glTexParameterIiv',
    'glTexParameterIuiv',
    'glTransformFeedbackVaryings',
    'glUniform1ui',
    'glUniform1uiv',
    'glUniform2ui',
    'glUniform2uiv',
    'glUniform3ui',
    'glUniform3uiv',
    'glUniform4ui',
    'glUniform4uiv',
    'glVertexAttribI1i',
    'glVertexAttribI1iv',
    'glVertexAttribI1ui',
    'glVertexAttribI1uiv',
    'glVertexAttribI2i',
    'glVertexAttribI2iv',
    'glVertexAttribI2ui',
    'glVertexAttribI2uiv',
    'glVertexAttribI3i',
    'glVertexAttribI3iv',
    'glVertexAttribI3ui',
    'glVertexAttribI3uiv',
    'glVertexAttribI4bv',
    'glVertexAttribI4i',
    'glVertexAttribI4iv',
    'glVertexAttribI4sv',
    'glVertexAttribI4ubv',
    'glVertexAttribI4ui',
    'glVertexAttribI4uiv',
    'glVertexAttribI4usv',
    'glVertexAttribIPointer'
  ],
  'GL_VERSION_3_1' => [
    'glDrawArraysInstanced',
    'glDrawElementsInstanced',
    'glPrimitiveRestartIndex',
    'glTexBuffer'
  ],
  'GL_VERSION_3_2' => [
    'glFramebufferTexture',
    'glGetBufferParameteri64v',
    'glGetInteger64i_v'
  ],
  'GL_VERSION_3_3' => [
    'glVertexAttribDivisor'
  ],
  'GL_VERSION_4_0' => [
    'glBlendEquationi',
    'glBlendEquationSeparatei',
    'glBlendFunci',
    'glBlendFuncSeparatei',
    'glMinSampleShading'
  ],
  'GL_VERSION_4_5' => [
    'glGetGraphicsResetStatus',
    'glGetnCompressedTexImage',
    'glGetnTexImage',
    'glGetnUniformdv'
  ],
  'GL_VERSION_4_6' => [
    'glMultiDrawArraysIndirectCount',
    'glMultiDrawElementsIndirectCount',
    'glSpecializeShader'
  ],
  'GL_WIN_swap_hint' => [
    'glAddSwapHintRectWIN'
  ]
)}

our %registry = (
  'GLEW_3DFX_multisample' => {
    'binding_name' => 'GLEW_3DFX_multisample',
    'glewImpl' => 'GLEW_3DFX_multisample',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_3DFX_tbuffer' => {
    'binding_name' => 'GLEW_3DFX_tbuffer',
    'glewImpl' => 'GLEW_3DFX_tbuffer',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_3DFX_texture_compression_FXT1' => {
    'binding_name' => 'GLEW_3DFX_texture_compression_FXT1',
    'glewImpl' => 'GLEW_3DFX_texture_compression_FXT1',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_blend_minmax_factor' => {
    'binding_name' => 'GLEW_AMD_blend_minmax_factor',
    'glewImpl' => 'GLEW_AMD_blend_minmax_factor',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_compressed_3DC_texture' => {
    'binding_name' => 'GLEW_AMD_compressed_3DC_texture',
    'glewImpl' => 'GLEW_AMD_compressed_3DC_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_compressed_ATC_texture' => {
    'binding_name' => 'GLEW_AMD_compressed_ATC_texture',
    'glewImpl' => 'GLEW_AMD_compressed_ATC_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_conservative_depth' => {
    'binding_name' => 'GLEW_AMD_conservative_depth',
    'glewImpl' => 'GLEW_AMD_conservative_depth',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_debug_output' => {
    'binding_name' => 'GLEW_AMD_debug_output',
    'glewImpl' => 'GLEW_AMD_debug_output',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_depth_clamp_separate' => {
    'binding_name' => 'GLEW_AMD_depth_clamp_separate',
    'glewImpl' => 'GLEW_AMD_depth_clamp_separate',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_draw_buffers_blend' => {
    'binding_name' => 'GLEW_AMD_draw_buffers_blend',
    'glewImpl' => 'GLEW_AMD_draw_buffers_blend',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_framebuffer_sample_positions' => {
    'binding_name' => 'GLEW_AMD_framebuffer_sample_positions',
    'glewImpl' => 'GLEW_AMD_framebuffer_sample_positions',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_gcn_shader' => {
    'binding_name' => 'GLEW_AMD_gcn_shader',
    'glewImpl' => 'GLEW_AMD_gcn_shader',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_gpu_shader_half_float' => {
    'binding_name' => 'GLEW_AMD_gpu_shader_half_float',
    'glewImpl' => 'GLEW_AMD_gpu_shader_half_float',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_gpu_shader_int16' => {
    'binding_name' => 'GLEW_AMD_gpu_shader_int16',
    'glewImpl' => 'GLEW_AMD_gpu_shader_int16',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_gpu_shader_int64' => {
    'binding_name' => 'GLEW_AMD_gpu_shader_int64',
    'glewImpl' => 'GLEW_AMD_gpu_shader_int64',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_interleaved_elements' => {
    'binding_name' => 'GLEW_AMD_interleaved_elements',
    'glewImpl' => 'GLEW_AMD_interleaved_elements',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_multi_draw_indirect' => {
    'binding_name' => 'GLEW_AMD_multi_draw_indirect',
    'glewImpl' => 'GLEW_AMD_multi_draw_indirect',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_name_gen_delete' => {
    'binding_name' => 'GLEW_AMD_name_gen_delete',
    'glewImpl' => 'GLEW_AMD_name_gen_delete',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_occlusion_query_event' => {
    'binding_name' => 'GLEW_AMD_occlusion_query_event',
    'glewImpl' => 'GLEW_AMD_occlusion_query_event',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_performance_monitor' => {
    'binding_name' => 'GLEW_AMD_performance_monitor',
    'glewImpl' => 'GLEW_AMD_performance_monitor',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_pinned_memory' => {
    'binding_name' => 'GLEW_AMD_pinned_memory',
    'glewImpl' => 'GLEW_AMD_pinned_memory',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_program_binary_Z400' => {
    'binding_name' => 'GLEW_AMD_program_binary_Z400',
    'glewImpl' => 'GLEW_AMD_program_binary_Z400',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_query_buffer_object' => {
    'binding_name' => 'GLEW_AMD_query_buffer_object',
    'glewImpl' => 'GLEW_AMD_query_buffer_object',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_sample_positions' => {
    'binding_name' => 'GLEW_AMD_sample_positions',
    'glewImpl' => 'GLEW_AMD_sample_positions',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_seamless_cubemap_per_texture' => {
    'binding_name' => 'GLEW_AMD_seamless_cubemap_per_texture',
    'glewImpl' => 'GLEW_AMD_seamless_cubemap_per_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_shader_atomic_counter_ops' => {
    'binding_name' => 'GLEW_AMD_shader_atomic_counter_ops',
    'glewImpl' => 'GLEW_AMD_shader_atomic_counter_ops',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_shader_ballot' => {
    'binding_name' => 'GLEW_AMD_shader_ballot',
    'glewImpl' => 'GLEW_AMD_shader_ballot',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_shader_explicit_vertex_parameter' => {
    'binding_name' => 'GLEW_AMD_shader_explicit_vertex_parameter',
    'glewImpl' => 'GLEW_AMD_shader_explicit_vertex_parameter',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_shader_stencil_export' => {
    'binding_name' => 'GLEW_AMD_shader_stencil_export',
    'glewImpl' => 'GLEW_AMD_shader_stencil_export',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_shader_stencil_value_export' => {
    'binding_name' => 'GLEW_AMD_shader_stencil_value_export',
    'glewImpl' => 'GLEW_AMD_shader_stencil_value_export',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_shader_trinary_minmax' => {
    'binding_name' => 'GLEW_AMD_shader_trinary_minmax',
    'glewImpl' => 'GLEW_AMD_shader_trinary_minmax',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_sparse_texture' => {
    'binding_name' => 'GLEW_AMD_sparse_texture',
    'glewImpl' => 'GLEW_AMD_sparse_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_stencil_operation_extended' => {
    'binding_name' => 'GLEW_AMD_stencil_operation_extended',
    'glewImpl' => 'GLEW_AMD_stencil_operation_extended',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_texture_gather_bias_lod' => {
    'binding_name' => 'GLEW_AMD_texture_gather_bias_lod',
    'glewImpl' => 'GLEW_AMD_texture_gather_bias_lod',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_texture_texture4' => {
    'binding_name' => 'GLEW_AMD_texture_texture4',
    'glewImpl' => 'GLEW_AMD_texture_texture4',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_transform_feedback3_lines_triangles' => {
    'binding_name' => 'GLEW_AMD_transform_feedback3_lines_triangles',
    'glewImpl' => 'GLEW_AMD_transform_feedback3_lines_triangles',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_transform_feedback4' => {
    'binding_name' => 'GLEW_AMD_transform_feedback4',
    'glewImpl' => 'GLEW_AMD_transform_feedback4',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_vertex_shader_layer' => {
    'binding_name' => 'GLEW_AMD_vertex_shader_layer',
    'glewImpl' => 'GLEW_AMD_vertex_shader_layer',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_vertex_shader_tessellator' => {
    'binding_name' => 'GLEW_AMD_vertex_shader_tessellator',
    'glewImpl' => 'GLEW_AMD_vertex_shader_tessellator',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_AMD_vertex_shader_viewport_index' => {
    'binding_name' => 'GLEW_AMD_vertex_shader_viewport_index',
    'glewImpl' => 'GLEW_AMD_vertex_shader_viewport_index',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ANDROID_extension_pack_es31a' => {
    'binding_name' => 'GLEW_ANDROID_extension_pack_es31a',
    'glewImpl' => 'GLEW_ANDROID_extension_pack_es31a',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ANGLE_depth_texture' => {
    'binding_name' => 'GLEW_ANGLE_depth_texture',
    'glewImpl' => 'GLEW_ANGLE_depth_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ANGLE_framebuffer_blit' => {
    'binding_name' => 'GLEW_ANGLE_framebuffer_blit',
    'glewImpl' => 'GLEW_ANGLE_framebuffer_blit',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ANGLE_framebuffer_multisample' => {
    'binding_name' => 'GLEW_ANGLE_framebuffer_multisample',
    'glewImpl' => 'GLEW_ANGLE_framebuffer_multisample',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ANGLE_instanced_arrays' => {
    'binding_name' => 'GLEW_ANGLE_instanced_arrays',
    'glewImpl' => 'GLEW_ANGLE_instanced_arrays',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ANGLE_pack_reverse_row_order' => {
    'binding_name' => 'GLEW_ANGLE_pack_reverse_row_order',
    'glewImpl' => 'GLEW_ANGLE_pack_reverse_row_order',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ANGLE_program_binary' => {
    'binding_name' => 'GLEW_ANGLE_program_binary',
    'glewImpl' => 'GLEW_ANGLE_program_binary',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ANGLE_texture_compression_dxt1' => {
    'binding_name' => 'GLEW_ANGLE_texture_compression_dxt1',
    'glewImpl' => 'GLEW_ANGLE_texture_compression_dxt1',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ANGLE_texture_compression_dxt3' => {
    'binding_name' => 'GLEW_ANGLE_texture_compression_dxt3',
    'glewImpl' => 'GLEW_ANGLE_texture_compression_dxt3',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ANGLE_texture_compression_dxt5' => {
    'binding_name' => 'GLEW_ANGLE_texture_compression_dxt5',
    'glewImpl' => 'GLEW_ANGLE_texture_compression_dxt5',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ANGLE_texture_usage' => {
    'binding_name' => 'GLEW_ANGLE_texture_usage',
    'glewImpl' => 'GLEW_ANGLE_texture_usage',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ANGLE_timer_query' => {
    'binding_name' => 'GLEW_ANGLE_timer_query',
    'glewImpl' => 'GLEW_ANGLE_timer_query',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ANGLE_translated_shader_source' => {
    'binding_name' => 'GLEW_ANGLE_translated_shader_source',
    'glewImpl' => 'GLEW_ANGLE_translated_shader_source',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_aux_depth_stencil' => {
    'binding_name' => 'GLEW_APPLE_aux_depth_stencil',
    'glewImpl' => 'GLEW_APPLE_aux_depth_stencil',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_client_storage' => {
    'binding_name' => 'GLEW_APPLE_client_storage',
    'glewImpl' => 'GLEW_APPLE_client_storage',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_clip_distance' => {
    'binding_name' => 'GLEW_APPLE_clip_distance',
    'glewImpl' => 'GLEW_APPLE_clip_distance',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_color_buffer_packed_float' => {
    'binding_name' => 'GLEW_APPLE_color_buffer_packed_float',
    'glewImpl' => 'GLEW_APPLE_color_buffer_packed_float',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_copy_texture_levels' => {
    'binding_name' => 'GLEW_APPLE_copy_texture_levels',
    'glewImpl' => 'GLEW_APPLE_copy_texture_levels',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_element_array' => {
    'binding_name' => 'GLEW_APPLE_element_array',
    'glewImpl' => 'GLEW_APPLE_element_array',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_fence' => {
    'binding_name' => 'GLEW_APPLE_fence',
    'glewImpl' => 'GLEW_APPLE_fence',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_float_pixels' => {
    'binding_name' => 'GLEW_APPLE_float_pixels',
    'glewImpl' => 'GLEW_APPLE_float_pixels',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_flush_buffer_range' => {
    'binding_name' => 'GLEW_APPLE_flush_buffer_range',
    'glewImpl' => 'GLEW_APPLE_flush_buffer_range',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_framebuffer_multisample' => {
    'binding_name' => 'GLEW_APPLE_framebuffer_multisample',
    'glewImpl' => 'GLEW_APPLE_framebuffer_multisample',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_object_purgeable' => {
    'binding_name' => 'GLEW_APPLE_object_purgeable',
    'glewImpl' => 'GLEW_APPLE_object_purgeable',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_pixel_buffer' => {
    'binding_name' => 'GLEW_APPLE_pixel_buffer',
    'glewImpl' => 'GLEW_APPLE_pixel_buffer',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_rgb_422' => {
    'binding_name' => 'GLEW_APPLE_rgb_422',
    'glewImpl' => 'GLEW_APPLE_rgb_422',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_row_bytes' => {
    'binding_name' => 'GLEW_APPLE_row_bytes',
    'glewImpl' => 'GLEW_APPLE_row_bytes',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_specular_vector' => {
    'binding_name' => 'GLEW_APPLE_specular_vector',
    'glewImpl' => 'GLEW_APPLE_specular_vector',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_sync' => {
    'binding_name' => 'GLEW_APPLE_sync',
    'glewImpl' => 'GLEW_APPLE_sync',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_texture_2D_limited_npot' => {
    'binding_name' => 'GLEW_APPLE_texture_2D_limited_npot',
    'glewImpl' => 'GLEW_APPLE_texture_2D_limited_npot',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_texture_format_BGRA8888' => {
    'binding_name' => 'GLEW_APPLE_texture_format_BGRA8888',
    'glewImpl' => 'GLEW_APPLE_texture_format_BGRA8888',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_texture_max_level' => {
    'binding_name' => 'GLEW_APPLE_texture_max_level',
    'glewImpl' => 'GLEW_APPLE_texture_max_level',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_texture_packed_float' => {
    'binding_name' => 'GLEW_APPLE_texture_packed_float',
    'glewImpl' => 'GLEW_APPLE_texture_packed_float',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_texture_range' => {
    'binding_name' => 'GLEW_APPLE_texture_range',
    'glewImpl' => 'GLEW_APPLE_texture_range',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_transform_hint' => {
    'binding_name' => 'GLEW_APPLE_transform_hint',
    'glewImpl' => 'GLEW_APPLE_transform_hint',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_vertex_array_object' => {
    'binding_name' => 'GLEW_APPLE_vertex_array_object',
    'glewImpl' => 'GLEW_APPLE_vertex_array_object',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_vertex_array_range' => {
    'binding_name' => 'GLEW_APPLE_vertex_array_range',
    'glewImpl' => 'GLEW_APPLE_vertex_array_range',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_vertex_program_evaluators' => {
    'binding_name' => 'GLEW_APPLE_vertex_program_evaluators',
    'glewImpl' => 'GLEW_APPLE_vertex_program_evaluators',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_APPLE_ycbcr_422' => {
    'binding_name' => 'GLEW_APPLE_ycbcr_422',
    'glewImpl' => 'GLEW_APPLE_ycbcr_422',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_ES2_compatibility' => {
    'binding_name' => 'GLEW_ARB_ES2_compatibility',
    'glewImpl' => 'GLEW_ARB_ES2_compatibility',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_ES3_1_compatibility' => {
    'binding_name' => 'GLEW_ARB_ES3_1_compatibility',
    'glewImpl' => 'GLEW_ARB_ES3_1_compatibility',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_ES3_2_compatibility' => {
    'binding_name' => 'GLEW_ARB_ES3_2_compatibility',
    'glewImpl' => 'GLEW_ARB_ES3_2_compatibility',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_ES3_compatibility' => {
    'binding_name' => 'GLEW_ARB_ES3_compatibility',
    'glewImpl' => 'GLEW_ARB_ES3_compatibility',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_arrays_of_arrays' => {
    'binding_name' => 'GLEW_ARB_arrays_of_arrays',
    'glewImpl' => 'GLEW_ARB_arrays_of_arrays',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_base_instance' => {
    'binding_name' => 'GLEW_ARB_base_instance',
    'glewImpl' => 'GLEW_ARB_base_instance',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_bindless_texture' => {
    'binding_name' => 'GLEW_ARB_bindless_texture',
    'glewImpl' => 'GLEW_ARB_bindless_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_blend_func_extended' => {
    'binding_name' => 'GLEW_ARB_blend_func_extended',
    'glewImpl' => 'GLEW_ARB_blend_func_extended',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_buffer_storage' => {
    'binding_name' => 'GLEW_ARB_buffer_storage',
    'glewImpl' => 'GLEW_ARB_buffer_storage',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_cl_event' => {
    'binding_name' => 'GLEW_ARB_cl_event',
    'glewImpl' => 'GLEW_ARB_cl_event',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_clear_buffer_object' => {
    'binding_name' => 'GLEW_ARB_clear_buffer_object',
    'glewImpl' => 'GLEW_ARB_clear_buffer_object',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_clear_texture' => {
    'binding_name' => 'GLEW_ARB_clear_texture',
    'glewImpl' => 'GLEW_ARB_clear_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_clip_control' => {
    'binding_name' => 'GLEW_ARB_clip_control',
    'glewImpl' => 'GLEW_ARB_clip_control',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_color_buffer_float' => {
    'binding_name' => 'GLEW_ARB_color_buffer_float',
    'glewImpl' => 'GLEW_ARB_color_buffer_float',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_compatibility' => {
    'binding_name' => 'GLEW_ARB_compatibility',
    'glewImpl' => 'GLEW_ARB_compatibility',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_compressed_texture_pixel_storage' => {
    'binding_name' => 'GLEW_ARB_compressed_texture_pixel_storage',
    'glewImpl' => 'GLEW_ARB_compressed_texture_pixel_storage',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_compute_shader' => {
    'binding_name' => 'GLEW_ARB_compute_shader',
    'glewImpl' => 'GLEW_ARB_compute_shader',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_compute_variable_group_size' => {
    'binding_name' => 'GLEW_ARB_compute_variable_group_size',
    'glewImpl' => 'GLEW_ARB_compute_variable_group_size',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_conditional_render_inverted' => {
    'binding_name' => 'GLEW_ARB_conditional_render_inverted',
    'glewImpl' => 'GLEW_ARB_conditional_render_inverted',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_conservative_depth' => {
    'binding_name' => 'GLEW_ARB_conservative_depth',
    'glewImpl' => 'GLEW_ARB_conservative_depth',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_copy_buffer' => {
    'binding_name' => 'GLEW_ARB_copy_buffer',
    'glewImpl' => 'GLEW_ARB_copy_buffer',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_copy_image' => {
    'binding_name' => 'GLEW_ARB_copy_image',
    'glewImpl' => 'GLEW_ARB_copy_image',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_cull_distance' => {
    'binding_name' => 'GLEW_ARB_cull_distance',
    'glewImpl' => 'GLEW_ARB_cull_distance',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_debug_output' => {
    'binding_name' => 'GLEW_ARB_debug_output',
    'glewImpl' => 'GLEW_ARB_debug_output',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_depth_buffer_float' => {
    'binding_name' => 'GLEW_ARB_depth_buffer_float',
    'glewImpl' => 'GLEW_ARB_depth_buffer_float',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_depth_clamp' => {
    'binding_name' => 'GLEW_ARB_depth_clamp',
    'glewImpl' => 'GLEW_ARB_depth_clamp',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_depth_texture' => {
    'binding_name' => 'GLEW_ARB_depth_texture',
    'glewImpl' => 'GLEW_ARB_depth_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_derivative_control' => {
    'binding_name' => 'GLEW_ARB_derivative_control',
    'glewImpl' => 'GLEW_ARB_derivative_control',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_direct_state_access' => {
    'binding_name' => 'GLEW_ARB_direct_state_access',
    'glewImpl' => 'GLEW_ARB_direct_state_access',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_draw_buffers' => {
    'binding_name' => 'GLEW_ARB_draw_buffers',
    'glewImpl' => 'GLEW_ARB_draw_buffers',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_draw_buffers_blend' => {
    'binding_name' => 'GLEW_ARB_draw_buffers_blend',
    'glewImpl' => 'GLEW_ARB_draw_buffers_blend',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_draw_elements_base_vertex' => {
    'binding_name' => 'GLEW_ARB_draw_elements_base_vertex',
    'glewImpl' => 'GLEW_ARB_draw_elements_base_vertex',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_draw_indirect' => {
    'binding_name' => 'GLEW_ARB_draw_indirect',
    'glewImpl' => 'GLEW_ARB_draw_indirect',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_draw_instanced' => {
    'binding_name' => 'GLEW_ARB_draw_instanced',
    'glewImpl' => 'GLEW_ARB_draw_instanced',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_enhanced_layouts' => {
    'binding_name' => 'GLEW_ARB_enhanced_layouts',
    'glewImpl' => 'GLEW_ARB_enhanced_layouts',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_explicit_attrib_location' => {
    'binding_name' => 'GLEW_ARB_explicit_attrib_location',
    'glewImpl' => 'GLEW_ARB_explicit_attrib_location',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_explicit_uniform_location' => {
    'binding_name' => 'GLEW_ARB_explicit_uniform_location',
    'glewImpl' => 'GLEW_ARB_explicit_uniform_location',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_fragment_coord_conventions' => {
    'binding_name' => 'GLEW_ARB_fragment_coord_conventions',
    'glewImpl' => 'GLEW_ARB_fragment_coord_conventions',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_fragment_layer_viewport' => {
    'binding_name' => 'GLEW_ARB_fragment_layer_viewport',
    'glewImpl' => 'GLEW_ARB_fragment_layer_viewport',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_fragment_program' => {
    'binding_name' => 'GLEW_ARB_fragment_program',
    'glewImpl' => 'GLEW_ARB_fragment_program',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_fragment_program_shadow' => {
    'binding_name' => 'GLEW_ARB_fragment_program_shadow',
    'glewImpl' => 'GLEW_ARB_fragment_program_shadow',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_fragment_shader' => {
    'binding_name' => 'GLEW_ARB_fragment_shader',
    'glewImpl' => 'GLEW_ARB_fragment_shader',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_fragment_shader_interlock' => {
    'binding_name' => 'GLEW_ARB_fragment_shader_interlock',
    'glewImpl' => 'GLEW_ARB_fragment_shader_interlock',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_framebuffer_no_attachments' => {
    'binding_name' => 'GLEW_ARB_framebuffer_no_attachments',
    'glewImpl' => 'GLEW_ARB_framebuffer_no_attachments',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_framebuffer_object' => {
    'binding_name' => 'GLEW_ARB_framebuffer_object',
    'glewImpl' => 'GLEW_ARB_framebuffer_object',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_framebuffer_sRGB' => {
    'binding_name' => 'GLEW_ARB_framebuffer_sRGB',
    'glewImpl' => 'GLEW_ARB_framebuffer_sRGB',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_geometry_shader4' => {
    'binding_name' => 'GLEW_ARB_geometry_shader4',
    'glewImpl' => 'GLEW_ARB_geometry_shader4',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_get_program_binary' => {
    'binding_name' => 'GLEW_ARB_get_program_binary',
    'glewImpl' => 'GLEW_ARB_get_program_binary',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_get_texture_sub_image' => {
    'binding_name' => 'GLEW_ARB_get_texture_sub_image',
    'glewImpl' => 'GLEW_ARB_get_texture_sub_image',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_gl_spirv' => {
    'binding_name' => 'GLEW_ARB_gl_spirv',
    'glewImpl' => 'GLEW_ARB_gl_spirv',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_gpu_shader5' => {
    'binding_name' => 'GLEW_ARB_gpu_shader5',
    'glewImpl' => 'GLEW_ARB_gpu_shader5',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_gpu_shader_fp64' => {
    'binding_name' => 'GLEW_ARB_gpu_shader_fp64',
    'glewImpl' => 'GLEW_ARB_gpu_shader_fp64',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_gpu_shader_int64' => {
    'binding_name' => 'GLEW_ARB_gpu_shader_int64',
    'glewImpl' => 'GLEW_ARB_gpu_shader_int64',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_half_float_pixel' => {
    'binding_name' => 'GLEW_ARB_half_float_pixel',
    'glewImpl' => 'GLEW_ARB_half_float_pixel',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_half_float_vertex' => {
    'binding_name' => 'GLEW_ARB_half_float_vertex',
    'glewImpl' => 'GLEW_ARB_half_float_vertex',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_imaging' => {
    'binding_name' => 'GLEW_ARB_imaging',
    'glewImpl' => 'GLEW_ARB_imaging',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_indirect_parameters' => {
    'binding_name' => 'GLEW_ARB_indirect_parameters',
    'glewImpl' => 'GLEW_ARB_indirect_parameters',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_instanced_arrays' => {
    'binding_name' => 'GLEW_ARB_instanced_arrays',
    'glewImpl' => 'GLEW_ARB_instanced_arrays',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_internalformat_query' => {
    'binding_name' => 'GLEW_ARB_internalformat_query',
    'glewImpl' => 'GLEW_ARB_internalformat_query',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_internalformat_query2' => {
    'binding_name' => 'GLEW_ARB_internalformat_query2',
    'glewImpl' => 'GLEW_ARB_internalformat_query2',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_invalidate_subdata' => {
    'binding_name' => 'GLEW_ARB_invalidate_subdata',
    'glewImpl' => 'GLEW_ARB_invalidate_subdata',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_map_buffer_alignment' => {
    'binding_name' => 'GLEW_ARB_map_buffer_alignment',
    'glewImpl' => 'GLEW_ARB_map_buffer_alignment',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_map_buffer_range' => {
    'binding_name' => 'GLEW_ARB_map_buffer_range',
    'glewImpl' => 'GLEW_ARB_map_buffer_range',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_matrix_palette' => {
    'binding_name' => 'GLEW_ARB_matrix_palette',
    'glewImpl' => 'GLEW_ARB_matrix_palette',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_multi_bind' => {
    'binding_name' => 'GLEW_ARB_multi_bind',
    'glewImpl' => 'GLEW_ARB_multi_bind',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_multi_draw_indirect' => {
    'binding_name' => 'GLEW_ARB_multi_draw_indirect',
    'glewImpl' => 'GLEW_ARB_multi_draw_indirect',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_multisample' => {
    'binding_name' => 'GLEW_ARB_multisample',
    'glewImpl' => 'GLEW_ARB_multisample',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_multitexture' => {
    'binding_name' => 'GLEW_ARB_multitexture',
    'glewImpl' => 'GLEW_ARB_multitexture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_occlusion_query' => {
    'binding_name' => 'GLEW_ARB_occlusion_query',
    'glewImpl' => 'GLEW_ARB_occlusion_query',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_occlusion_query2' => {
    'binding_name' => 'GLEW_ARB_occlusion_query2',
    'glewImpl' => 'GLEW_ARB_occlusion_query2',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_parallel_shader_compile' => {
    'binding_name' => 'GLEW_ARB_parallel_shader_compile',
    'glewImpl' => 'GLEW_ARB_parallel_shader_compile',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_pipeline_statistics_query' => {
    'binding_name' => 'GLEW_ARB_pipeline_statistics_query',
    'glewImpl' => 'GLEW_ARB_pipeline_statistics_query',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_pixel_buffer_object' => {
    'binding_name' => 'GLEW_ARB_pixel_buffer_object',
    'glewImpl' => 'GLEW_ARB_pixel_buffer_object',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_point_parameters' => {
    'binding_name' => 'GLEW_ARB_point_parameters',
    'glewImpl' => 'GLEW_ARB_point_parameters',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_point_sprite' => {
    'binding_name' => 'GLEW_ARB_point_sprite',
    'glewImpl' => 'GLEW_ARB_point_sprite',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_polygon_offset_clamp' => {
    'binding_name' => 'GLEW_ARB_polygon_offset_clamp',
    'glewImpl' => 'GLEW_ARB_polygon_offset_clamp',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_post_depth_coverage' => {
    'binding_name' => 'GLEW_ARB_post_depth_coverage',
    'glewImpl' => 'GLEW_ARB_post_depth_coverage',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_program_interface_query' => {
    'binding_name' => 'GLEW_ARB_program_interface_query',
    'glewImpl' => 'GLEW_ARB_program_interface_query',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_provoking_vertex' => {
    'binding_name' => 'GLEW_ARB_provoking_vertex',
    'glewImpl' => 'GLEW_ARB_provoking_vertex',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_query_buffer_object' => {
    'binding_name' => 'GLEW_ARB_query_buffer_object',
    'glewImpl' => 'GLEW_ARB_query_buffer_object',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_robust_buffer_access_behavior' => {
    'binding_name' => 'GLEW_ARB_robust_buffer_access_behavior',
    'glewImpl' => 'GLEW_ARB_robust_buffer_access_behavior',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_robustness' => {
    'binding_name' => 'GLEW_ARB_robustness',
    'glewImpl' => 'GLEW_ARB_robustness',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_robustness_application_isolation' => {
    'binding_name' => 'GLEW_ARB_robustness_application_isolation',
    'glewImpl' => 'GLEW_ARB_robustness_application_isolation',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_robustness_share_group_isolation' => {
    'binding_name' => 'GLEW_ARB_robustness_share_group_isolation',
    'glewImpl' => 'GLEW_ARB_robustness_share_group_isolation',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_sample_locations' => {
    'binding_name' => 'GLEW_ARB_sample_locations',
    'glewImpl' => 'GLEW_ARB_sample_locations',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_sample_shading' => {
    'binding_name' => 'GLEW_ARB_sample_shading',
    'glewImpl' => 'GLEW_ARB_sample_shading',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_sampler_objects' => {
    'binding_name' => 'GLEW_ARB_sampler_objects',
    'glewImpl' => 'GLEW_ARB_sampler_objects',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_seamless_cube_map' => {
    'binding_name' => 'GLEW_ARB_seamless_cube_map',
    'glewImpl' => 'GLEW_ARB_seamless_cube_map',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_seamless_cubemap_per_texture' => {
    'binding_name' => 'GLEW_ARB_seamless_cubemap_per_texture',
    'glewImpl' => 'GLEW_ARB_seamless_cubemap_per_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_separate_shader_objects' => {
    'binding_name' => 'GLEW_ARB_separate_shader_objects',
    'glewImpl' => 'GLEW_ARB_separate_shader_objects',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_shader_atomic_counter_ops' => {
    'binding_name' => 'GLEW_ARB_shader_atomic_counter_ops',
    'glewImpl' => 'GLEW_ARB_shader_atomic_counter_ops',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_shader_atomic_counters' => {
    'binding_name' => 'GLEW_ARB_shader_atomic_counters',
    'glewImpl' => 'GLEW_ARB_shader_atomic_counters',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_shader_ballot' => {
    'binding_name' => 'GLEW_ARB_shader_ballot',
    'glewImpl' => 'GLEW_ARB_shader_ballot',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_shader_bit_encoding' => {
    'binding_name' => 'GLEW_ARB_shader_bit_encoding',
    'glewImpl' => 'GLEW_ARB_shader_bit_encoding',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_shader_clock' => {
    'binding_name' => 'GLEW_ARB_shader_clock',
    'glewImpl' => 'GLEW_ARB_shader_clock',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_shader_draw_parameters' => {
    'binding_name' => 'GLEW_ARB_shader_draw_parameters',
    'glewImpl' => 'GLEW_ARB_shader_draw_parameters',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_shader_group_vote' => {
    'binding_name' => 'GLEW_ARB_shader_group_vote',
    'glewImpl' => 'GLEW_ARB_shader_group_vote',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_shader_image_load_store' => {
    'binding_name' => 'GLEW_ARB_shader_image_load_store',
    'glewImpl' => 'GLEW_ARB_shader_image_load_store',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_shader_image_size' => {
    'binding_name' => 'GLEW_ARB_shader_image_size',
    'glewImpl' => 'GLEW_ARB_shader_image_size',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_shader_objects' => {
    'binding_name' => 'GLEW_ARB_shader_objects',
    'glewImpl' => 'GLEW_ARB_shader_objects',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_shader_precision' => {
    'binding_name' => 'GLEW_ARB_shader_precision',
    'glewImpl' => 'GLEW_ARB_shader_precision',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_shader_stencil_export' => {
    'binding_name' => 'GLEW_ARB_shader_stencil_export',
    'glewImpl' => 'GLEW_ARB_shader_stencil_export',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_shader_storage_buffer_object' => {
    'binding_name' => 'GLEW_ARB_shader_storage_buffer_object',
    'glewImpl' => 'GLEW_ARB_shader_storage_buffer_object',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_shader_subroutine' => {
    'binding_name' => 'GLEW_ARB_shader_subroutine',
    'glewImpl' => 'GLEW_ARB_shader_subroutine',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_shader_texture_image_samples' => {
    'binding_name' => 'GLEW_ARB_shader_texture_image_samples',
    'glewImpl' => 'GLEW_ARB_shader_texture_image_samples',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_shader_texture_lod' => {
    'binding_name' => 'GLEW_ARB_shader_texture_lod',
    'glewImpl' => 'GLEW_ARB_shader_texture_lod',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_shader_viewport_layer_array' => {
    'binding_name' => 'GLEW_ARB_shader_viewport_layer_array',
    'glewImpl' => 'GLEW_ARB_shader_viewport_layer_array',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_shading_language_100' => {
    'binding_name' => 'GLEW_ARB_shading_language_100',
    'glewImpl' => 'GLEW_ARB_shading_language_100',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_shading_language_420pack' => {
    'binding_name' => 'GLEW_ARB_shading_language_420pack',
    'glewImpl' => 'GLEW_ARB_shading_language_420pack',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_shading_language_include' => {
    'binding_name' => 'GLEW_ARB_shading_language_include',
    'glewImpl' => 'GLEW_ARB_shading_language_include',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_shading_language_packing' => {
    'binding_name' => 'GLEW_ARB_shading_language_packing',
    'glewImpl' => 'GLEW_ARB_shading_language_packing',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_shadow' => {
    'binding_name' => 'GLEW_ARB_shadow',
    'glewImpl' => 'GLEW_ARB_shadow',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_shadow_ambient' => {
    'binding_name' => 'GLEW_ARB_shadow_ambient',
    'glewImpl' => 'GLEW_ARB_shadow_ambient',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_sparse_buffer' => {
    'binding_name' => 'GLEW_ARB_sparse_buffer',
    'glewImpl' => 'GLEW_ARB_sparse_buffer',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_sparse_texture' => {
    'binding_name' => 'GLEW_ARB_sparse_texture',
    'glewImpl' => 'GLEW_ARB_sparse_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_sparse_texture2' => {
    'binding_name' => 'GLEW_ARB_sparse_texture2',
    'glewImpl' => 'GLEW_ARB_sparse_texture2',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_sparse_texture_clamp' => {
    'binding_name' => 'GLEW_ARB_sparse_texture_clamp',
    'glewImpl' => 'GLEW_ARB_sparse_texture_clamp',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_spirv_extensions' => {
    'binding_name' => 'GLEW_ARB_spirv_extensions',
    'glewImpl' => 'GLEW_ARB_spirv_extensions',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_stencil_texturing' => {
    'binding_name' => 'GLEW_ARB_stencil_texturing',
    'glewImpl' => 'GLEW_ARB_stencil_texturing',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_sync' => {
    'binding_name' => 'GLEW_ARB_sync',
    'glewImpl' => 'GLEW_ARB_sync',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_tessellation_shader' => {
    'binding_name' => 'GLEW_ARB_tessellation_shader',
    'glewImpl' => 'GLEW_ARB_tessellation_shader',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_barrier' => {
    'binding_name' => 'GLEW_ARB_texture_barrier',
    'glewImpl' => 'GLEW_ARB_texture_barrier',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_border_clamp' => {
    'binding_name' => 'GLEW_ARB_texture_border_clamp',
    'glewImpl' => 'GLEW_ARB_texture_border_clamp',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_buffer_object' => {
    'binding_name' => 'GLEW_ARB_texture_buffer_object',
    'glewImpl' => 'GLEW_ARB_texture_buffer_object',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_buffer_object_rgb32' => {
    'binding_name' => 'GLEW_ARB_texture_buffer_object_rgb32',
    'glewImpl' => 'GLEW_ARB_texture_buffer_object_rgb32',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_buffer_range' => {
    'binding_name' => 'GLEW_ARB_texture_buffer_range',
    'glewImpl' => 'GLEW_ARB_texture_buffer_range',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_compression' => {
    'binding_name' => 'GLEW_ARB_texture_compression',
    'glewImpl' => 'GLEW_ARB_texture_compression',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_compression_bptc' => {
    'binding_name' => 'GLEW_ARB_texture_compression_bptc',
    'glewImpl' => 'GLEW_ARB_texture_compression_bptc',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_compression_rgtc' => {
    'binding_name' => 'GLEW_ARB_texture_compression_rgtc',
    'glewImpl' => 'GLEW_ARB_texture_compression_rgtc',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_cube_map' => {
    'binding_name' => 'GLEW_ARB_texture_cube_map',
    'glewImpl' => 'GLEW_ARB_texture_cube_map',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_cube_map_array' => {
    'binding_name' => 'GLEW_ARB_texture_cube_map_array',
    'glewImpl' => 'GLEW_ARB_texture_cube_map_array',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_env_add' => {
    'binding_name' => 'GLEW_ARB_texture_env_add',
    'glewImpl' => 'GLEW_ARB_texture_env_add',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_env_combine' => {
    'binding_name' => 'GLEW_ARB_texture_env_combine',
    'glewImpl' => 'GLEW_ARB_texture_env_combine',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_env_crossbar' => {
    'binding_name' => 'GLEW_ARB_texture_env_crossbar',
    'glewImpl' => 'GLEW_ARB_texture_env_crossbar',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_env_dot3' => {
    'binding_name' => 'GLEW_ARB_texture_env_dot3',
    'glewImpl' => 'GLEW_ARB_texture_env_dot3',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_filter_anisotropic' => {
    'binding_name' => 'GLEW_ARB_texture_filter_anisotropic',
    'glewImpl' => 'GLEW_ARB_texture_filter_anisotropic',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_filter_minmax' => {
    'binding_name' => 'GLEW_ARB_texture_filter_minmax',
    'glewImpl' => 'GLEW_ARB_texture_filter_minmax',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_float' => {
    'binding_name' => 'GLEW_ARB_texture_float',
    'glewImpl' => 'GLEW_ARB_texture_float',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_gather' => {
    'binding_name' => 'GLEW_ARB_texture_gather',
    'glewImpl' => 'GLEW_ARB_texture_gather',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_mirror_clamp_to_edge' => {
    'binding_name' => 'GLEW_ARB_texture_mirror_clamp_to_edge',
    'glewImpl' => 'GLEW_ARB_texture_mirror_clamp_to_edge',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_mirrored_repeat' => {
    'binding_name' => 'GLEW_ARB_texture_mirrored_repeat',
    'glewImpl' => 'GLEW_ARB_texture_mirrored_repeat',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_multisample' => {
    'binding_name' => 'GLEW_ARB_texture_multisample',
    'glewImpl' => 'GLEW_ARB_texture_multisample',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_non_power_of_two' => {
    'binding_name' => 'GLEW_ARB_texture_non_power_of_two',
    'glewImpl' => 'GLEW_ARB_texture_non_power_of_two',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_query_levels' => {
    'binding_name' => 'GLEW_ARB_texture_query_levels',
    'glewImpl' => 'GLEW_ARB_texture_query_levels',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_query_lod' => {
    'binding_name' => 'GLEW_ARB_texture_query_lod',
    'glewImpl' => 'GLEW_ARB_texture_query_lod',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_rectangle' => {
    'binding_name' => 'GLEW_ARB_texture_rectangle',
    'glewImpl' => 'GLEW_ARB_texture_rectangle',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_rg' => {
    'binding_name' => 'GLEW_ARB_texture_rg',
    'glewImpl' => 'GLEW_ARB_texture_rg',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_rgb10_a2ui' => {
    'binding_name' => 'GLEW_ARB_texture_rgb10_a2ui',
    'glewImpl' => 'GLEW_ARB_texture_rgb10_a2ui',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_stencil8' => {
    'binding_name' => 'GLEW_ARB_texture_stencil8',
    'glewImpl' => 'GLEW_ARB_texture_stencil8',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_storage' => {
    'binding_name' => 'GLEW_ARB_texture_storage',
    'glewImpl' => 'GLEW_ARB_texture_storage',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_storage_multisample' => {
    'binding_name' => 'GLEW_ARB_texture_storage_multisample',
    'glewImpl' => 'GLEW_ARB_texture_storage_multisample',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_swizzle' => {
    'binding_name' => 'GLEW_ARB_texture_swizzle',
    'glewImpl' => 'GLEW_ARB_texture_swizzle',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_texture_view' => {
    'binding_name' => 'GLEW_ARB_texture_view',
    'glewImpl' => 'GLEW_ARB_texture_view',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_timer_query' => {
    'binding_name' => 'GLEW_ARB_timer_query',
    'glewImpl' => 'GLEW_ARB_timer_query',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_transform_feedback2' => {
    'binding_name' => 'GLEW_ARB_transform_feedback2',
    'glewImpl' => 'GLEW_ARB_transform_feedback2',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_transform_feedback3' => {
    'binding_name' => 'GLEW_ARB_transform_feedback3',
    'glewImpl' => 'GLEW_ARB_transform_feedback3',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_transform_feedback_instanced' => {
    'binding_name' => 'GLEW_ARB_transform_feedback_instanced',
    'glewImpl' => 'GLEW_ARB_transform_feedback_instanced',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_transform_feedback_overflow_query' => {
    'binding_name' => 'GLEW_ARB_transform_feedback_overflow_query',
    'glewImpl' => 'GLEW_ARB_transform_feedback_overflow_query',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_transpose_matrix' => {
    'binding_name' => 'GLEW_ARB_transpose_matrix',
    'glewImpl' => 'GLEW_ARB_transpose_matrix',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_uniform_buffer_object' => {
    'binding_name' => 'GLEW_ARB_uniform_buffer_object',
    'glewImpl' => 'GLEW_ARB_uniform_buffer_object',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_vertex_array_bgra' => {
    'binding_name' => 'GLEW_ARB_vertex_array_bgra',
    'glewImpl' => 'GLEW_ARB_vertex_array_bgra',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_vertex_array_object' => {
    'binding_name' => 'GLEW_ARB_vertex_array_object',
    'glewImpl' => 'GLEW_ARB_vertex_array_object',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_vertex_attrib_64bit' => {
    'binding_name' => 'GLEW_ARB_vertex_attrib_64bit',
    'glewImpl' => 'GLEW_ARB_vertex_attrib_64bit',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_vertex_attrib_binding' => {
    'binding_name' => 'GLEW_ARB_vertex_attrib_binding',
    'glewImpl' => 'GLEW_ARB_vertex_attrib_binding',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_vertex_blend' => {
    'binding_name' => 'GLEW_ARB_vertex_blend',
    'glewImpl' => 'GLEW_ARB_vertex_blend',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_vertex_buffer_object' => {
    'binding_name' => 'GLEW_ARB_vertex_buffer_object',
    'glewImpl' => 'GLEW_ARB_vertex_buffer_object',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_vertex_program' => {
    'binding_name' => 'GLEW_ARB_vertex_program',
    'glewImpl' => 'GLEW_ARB_vertex_program',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_vertex_shader' => {
    'binding_name' => 'GLEW_ARB_vertex_shader',
    'glewImpl' => 'GLEW_ARB_vertex_shader',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_vertex_type_10f_11f_11f_rev' => {
    'binding_name' => 'GLEW_ARB_vertex_type_10f_11f_11f_rev',
    'glewImpl' => 'GLEW_ARB_vertex_type_10f_11f_11f_rev',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_vertex_type_2_10_10_10_rev' => {
    'binding_name' => 'GLEW_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => 'GLEW_ARB_vertex_type_2_10_10_10_rev',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_viewport_array' => {
    'binding_name' => 'GLEW_ARB_viewport_array',
    'glewImpl' => 'GLEW_ARB_viewport_array',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARB_window_pos' => {
    'binding_name' => 'GLEW_ARB_window_pos',
    'glewImpl' => 'GLEW_ARB_window_pos',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARM_mali_program_binary' => {
    'binding_name' => 'GLEW_ARM_mali_program_binary',
    'glewImpl' => 'GLEW_ARM_mali_program_binary',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARM_mali_shader_binary' => {
    'binding_name' => 'GLEW_ARM_mali_shader_binary',
    'glewImpl' => 'GLEW_ARM_mali_shader_binary',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARM_rgba8' => {
    'binding_name' => 'GLEW_ARM_rgba8',
    'glewImpl' => 'GLEW_ARM_rgba8',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARM_shader_framebuffer_fetch' => {
    'binding_name' => 'GLEW_ARM_shader_framebuffer_fetch',
    'glewImpl' => 'GLEW_ARM_shader_framebuffer_fetch',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ARM_shader_framebuffer_fetch_depth_stencil' => {
    'binding_name' => 'GLEW_ARM_shader_framebuffer_fetch_depth_stencil',
    'glewImpl' => 'GLEW_ARM_shader_framebuffer_fetch_depth_stencil',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ATIX_point_sprites' => {
    'binding_name' => 'GLEW_ATIX_point_sprites',
    'glewImpl' => 'GLEW_ATIX_point_sprites',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ATIX_texture_env_combine3' => {
    'binding_name' => 'GLEW_ATIX_texture_env_combine3',
    'glewImpl' => 'GLEW_ATIX_texture_env_combine3',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ATIX_texture_env_route' => {
    'binding_name' => 'GLEW_ATIX_texture_env_route',
    'glewImpl' => 'GLEW_ATIX_texture_env_route',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ATIX_vertex_shader_output_point_size' => {
    'binding_name' => 'GLEW_ATIX_vertex_shader_output_point_size',
    'glewImpl' => 'GLEW_ATIX_vertex_shader_output_point_size',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ATI_draw_buffers' => {
    'binding_name' => 'GLEW_ATI_draw_buffers',
    'glewImpl' => 'GLEW_ATI_draw_buffers',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ATI_element_array' => {
    'binding_name' => 'GLEW_ATI_element_array',
    'glewImpl' => 'GLEW_ATI_element_array',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ATI_envmap_bumpmap' => {
    'binding_name' => 'GLEW_ATI_envmap_bumpmap',
    'glewImpl' => 'GLEW_ATI_envmap_bumpmap',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ATI_fragment_shader' => {
    'binding_name' => 'GLEW_ATI_fragment_shader',
    'glewImpl' => 'GLEW_ATI_fragment_shader',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ATI_map_object_buffer' => {
    'binding_name' => 'GLEW_ATI_map_object_buffer',
    'glewImpl' => 'GLEW_ATI_map_object_buffer',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ATI_meminfo' => {
    'binding_name' => 'GLEW_ATI_meminfo',
    'glewImpl' => 'GLEW_ATI_meminfo',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ATI_pn_triangles' => {
    'binding_name' => 'GLEW_ATI_pn_triangles',
    'glewImpl' => 'GLEW_ATI_pn_triangles',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ATI_separate_stencil' => {
    'binding_name' => 'GLEW_ATI_separate_stencil',
    'glewImpl' => 'GLEW_ATI_separate_stencil',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ATI_shader_texture_lod' => {
    'binding_name' => 'GLEW_ATI_shader_texture_lod',
    'glewImpl' => 'GLEW_ATI_shader_texture_lod',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ATI_text_fragment_shader' => {
    'binding_name' => 'GLEW_ATI_text_fragment_shader',
    'glewImpl' => 'GLEW_ATI_text_fragment_shader',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ATI_texture_compression_3dc' => {
    'binding_name' => 'GLEW_ATI_texture_compression_3dc',
    'glewImpl' => 'GLEW_ATI_texture_compression_3dc',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ATI_texture_env_combine3' => {
    'binding_name' => 'GLEW_ATI_texture_env_combine3',
    'glewImpl' => 'GLEW_ATI_texture_env_combine3',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ATI_texture_float' => {
    'binding_name' => 'GLEW_ATI_texture_float',
    'glewImpl' => 'GLEW_ATI_texture_float',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ATI_texture_mirror_once' => {
    'binding_name' => 'GLEW_ATI_texture_mirror_once',
    'glewImpl' => 'GLEW_ATI_texture_mirror_once',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ATI_vertex_array_object' => {
    'binding_name' => 'GLEW_ATI_vertex_array_object',
    'glewImpl' => 'GLEW_ATI_vertex_array_object',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ATI_vertex_attrib_array_object' => {
    'binding_name' => 'GLEW_ATI_vertex_attrib_array_object',
    'glewImpl' => 'GLEW_ATI_vertex_attrib_array_object',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_ATI_vertex_streams' => {
    'binding_name' => 'GLEW_ATI_vertex_streams',
    'glewImpl' => 'GLEW_ATI_vertex_streams',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EGL_KHR_context_flush_control' => {
    'binding_name' => 'GLEW_EGL_KHR_context_flush_control',
    'glewImpl' => 'GLEW_EGL_KHR_context_flush_control',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EGL_NV_robustness_video_memory_purge' => {
    'binding_name' => 'GLEW_EGL_NV_robustness_video_memory_purge',
    'glewImpl' => 'GLEW_EGL_NV_robustness_video_memory_purge',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_422_pixels' => {
    'binding_name' => 'GLEW_EXT_422_pixels',
    'glewImpl' => 'GLEW_EXT_422_pixels',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_Cg_shader' => {
    'binding_name' => 'GLEW_EXT_Cg_shader',
    'glewImpl' => 'GLEW_EXT_Cg_shader',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_EGL_image_array' => {
    'binding_name' => 'GLEW_EXT_EGL_image_array',
    'glewImpl' => 'GLEW_EXT_EGL_image_array',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_YUV_target' => {
    'binding_name' => 'GLEW_EXT_YUV_target',
    'glewImpl' => 'GLEW_EXT_YUV_target',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_abgr' => {
    'binding_name' => 'GLEW_EXT_abgr',
    'glewImpl' => 'GLEW_EXT_abgr',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_base_instance' => {
    'binding_name' => 'GLEW_EXT_base_instance',
    'glewImpl' => 'GLEW_EXT_base_instance',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_bgra' => {
    'binding_name' => 'GLEW_EXT_bgra',
    'glewImpl' => 'GLEW_EXT_bgra',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_bindable_uniform' => {
    'binding_name' => 'GLEW_EXT_bindable_uniform',
    'glewImpl' => 'GLEW_EXT_bindable_uniform',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_blend_color' => {
    'binding_name' => 'GLEW_EXT_blend_color',
    'glewImpl' => 'GLEW_EXT_blend_color',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_blend_equation_separate' => {
    'binding_name' => 'GLEW_EXT_blend_equation_separate',
    'glewImpl' => 'GLEW_EXT_blend_equation_separate',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_blend_func_extended' => {
    'binding_name' => 'GLEW_EXT_blend_func_extended',
    'glewImpl' => 'GLEW_EXT_blend_func_extended',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_blend_func_separate' => {
    'binding_name' => 'GLEW_EXT_blend_func_separate',
    'glewImpl' => 'GLEW_EXT_blend_func_separate',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_blend_logic_op' => {
    'binding_name' => 'GLEW_EXT_blend_logic_op',
    'glewImpl' => 'GLEW_EXT_blend_logic_op',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_blend_minmax' => {
    'binding_name' => 'GLEW_EXT_blend_minmax',
    'glewImpl' => 'GLEW_EXT_blend_minmax',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_blend_subtract' => {
    'binding_name' => 'GLEW_EXT_blend_subtract',
    'glewImpl' => 'GLEW_EXT_blend_subtract',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_buffer_storage' => {
    'binding_name' => 'GLEW_EXT_buffer_storage',
    'glewImpl' => 'GLEW_EXT_buffer_storage',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_clear_texture' => {
    'binding_name' => 'GLEW_EXT_clear_texture',
    'glewImpl' => 'GLEW_EXT_clear_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_clip_cull_distance' => {
    'binding_name' => 'GLEW_EXT_clip_cull_distance',
    'glewImpl' => 'GLEW_EXT_clip_cull_distance',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_clip_volume_hint' => {
    'binding_name' => 'GLEW_EXT_clip_volume_hint',
    'glewImpl' => 'GLEW_EXT_clip_volume_hint',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_cmyka' => {
    'binding_name' => 'GLEW_EXT_cmyka',
    'glewImpl' => 'GLEW_EXT_cmyka',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_color_buffer_float' => {
    'binding_name' => 'GLEW_EXT_color_buffer_float',
    'glewImpl' => 'GLEW_EXT_color_buffer_float',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_color_buffer_half_float' => {
    'binding_name' => 'GLEW_EXT_color_buffer_half_float',
    'glewImpl' => 'GLEW_EXT_color_buffer_half_float',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_color_subtable' => {
    'binding_name' => 'GLEW_EXT_color_subtable',
    'glewImpl' => 'GLEW_EXT_color_subtable',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_compiled_vertex_array' => {
    'binding_name' => 'GLEW_EXT_compiled_vertex_array',
    'glewImpl' => 'GLEW_EXT_compiled_vertex_array',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_compressed_ETC1_RGB8_sub_texture' => {
    'binding_name' => 'GLEW_EXT_compressed_ETC1_RGB8_sub_texture',
    'glewImpl' => 'GLEW_EXT_compressed_ETC1_RGB8_sub_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_conservative_depth' => {
    'binding_name' => 'GLEW_EXT_conservative_depth',
    'glewImpl' => 'GLEW_EXT_conservative_depth',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_convolution' => {
    'binding_name' => 'GLEW_EXT_convolution',
    'glewImpl' => 'GLEW_EXT_convolution',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_coordinate_frame' => {
    'binding_name' => 'GLEW_EXT_coordinate_frame',
    'glewImpl' => 'GLEW_EXT_coordinate_frame',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_copy_image' => {
    'binding_name' => 'GLEW_EXT_copy_image',
    'glewImpl' => 'GLEW_EXT_copy_image',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_copy_texture' => {
    'binding_name' => 'GLEW_EXT_copy_texture',
    'glewImpl' => 'GLEW_EXT_copy_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_cull_vertex' => {
    'binding_name' => 'GLEW_EXT_cull_vertex',
    'glewImpl' => 'GLEW_EXT_cull_vertex',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_debug_label' => {
    'binding_name' => 'GLEW_EXT_debug_label',
    'glewImpl' => 'GLEW_EXT_debug_label',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_debug_marker' => {
    'binding_name' => 'GLEW_EXT_debug_marker',
    'glewImpl' => 'GLEW_EXT_debug_marker',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_depth_bounds_test' => {
    'binding_name' => 'GLEW_EXT_depth_bounds_test',
    'glewImpl' => 'GLEW_EXT_depth_bounds_test',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_direct_state_access' => {
    'binding_name' => 'GLEW_EXT_direct_state_access',
    'glewImpl' => 'GLEW_EXT_direct_state_access',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_discard_framebuffer' => {
    'binding_name' => 'GLEW_EXT_discard_framebuffer',
    'glewImpl' => 'GLEW_EXT_discard_framebuffer',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_draw_buffers' => {
    'binding_name' => 'GLEW_EXT_draw_buffers',
    'glewImpl' => 'GLEW_EXT_draw_buffers',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_draw_buffers2' => {
    'binding_name' => 'GLEW_EXT_draw_buffers2',
    'glewImpl' => 'GLEW_EXT_draw_buffers2',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_draw_buffers_indexed' => {
    'binding_name' => 'GLEW_EXT_draw_buffers_indexed',
    'glewImpl' => 'GLEW_EXT_draw_buffers_indexed',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_draw_elements_base_vertex' => {
    'binding_name' => 'GLEW_EXT_draw_elements_base_vertex',
    'glewImpl' => 'GLEW_EXT_draw_elements_base_vertex',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_draw_instanced' => {
    'binding_name' => 'GLEW_EXT_draw_instanced',
    'glewImpl' => 'GLEW_EXT_draw_instanced',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_draw_range_elements' => {
    'binding_name' => 'GLEW_EXT_draw_range_elements',
    'glewImpl' => 'GLEW_EXT_draw_range_elements',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_external_buffer' => {
    'binding_name' => 'GLEW_EXT_external_buffer',
    'glewImpl' => 'GLEW_EXT_external_buffer',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_float_blend' => {
    'binding_name' => 'GLEW_EXT_float_blend',
    'glewImpl' => 'GLEW_EXT_float_blend',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_fog_coord' => {
    'binding_name' => 'GLEW_EXT_fog_coord',
    'glewImpl' => 'GLEW_EXT_fog_coord',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_frag_depth' => {
    'binding_name' => 'GLEW_EXT_frag_depth',
    'glewImpl' => 'GLEW_EXT_frag_depth',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_fragment_lighting' => {
    'binding_name' => 'GLEW_EXT_fragment_lighting',
    'glewImpl' => 'GLEW_EXT_fragment_lighting',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_framebuffer_blit' => {
    'binding_name' => 'GLEW_EXT_framebuffer_blit',
    'glewImpl' => 'GLEW_EXT_framebuffer_blit',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_framebuffer_multisample' => {
    'binding_name' => 'GLEW_EXT_framebuffer_multisample',
    'glewImpl' => 'GLEW_EXT_framebuffer_multisample',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_framebuffer_multisample_blit_scaled' => {
    'binding_name' => 'GLEW_EXT_framebuffer_multisample_blit_scaled',
    'glewImpl' => 'GLEW_EXT_framebuffer_multisample_blit_scaled',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_framebuffer_object' => {
    'binding_name' => 'GLEW_EXT_framebuffer_object',
    'glewImpl' => 'GLEW_EXT_framebuffer_object',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_framebuffer_sRGB' => {
    'binding_name' => 'GLEW_EXT_framebuffer_sRGB',
    'glewImpl' => 'GLEW_EXT_framebuffer_sRGB',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_geometry_point_size' => {
    'binding_name' => 'GLEW_EXT_geometry_point_size',
    'glewImpl' => 'GLEW_EXT_geometry_point_size',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_geometry_shader' => {
    'binding_name' => 'GLEW_EXT_geometry_shader',
    'glewImpl' => 'GLEW_EXT_geometry_shader',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_geometry_shader4' => {
    'binding_name' => 'GLEW_EXT_geometry_shader4',
    'glewImpl' => 'GLEW_EXT_geometry_shader4',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_gpu_program_parameters' => {
    'binding_name' => 'GLEW_EXT_gpu_program_parameters',
    'glewImpl' => 'GLEW_EXT_gpu_program_parameters',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_gpu_shader4' => {
    'binding_name' => 'GLEW_EXT_gpu_shader4',
    'glewImpl' => 'GLEW_EXT_gpu_shader4',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_gpu_shader5' => {
    'binding_name' => 'GLEW_EXT_gpu_shader5',
    'glewImpl' => 'GLEW_EXT_gpu_shader5',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_histogram' => {
    'binding_name' => 'GLEW_EXT_histogram',
    'glewImpl' => 'GLEW_EXT_histogram',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_index_array_formats' => {
    'binding_name' => 'GLEW_EXT_index_array_formats',
    'glewImpl' => 'GLEW_EXT_index_array_formats',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_index_func' => {
    'binding_name' => 'GLEW_EXT_index_func',
    'glewImpl' => 'GLEW_EXT_index_func',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_index_material' => {
    'binding_name' => 'GLEW_EXT_index_material',
    'glewImpl' => 'GLEW_EXT_index_material',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_index_texture' => {
    'binding_name' => 'GLEW_EXT_index_texture',
    'glewImpl' => 'GLEW_EXT_index_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_instanced_arrays' => {
    'binding_name' => 'GLEW_EXT_instanced_arrays',
    'glewImpl' => 'GLEW_EXT_instanced_arrays',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_light_texture' => {
    'binding_name' => 'GLEW_EXT_light_texture',
    'glewImpl' => 'GLEW_EXT_light_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_map_buffer_range' => {
    'binding_name' => 'GLEW_EXT_map_buffer_range',
    'glewImpl' => 'GLEW_EXT_map_buffer_range',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_memory_object' => {
    'binding_name' => 'GLEW_EXT_memory_object',
    'glewImpl' => 'GLEW_EXT_memory_object',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_memory_object_fd' => {
    'binding_name' => 'GLEW_EXT_memory_object_fd',
    'glewImpl' => 'GLEW_EXT_memory_object_fd',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_memory_object_win32' => {
    'binding_name' => 'GLEW_EXT_memory_object_win32',
    'glewImpl' => 'GLEW_EXT_memory_object_win32',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_misc_attribute' => {
    'binding_name' => 'GLEW_EXT_misc_attribute',
    'glewImpl' => 'GLEW_EXT_misc_attribute',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_multi_draw_arrays' => {
    'binding_name' => 'GLEW_EXT_multi_draw_arrays',
    'glewImpl' => 'GLEW_EXT_multi_draw_arrays',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_multi_draw_indirect' => {
    'binding_name' => 'GLEW_EXT_multi_draw_indirect',
    'glewImpl' => 'GLEW_EXT_multi_draw_indirect',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_multiple_textures' => {
    'binding_name' => 'GLEW_EXT_multiple_textures',
    'glewImpl' => 'GLEW_EXT_multiple_textures',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_multisample' => {
    'binding_name' => 'GLEW_EXT_multisample',
    'glewImpl' => 'GLEW_EXT_multisample',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_multisample_compatibility' => {
    'binding_name' => 'GLEW_EXT_multisample_compatibility',
    'glewImpl' => 'GLEW_EXT_multisample_compatibility',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_multisampled_render_to_texture' => {
    'binding_name' => 'GLEW_EXT_multisampled_render_to_texture',
    'glewImpl' => 'GLEW_EXT_multisampled_render_to_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_multisampled_render_to_texture2' => {
    'binding_name' => 'GLEW_EXT_multisampled_render_to_texture2',
    'glewImpl' => 'GLEW_EXT_multisampled_render_to_texture2',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_multiview_draw_buffers' => {
    'binding_name' => 'GLEW_EXT_multiview_draw_buffers',
    'glewImpl' => 'GLEW_EXT_multiview_draw_buffers',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_packed_depth_stencil' => {
    'binding_name' => 'GLEW_EXT_packed_depth_stencil',
    'glewImpl' => 'GLEW_EXT_packed_depth_stencil',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_packed_float' => {
    'binding_name' => 'GLEW_EXT_packed_float',
    'glewImpl' => 'GLEW_EXT_packed_float',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_packed_pixels' => {
    'binding_name' => 'GLEW_EXT_packed_pixels',
    'glewImpl' => 'GLEW_EXT_packed_pixels',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_paletted_texture' => {
    'binding_name' => 'GLEW_EXT_paletted_texture',
    'glewImpl' => 'GLEW_EXT_paletted_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_pixel_buffer_object' => {
    'binding_name' => 'GLEW_EXT_pixel_buffer_object',
    'glewImpl' => 'GLEW_EXT_pixel_buffer_object',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_pixel_transform' => {
    'binding_name' => 'GLEW_EXT_pixel_transform',
    'glewImpl' => 'GLEW_EXT_pixel_transform',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_pixel_transform_color_table' => {
    'binding_name' => 'GLEW_EXT_pixel_transform_color_table',
    'glewImpl' => 'GLEW_EXT_pixel_transform_color_table',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_point_parameters' => {
    'binding_name' => 'GLEW_EXT_point_parameters',
    'glewImpl' => 'GLEW_EXT_point_parameters',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_polygon_offset' => {
    'binding_name' => 'GLEW_EXT_polygon_offset',
    'glewImpl' => 'GLEW_EXT_polygon_offset',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_polygon_offset_clamp' => {
    'binding_name' => 'GLEW_EXT_polygon_offset_clamp',
    'glewImpl' => 'GLEW_EXT_polygon_offset_clamp',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_post_depth_coverage' => {
    'binding_name' => 'GLEW_EXT_post_depth_coverage',
    'glewImpl' => 'GLEW_EXT_post_depth_coverage',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_provoking_vertex' => {
    'binding_name' => 'GLEW_EXT_provoking_vertex',
    'glewImpl' => 'GLEW_EXT_provoking_vertex',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_pvrtc_sRGB' => {
    'binding_name' => 'GLEW_EXT_pvrtc_sRGB',
    'glewImpl' => 'GLEW_EXT_pvrtc_sRGB',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_raster_multisample' => {
    'binding_name' => 'GLEW_EXT_raster_multisample',
    'glewImpl' => 'GLEW_EXT_raster_multisample',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_read_format_bgra' => {
    'binding_name' => 'GLEW_EXT_read_format_bgra',
    'glewImpl' => 'GLEW_EXT_read_format_bgra',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_render_snorm' => {
    'binding_name' => 'GLEW_EXT_render_snorm',
    'glewImpl' => 'GLEW_EXT_render_snorm',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_rescale_normal' => {
    'binding_name' => 'GLEW_EXT_rescale_normal',
    'glewImpl' => 'GLEW_EXT_rescale_normal',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_sRGB' => {
    'binding_name' => 'GLEW_EXT_sRGB',
    'glewImpl' => 'GLEW_EXT_sRGB',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_sRGB_write_control' => {
    'binding_name' => 'GLEW_EXT_sRGB_write_control',
    'glewImpl' => 'GLEW_EXT_sRGB_write_control',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_scene_marker' => {
    'binding_name' => 'GLEW_EXT_scene_marker',
    'glewImpl' => 'GLEW_EXT_scene_marker',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_secondary_color' => {
    'binding_name' => 'GLEW_EXT_secondary_color',
    'glewImpl' => 'GLEW_EXT_secondary_color',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_semaphore' => {
    'binding_name' => 'GLEW_EXT_semaphore',
    'glewImpl' => 'GLEW_EXT_semaphore',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_semaphore_fd' => {
    'binding_name' => 'GLEW_EXT_semaphore_fd',
    'glewImpl' => 'GLEW_EXT_semaphore_fd',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_semaphore_win32' => {
    'binding_name' => 'GLEW_EXT_semaphore_win32',
    'glewImpl' => 'GLEW_EXT_semaphore_win32',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_separate_shader_objects' => {
    'binding_name' => 'GLEW_EXT_separate_shader_objects',
    'glewImpl' => 'GLEW_EXT_separate_shader_objects',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_separate_specular_color' => {
    'binding_name' => 'GLEW_EXT_separate_specular_color',
    'glewImpl' => 'GLEW_EXT_separate_specular_color',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_shader_framebuffer_fetch' => {
    'binding_name' => 'GLEW_EXT_shader_framebuffer_fetch',
    'glewImpl' => 'GLEW_EXT_shader_framebuffer_fetch',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_shader_group_vote' => {
    'binding_name' => 'GLEW_EXT_shader_group_vote',
    'glewImpl' => 'GLEW_EXT_shader_group_vote',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_shader_image_load_formatted' => {
    'binding_name' => 'GLEW_EXT_shader_image_load_formatted',
    'glewImpl' => 'GLEW_EXT_shader_image_load_formatted',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_shader_image_load_store' => {
    'binding_name' => 'GLEW_EXT_shader_image_load_store',
    'glewImpl' => 'GLEW_EXT_shader_image_load_store',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_shader_implicit_conversions' => {
    'binding_name' => 'GLEW_EXT_shader_implicit_conversions',
    'glewImpl' => 'GLEW_EXT_shader_implicit_conversions',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_shader_integer_mix' => {
    'binding_name' => 'GLEW_EXT_shader_integer_mix',
    'glewImpl' => 'GLEW_EXT_shader_integer_mix',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_shader_io_blocks' => {
    'binding_name' => 'GLEW_EXT_shader_io_blocks',
    'glewImpl' => 'GLEW_EXT_shader_io_blocks',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_shader_non_constant_global_initializers' => {
    'binding_name' => 'GLEW_EXT_shader_non_constant_global_initializers',
    'glewImpl' => 'GLEW_EXT_shader_non_constant_global_initializers',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_shader_pixel_local_storage' => {
    'binding_name' => 'GLEW_EXT_shader_pixel_local_storage',
    'glewImpl' => 'GLEW_EXT_shader_pixel_local_storage',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_shader_pixel_local_storage2' => {
    'binding_name' => 'GLEW_EXT_shader_pixel_local_storage2',
    'glewImpl' => 'GLEW_EXT_shader_pixel_local_storage2',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_shader_texture_lod' => {
    'binding_name' => 'GLEW_EXT_shader_texture_lod',
    'glewImpl' => 'GLEW_EXT_shader_texture_lod',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_shadow_funcs' => {
    'binding_name' => 'GLEW_EXT_shadow_funcs',
    'glewImpl' => 'GLEW_EXT_shadow_funcs',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_shadow_samplers' => {
    'binding_name' => 'GLEW_EXT_shadow_samplers',
    'glewImpl' => 'GLEW_EXT_shadow_samplers',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_shared_texture_palette' => {
    'binding_name' => 'GLEW_EXT_shared_texture_palette',
    'glewImpl' => 'GLEW_EXT_shared_texture_palette',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_sparse_texture' => {
    'binding_name' => 'GLEW_EXT_sparse_texture',
    'glewImpl' => 'GLEW_EXT_sparse_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_sparse_texture2' => {
    'binding_name' => 'GLEW_EXT_sparse_texture2',
    'glewImpl' => 'GLEW_EXT_sparse_texture2',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_stencil_clear_tag' => {
    'binding_name' => 'GLEW_EXT_stencil_clear_tag',
    'glewImpl' => 'GLEW_EXT_stencil_clear_tag',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_stencil_two_side' => {
    'binding_name' => 'GLEW_EXT_stencil_two_side',
    'glewImpl' => 'GLEW_EXT_stencil_two_side',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_stencil_wrap' => {
    'binding_name' => 'GLEW_EXT_stencil_wrap',
    'glewImpl' => 'GLEW_EXT_stencil_wrap',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_subtexture' => {
    'binding_name' => 'GLEW_EXT_subtexture',
    'glewImpl' => 'GLEW_EXT_subtexture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture' => {
    'binding_name' => 'GLEW_EXT_texture',
    'glewImpl' => 'GLEW_EXT_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture3D' => {
    'binding_name' => 'GLEW_EXT_texture3D',
    'glewImpl' => 'GLEW_EXT_texture3D',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_array' => {
    'binding_name' => 'GLEW_EXT_texture_array',
    'glewImpl' => 'GLEW_EXT_texture_array',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_buffer_object' => {
    'binding_name' => 'GLEW_EXT_texture_buffer_object',
    'glewImpl' => 'GLEW_EXT_texture_buffer_object',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_compression_astc_decode_mode' => {
    'binding_name' => 'GLEW_EXT_texture_compression_astc_decode_mode',
    'glewImpl' => 'GLEW_EXT_texture_compression_astc_decode_mode',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_compression_astc_decode_mode_rgb9e5' => {
    'binding_name' => 'GLEW_EXT_texture_compression_astc_decode_mode_rgb9e5',
    'glewImpl' => 'GLEW_EXT_texture_compression_astc_decode_mode_rgb9e5',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_compression_bptc' => {
    'binding_name' => 'GLEW_EXT_texture_compression_bptc',
    'glewImpl' => 'GLEW_EXT_texture_compression_bptc',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_compression_dxt1' => {
    'binding_name' => 'GLEW_EXT_texture_compression_dxt1',
    'glewImpl' => 'GLEW_EXT_texture_compression_dxt1',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_compression_latc' => {
    'binding_name' => 'GLEW_EXT_texture_compression_latc',
    'glewImpl' => 'GLEW_EXT_texture_compression_latc',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_compression_rgtc' => {
    'binding_name' => 'GLEW_EXT_texture_compression_rgtc',
    'glewImpl' => 'GLEW_EXT_texture_compression_rgtc',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_compression_s3tc' => {
    'binding_name' => 'GLEW_EXT_texture_compression_s3tc',
    'glewImpl' => 'GLEW_EXT_texture_compression_s3tc',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_cube_map' => {
    'binding_name' => 'GLEW_EXT_texture_cube_map',
    'glewImpl' => 'GLEW_EXT_texture_cube_map',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_cube_map_array' => {
    'binding_name' => 'GLEW_EXT_texture_cube_map_array',
    'glewImpl' => 'GLEW_EXT_texture_cube_map_array',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_edge_clamp' => {
    'binding_name' => 'GLEW_EXT_texture_edge_clamp',
    'glewImpl' => 'GLEW_EXT_texture_edge_clamp',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_env' => {
    'binding_name' => 'GLEW_EXT_texture_env',
    'glewImpl' => 'GLEW_EXT_texture_env',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_env_add' => {
    'binding_name' => 'GLEW_EXT_texture_env_add',
    'glewImpl' => 'GLEW_EXT_texture_env_add',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_env_combine' => {
    'binding_name' => 'GLEW_EXT_texture_env_combine',
    'glewImpl' => 'GLEW_EXT_texture_env_combine',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_env_dot3' => {
    'binding_name' => 'GLEW_EXT_texture_env_dot3',
    'glewImpl' => 'GLEW_EXT_texture_env_dot3',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_filter_anisotropic' => {
    'binding_name' => 'GLEW_EXT_texture_filter_anisotropic',
    'glewImpl' => 'GLEW_EXT_texture_filter_anisotropic',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_filter_minmax' => {
    'binding_name' => 'GLEW_EXT_texture_filter_minmax',
    'glewImpl' => 'GLEW_EXT_texture_filter_minmax',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_format_BGRA8888' => {
    'binding_name' => 'GLEW_EXT_texture_format_BGRA8888',
    'glewImpl' => 'GLEW_EXT_texture_format_BGRA8888',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_integer' => {
    'binding_name' => 'GLEW_EXT_texture_integer',
    'glewImpl' => 'GLEW_EXT_texture_integer',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_lod_bias' => {
    'binding_name' => 'GLEW_EXT_texture_lod_bias',
    'glewImpl' => 'GLEW_EXT_texture_lod_bias',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_mirror_clamp' => {
    'binding_name' => 'GLEW_EXT_texture_mirror_clamp',
    'glewImpl' => 'GLEW_EXT_texture_mirror_clamp',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_norm16' => {
    'binding_name' => 'GLEW_EXT_texture_norm16',
    'glewImpl' => 'GLEW_EXT_texture_norm16',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_object' => {
    'binding_name' => 'GLEW_EXT_texture_object',
    'glewImpl' => 'GLEW_EXT_texture_object',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_perturb_normal' => {
    'binding_name' => 'GLEW_EXT_texture_perturb_normal',
    'glewImpl' => 'GLEW_EXT_texture_perturb_normal',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_rectangle' => {
    'binding_name' => 'GLEW_EXT_texture_rectangle',
    'glewImpl' => 'GLEW_EXT_texture_rectangle',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_rg' => {
    'binding_name' => 'GLEW_EXT_texture_rg',
    'glewImpl' => 'GLEW_EXT_texture_rg',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_sRGB' => {
    'binding_name' => 'GLEW_EXT_texture_sRGB',
    'glewImpl' => 'GLEW_EXT_texture_sRGB',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_sRGB_R8' => {
    'binding_name' => 'GLEW_EXT_texture_sRGB_R8',
    'glewImpl' => 'GLEW_EXT_texture_sRGB_R8',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_sRGB_RG8' => {
    'binding_name' => 'GLEW_EXT_texture_sRGB_RG8',
    'glewImpl' => 'GLEW_EXT_texture_sRGB_RG8',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_sRGB_decode' => {
    'binding_name' => 'GLEW_EXT_texture_sRGB_decode',
    'glewImpl' => 'GLEW_EXT_texture_sRGB_decode',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_shared_exponent' => {
    'binding_name' => 'GLEW_EXT_texture_shared_exponent',
    'glewImpl' => 'GLEW_EXT_texture_shared_exponent',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_snorm' => {
    'binding_name' => 'GLEW_EXT_texture_snorm',
    'glewImpl' => 'GLEW_EXT_texture_snorm',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_storage' => {
    'binding_name' => 'GLEW_EXT_texture_storage',
    'glewImpl' => 'GLEW_EXT_texture_storage',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_swizzle' => {
    'binding_name' => 'GLEW_EXT_texture_swizzle',
    'glewImpl' => 'GLEW_EXT_texture_swizzle',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_type_2_10_10_10_REV' => {
    'binding_name' => 'GLEW_EXT_texture_type_2_10_10_10_REV',
    'glewImpl' => 'GLEW_EXT_texture_type_2_10_10_10_REV',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_texture_view' => {
    'binding_name' => 'GLEW_EXT_texture_view',
    'glewImpl' => 'GLEW_EXT_texture_view',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_timer_query' => {
    'binding_name' => 'GLEW_EXT_timer_query',
    'glewImpl' => 'GLEW_EXT_timer_query',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_transform_feedback' => {
    'binding_name' => 'GLEW_EXT_transform_feedback',
    'glewImpl' => 'GLEW_EXT_transform_feedback',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_unpack_subimage' => {
    'binding_name' => 'GLEW_EXT_unpack_subimage',
    'glewImpl' => 'GLEW_EXT_unpack_subimage',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_vertex_array' => {
    'binding_name' => 'GLEW_EXT_vertex_array',
    'glewImpl' => 'GLEW_EXT_vertex_array',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_vertex_array_bgra' => {
    'binding_name' => 'GLEW_EXT_vertex_array_bgra',
    'glewImpl' => 'GLEW_EXT_vertex_array_bgra',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_vertex_array_setXXX' => {
    'binding_name' => 'GLEW_EXT_vertex_array_setXXX',
    'glewImpl' => 'GLEW_EXT_vertex_array_setXXX',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_vertex_attrib_64bit' => {
    'binding_name' => 'GLEW_EXT_vertex_attrib_64bit',
    'glewImpl' => 'GLEW_EXT_vertex_attrib_64bit',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_vertex_shader' => {
    'binding_name' => 'GLEW_EXT_vertex_shader',
    'glewImpl' => 'GLEW_EXT_vertex_shader',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_vertex_weighting' => {
    'binding_name' => 'GLEW_EXT_vertex_weighting',
    'glewImpl' => 'GLEW_EXT_vertex_weighting',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_win32_keyed_mutex' => {
    'binding_name' => 'GLEW_EXT_win32_keyed_mutex',
    'glewImpl' => 'GLEW_EXT_win32_keyed_mutex',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_window_rectangles' => {
    'binding_name' => 'GLEW_EXT_window_rectangles',
    'glewImpl' => 'GLEW_EXT_window_rectangles',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_EXT_x11_sync_object' => {
    'binding_name' => 'GLEW_EXT_x11_sync_object',
    'glewImpl' => 'GLEW_EXT_x11_sync_object',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_GREMEDY_frame_terminator' => {
    'binding_name' => 'GLEW_GREMEDY_frame_terminator',
    'glewImpl' => 'GLEW_GREMEDY_frame_terminator',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_GREMEDY_string_marker' => {
    'binding_name' => 'GLEW_GREMEDY_string_marker',
    'glewImpl' => 'GLEW_GREMEDY_string_marker',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_HP_convolution_border_modes' => {
    'binding_name' => 'GLEW_HP_convolution_border_modes',
    'glewImpl' => 'GLEW_HP_convolution_border_modes',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_HP_image_transform' => {
    'binding_name' => 'GLEW_HP_image_transform',
    'glewImpl' => 'GLEW_HP_image_transform',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_HP_occlusion_test' => {
    'binding_name' => 'GLEW_HP_occlusion_test',
    'glewImpl' => 'GLEW_HP_occlusion_test',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_HP_texture_lighting' => {
    'binding_name' => 'GLEW_HP_texture_lighting',
    'glewImpl' => 'GLEW_HP_texture_lighting',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_IBM_cull_vertex' => {
    'binding_name' => 'GLEW_IBM_cull_vertex',
    'glewImpl' => 'GLEW_IBM_cull_vertex',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_IBM_multimode_draw_arrays' => {
    'binding_name' => 'GLEW_IBM_multimode_draw_arrays',
    'glewImpl' => 'GLEW_IBM_multimode_draw_arrays',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_IBM_rasterpos_clip' => {
    'binding_name' => 'GLEW_IBM_rasterpos_clip',
    'glewImpl' => 'GLEW_IBM_rasterpos_clip',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_IBM_static_data' => {
    'binding_name' => 'GLEW_IBM_static_data',
    'glewImpl' => 'GLEW_IBM_static_data',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_IBM_texture_mirrored_repeat' => {
    'binding_name' => 'GLEW_IBM_texture_mirrored_repeat',
    'glewImpl' => 'GLEW_IBM_texture_mirrored_repeat',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_IBM_vertex_array_lists' => {
    'binding_name' => 'GLEW_IBM_vertex_array_lists',
    'glewImpl' => 'GLEW_IBM_vertex_array_lists',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_INGR_color_clamp' => {
    'binding_name' => 'GLEW_INGR_color_clamp',
    'glewImpl' => 'GLEW_INGR_color_clamp',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_INGR_interlace_read' => {
    'binding_name' => 'GLEW_INGR_interlace_read',
    'glewImpl' => 'GLEW_INGR_interlace_read',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_INTEL_conservative_rasterization' => {
    'binding_name' => 'GLEW_INTEL_conservative_rasterization',
    'glewImpl' => 'GLEW_INTEL_conservative_rasterization',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_INTEL_fragment_shader_ordering' => {
    'binding_name' => 'GLEW_INTEL_fragment_shader_ordering',
    'glewImpl' => 'GLEW_INTEL_fragment_shader_ordering',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_INTEL_framebuffer_CMAA' => {
    'binding_name' => 'GLEW_INTEL_framebuffer_CMAA',
    'glewImpl' => 'GLEW_INTEL_framebuffer_CMAA',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_INTEL_map_texture' => {
    'binding_name' => 'GLEW_INTEL_map_texture',
    'glewImpl' => 'GLEW_INTEL_map_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_INTEL_parallel_arrays' => {
    'binding_name' => 'GLEW_INTEL_parallel_arrays',
    'glewImpl' => 'GLEW_INTEL_parallel_arrays',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_INTEL_performance_query' => {
    'binding_name' => 'GLEW_INTEL_performance_query',
    'glewImpl' => 'GLEW_INTEL_performance_query',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_INTEL_texture_scissor' => {
    'binding_name' => 'GLEW_INTEL_texture_scissor',
    'glewImpl' => 'GLEW_INTEL_texture_scissor',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_KHR_blend_equation_advanced' => {
    'binding_name' => 'GLEW_KHR_blend_equation_advanced',
    'glewImpl' => 'GLEW_KHR_blend_equation_advanced',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_KHR_blend_equation_advanced_coherent' => {
    'binding_name' => 'GLEW_KHR_blend_equation_advanced_coherent',
    'glewImpl' => 'GLEW_KHR_blend_equation_advanced_coherent',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_KHR_context_flush_control' => {
    'binding_name' => 'GLEW_KHR_context_flush_control',
    'glewImpl' => 'GLEW_KHR_context_flush_control',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_KHR_debug' => {
    'binding_name' => 'GLEW_KHR_debug',
    'glewImpl' => 'GLEW_KHR_debug',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_KHR_no_error' => {
    'binding_name' => 'GLEW_KHR_no_error',
    'glewImpl' => 'GLEW_KHR_no_error',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_KHR_parallel_shader_compile' => {
    'binding_name' => 'GLEW_KHR_parallel_shader_compile',
    'glewImpl' => 'GLEW_KHR_parallel_shader_compile',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_KHR_robust_buffer_access_behavior' => {
    'binding_name' => 'GLEW_KHR_robust_buffer_access_behavior',
    'glewImpl' => 'GLEW_KHR_robust_buffer_access_behavior',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_KHR_robustness' => {
    'binding_name' => 'GLEW_KHR_robustness',
    'glewImpl' => 'GLEW_KHR_robustness',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_KHR_texture_compression_astc_hdr' => {
    'binding_name' => 'GLEW_KHR_texture_compression_astc_hdr',
    'glewImpl' => 'GLEW_KHR_texture_compression_astc_hdr',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_KHR_texture_compression_astc_ldr' => {
    'binding_name' => 'GLEW_KHR_texture_compression_astc_ldr',
    'glewImpl' => 'GLEW_KHR_texture_compression_astc_ldr',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_KHR_texture_compression_astc_sliced_3d' => {
    'binding_name' => 'GLEW_KHR_texture_compression_astc_sliced_3d',
    'glewImpl' => 'GLEW_KHR_texture_compression_astc_sliced_3d',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_KTX_buffer_region' => {
    'binding_name' => 'GLEW_KTX_buffer_region',
    'glewImpl' => 'GLEW_KTX_buffer_region',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_MESAX_texture_stack' => {
    'binding_name' => 'GLEW_MESAX_texture_stack',
    'glewImpl' => 'GLEW_MESAX_texture_stack',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_MESA_pack_invert' => {
    'binding_name' => 'GLEW_MESA_pack_invert',
    'glewImpl' => 'GLEW_MESA_pack_invert',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_MESA_resize_buffers' => {
    'binding_name' => 'GLEW_MESA_resize_buffers',
    'glewImpl' => 'GLEW_MESA_resize_buffers',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_MESA_shader_integer_functions' => {
    'binding_name' => 'GLEW_MESA_shader_integer_functions',
    'glewImpl' => 'GLEW_MESA_shader_integer_functions',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_MESA_window_pos' => {
    'binding_name' => 'GLEW_MESA_window_pos',
    'glewImpl' => 'GLEW_MESA_window_pos',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_MESA_ycbcr_texture' => {
    'binding_name' => 'GLEW_MESA_ycbcr_texture',
    'glewImpl' => 'GLEW_MESA_ycbcr_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NVX_blend_equation_advanced_multi_draw_buffers' => {
    'binding_name' => 'GLEW_NVX_blend_equation_advanced_multi_draw_buffers',
    'glewImpl' => 'GLEW_NVX_blend_equation_advanced_multi_draw_buffers',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NVX_conditional_render' => {
    'binding_name' => 'GLEW_NVX_conditional_render',
    'glewImpl' => 'GLEW_NVX_conditional_render',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NVX_gpu_memory_info' => {
    'binding_name' => 'GLEW_NVX_gpu_memory_info',
    'glewImpl' => 'GLEW_NVX_gpu_memory_info',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NVX_linked_gpu_multicast' => {
    'binding_name' => 'GLEW_NVX_linked_gpu_multicast',
    'glewImpl' => 'GLEW_NVX_linked_gpu_multicast',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_3dvision_settings' => {
    'binding_name' => 'GLEW_NV_3dvision_settings',
    'glewImpl' => 'GLEW_NV_3dvision_settings',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_EGL_stream_consumer_external' => {
    'binding_name' => 'GLEW_NV_EGL_stream_consumer_external',
    'glewImpl' => 'GLEW_NV_EGL_stream_consumer_external',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_alpha_to_coverage_dither_control' => {
    'binding_name' => 'GLEW_NV_alpha_to_coverage_dither_control',
    'glewImpl' => 'GLEW_NV_alpha_to_coverage_dither_control',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_bgr' => {
    'binding_name' => 'GLEW_NV_bgr',
    'glewImpl' => 'GLEW_NV_bgr',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_bindless_multi_draw_indirect' => {
    'binding_name' => 'GLEW_NV_bindless_multi_draw_indirect',
    'glewImpl' => 'GLEW_NV_bindless_multi_draw_indirect',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_bindless_multi_draw_indirect_count' => {
    'binding_name' => 'GLEW_NV_bindless_multi_draw_indirect_count',
    'glewImpl' => 'GLEW_NV_bindless_multi_draw_indirect_count',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_bindless_texture' => {
    'binding_name' => 'GLEW_NV_bindless_texture',
    'glewImpl' => 'GLEW_NV_bindless_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_blend_equation_advanced' => {
    'binding_name' => 'GLEW_NV_blend_equation_advanced',
    'glewImpl' => 'GLEW_NV_blend_equation_advanced',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_blend_equation_advanced_coherent' => {
    'binding_name' => 'GLEW_NV_blend_equation_advanced_coherent',
    'glewImpl' => 'GLEW_NV_blend_equation_advanced_coherent',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_blend_minmax_factor' => {
    'binding_name' => 'GLEW_NV_blend_minmax_factor',
    'glewImpl' => 'GLEW_NV_blend_minmax_factor',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_blend_square' => {
    'binding_name' => 'GLEW_NV_blend_square',
    'glewImpl' => 'GLEW_NV_blend_square',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_clip_space_w_scaling' => {
    'binding_name' => 'GLEW_NV_clip_space_w_scaling',
    'glewImpl' => 'GLEW_NV_clip_space_w_scaling',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_command_list' => {
    'binding_name' => 'GLEW_NV_command_list',
    'glewImpl' => 'GLEW_NV_command_list',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_compute_program5' => {
    'binding_name' => 'GLEW_NV_compute_program5',
    'glewImpl' => 'GLEW_NV_compute_program5',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_conditional_render' => {
    'binding_name' => 'GLEW_NV_conditional_render',
    'glewImpl' => 'GLEW_NV_conditional_render',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_conservative_raster' => {
    'binding_name' => 'GLEW_NV_conservative_raster',
    'glewImpl' => 'GLEW_NV_conservative_raster',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_conservative_raster_dilate' => {
    'binding_name' => 'GLEW_NV_conservative_raster_dilate',
    'glewImpl' => 'GLEW_NV_conservative_raster_dilate',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_conservative_raster_pre_snap_triangles' => {
    'binding_name' => 'GLEW_NV_conservative_raster_pre_snap_triangles',
    'glewImpl' => 'GLEW_NV_conservative_raster_pre_snap_triangles',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_copy_buffer' => {
    'binding_name' => 'GLEW_NV_copy_buffer',
    'glewImpl' => 'GLEW_NV_copy_buffer',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_copy_depth_to_color' => {
    'binding_name' => 'GLEW_NV_copy_depth_to_color',
    'glewImpl' => 'GLEW_NV_copy_depth_to_color',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_copy_image' => {
    'binding_name' => 'GLEW_NV_copy_image',
    'glewImpl' => 'GLEW_NV_copy_image',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_deep_texture3D' => {
    'binding_name' => 'GLEW_NV_deep_texture3D',
    'glewImpl' => 'GLEW_NV_deep_texture3D',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_depth_buffer_float' => {
    'binding_name' => 'GLEW_NV_depth_buffer_float',
    'glewImpl' => 'GLEW_NV_depth_buffer_float',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_depth_clamp' => {
    'binding_name' => 'GLEW_NV_depth_clamp',
    'glewImpl' => 'GLEW_NV_depth_clamp',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_depth_range_unclamped' => {
    'binding_name' => 'GLEW_NV_depth_range_unclamped',
    'glewImpl' => 'GLEW_NV_depth_range_unclamped',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_draw_buffers' => {
    'binding_name' => 'GLEW_NV_draw_buffers',
    'glewImpl' => 'GLEW_NV_draw_buffers',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_draw_instanced' => {
    'binding_name' => 'GLEW_NV_draw_instanced',
    'glewImpl' => 'GLEW_NV_draw_instanced',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_draw_texture' => {
    'binding_name' => 'GLEW_NV_draw_texture',
    'glewImpl' => 'GLEW_NV_draw_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_draw_vulkan_image' => {
    'binding_name' => 'GLEW_NV_draw_vulkan_image',
    'glewImpl' => 'GLEW_NV_draw_vulkan_image',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_evaluators' => {
    'binding_name' => 'GLEW_NV_evaluators',
    'glewImpl' => 'GLEW_NV_evaluators',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_explicit_attrib_location' => {
    'binding_name' => 'GLEW_NV_explicit_attrib_location',
    'glewImpl' => 'GLEW_NV_explicit_attrib_location',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_explicit_multisample' => {
    'binding_name' => 'GLEW_NV_explicit_multisample',
    'glewImpl' => 'GLEW_NV_explicit_multisample',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_fbo_color_attachments' => {
    'binding_name' => 'GLEW_NV_fbo_color_attachments',
    'glewImpl' => 'GLEW_NV_fbo_color_attachments',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_fence' => {
    'binding_name' => 'GLEW_NV_fence',
    'glewImpl' => 'GLEW_NV_fence',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_fill_rectangle' => {
    'binding_name' => 'GLEW_NV_fill_rectangle',
    'glewImpl' => 'GLEW_NV_fill_rectangle',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_float_buffer' => {
    'binding_name' => 'GLEW_NV_float_buffer',
    'glewImpl' => 'GLEW_NV_float_buffer',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_fog_distance' => {
    'binding_name' => 'GLEW_NV_fog_distance',
    'glewImpl' => 'GLEW_NV_fog_distance',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_fragment_coverage_to_color' => {
    'binding_name' => 'GLEW_NV_fragment_coverage_to_color',
    'glewImpl' => 'GLEW_NV_fragment_coverage_to_color',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_fragment_program' => {
    'binding_name' => 'GLEW_NV_fragment_program',
    'glewImpl' => 'GLEW_NV_fragment_program',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_fragment_program2' => {
    'binding_name' => 'GLEW_NV_fragment_program2',
    'glewImpl' => 'GLEW_NV_fragment_program2',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_fragment_program4' => {
    'binding_name' => 'GLEW_NV_fragment_program4',
    'glewImpl' => 'GLEW_NV_fragment_program4',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_fragment_program_option' => {
    'binding_name' => 'GLEW_NV_fragment_program_option',
    'glewImpl' => 'GLEW_NV_fragment_program_option',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_fragment_shader_interlock' => {
    'binding_name' => 'GLEW_NV_fragment_shader_interlock',
    'glewImpl' => 'GLEW_NV_fragment_shader_interlock',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_framebuffer_blit' => {
    'binding_name' => 'GLEW_NV_framebuffer_blit',
    'glewImpl' => 'GLEW_NV_framebuffer_blit',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_framebuffer_mixed_samples' => {
    'binding_name' => 'GLEW_NV_framebuffer_mixed_samples',
    'glewImpl' => 'GLEW_NV_framebuffer_mixed_samples',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_framebuffer_multisample' => {
    'binding_name' => 'GLEW_NV_framebuffer_multisample',
    'glewImpl' => 'GLEW_NV_framebuffer_multisample',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_framebuffer_multisample_coverage' => {
    'binding_name' => 'GLEW_NV_framebuffer_multisample_coverage',
    'glewImpl' => 'GLEW_NV_framebuffer_multisample_coverage',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_generate_mipmap_sRGB' => {
    'binding_name' => 'GLEW_NV_generate_mipmap_sRGB',
    'glewImpl' => 'GLEW_NV_generate_mipmap_sRGB',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_geometry_program4' => {
    'binding_name' => 'GLEW_NV_geometry_program4',
    'glewImpl' => 'GLEW_NV_geometry_program4',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_geometry_shader4' => {
    'binding_name' => 'GLEW_NV_geometry_shader4',
    'glewImpl' => 'GLEW_NV_geometry_shader4',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_geometry_shader_passthrough' => {
    'binding_name' => 'GLEW_NV_geometry_shader_passthrough',
    'glewImpl' => 'GLEW_NV_geometry_shader_passthrough',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_gpu_multicast' => {
    'binding_name' => 'GLEW_NV_gpu_multicast',
    'glewImpl' => 'GLEW_NV_gpu_multicast',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_gpu_program4' => {
    'binding_name' => 'GLEW_NV_gpu_program4',
    'glewImpl' => 'GLEW_NV_gpu_program4',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_gpu_program5' => {
    'binding_name' => 'GLEW_NV_gpu_program5',
    'glewImpl' => 'GLEW_NV_gpu_program5',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_gpu_program5_mem_extended' => {
    'binding_name' => 'GLEW_NV_gpu_program5_mem_extended',
    'glewImpl' => 'GLEW_NV_gpu_program5_mem_extended',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_gpu_program_fp64' => {
    'binding_name' => 'GLEW_NV_gpu_program_fp64',
    'glewImpl' => 'GLEW_NV_gpu_program_fp64',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_gpu_shader5' => {
    'binding_name' => 'GLEW_NV_gpu_shader5',
    'glewImpl' => 'GLEW_NV_gpu_shader5',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_half_float' => {
    'binding_name' => 'GLEW_NV_half_float',
    'glewImpl' => 'GLEW_NV_half_float',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_image_formats' => {
    'binding_name' => 'GLEW_NV_image_formats',
    'glewImpl' => 'GLEW_NV_image_formats',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_instanced_arrays' => {
    'binding_name' => 'GLEW_NV_instanced_arrays',
    'glewImpl' => 'GLEW_NV_instanced_arrays',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_internalformat_sample_query' => {
    'binding_name' => 'GLEW_NV_internalformat_sample_query',
    'glewImpl' => 'GLEW_NV_internalformat_sample_query',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_light_max_exponent' => {
    'binding_name' => 'GLEW_NV_light_max_exponent',
    'glewImpl' => 'GLEW_NV_light_max_exponent',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_multisample_coverage' => {
    'binding_name' => 'GLEW_NV_multisample_coverage',
    'glewImpl' => 'GLEW_NV_multisample_coverage',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_multisample_filter_hint' => {
    'binding_name' => 'GLEW_NV_multisample_filter_hint',
    'glewImpl' => 'GLEW_NV_multisample_filter_hint',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_non_square_matrices' => {
    'binding_name' => 'GLEW_NV_non_square_matrices',
    'glewImpl' => 'GLEW_NV_non_square_matrices',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_occlusion_query' => {
    'binding_name' => 'GLEW_NV_occlusion_query',
    'glewImpl' => 'GLEW_NV_occlusion_query',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_pack_subimage' => {
    'binding_name' => 'GLEW_NV_pack_subimage',
    'glewImpl' => 'GLEW_NV_pack_subimage',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_packed_depth_stencil' => {
    'binding_name' => 'GLEW_NV_packed_depth_stencil',
    'glewImpl' => 'GLEW_NV_packed_depth_stencil',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_packed_float' => {
    'binding_name' => 'GLEW_NV_packed_float',
    'glewImpl' => 'GLEW_NV_packed_float',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_packed_float_linear' => {
    'binding_name' => 'GLEW_NV_packed_float_linear',
    'glewImpl' => 'GLEW_NV_packed_float_linear',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_parameter_buffer_object' => {
    'binding_name' => 'GLEW_NV_parameter_buffer_object',
    'glewImpl' => 'GLEW_NV_parameter_buffer_object',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_parameter_buffer_object2' => {
    'binding_name' => 'GLEW_NV_parameter_buffer_object2',
    'glewImpl' => 'GLEW_NV_parameter_buffer_object2',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_path_rendering' => {
    'binding_name' => 'GLEW_NV_path_rendering',
    'glewImpl' => 'GLEW_NV_path_rendering',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_path_rendering_shared_edge' => {
    'binding_name' => 'GLEW_NV_path_rendering_shared_edge',
    'glewImpl' => 'GLEW_NV_path_rendering_shared_edge',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_pixel_buffer_object' => {
    'binding_name' => 'GLEW_NV_pixel_buffer_object',
    'glewImpl' => 'GLEW_NV_pixel_buffer_object',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_pixel_data_range' => {
    'binding_name' => 'GLEW_NV_pixel_data_range',
    'glewImpl' => 'GLEW_NV_pixel_data_range',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_platform_binary' => {
    'binding_name' => 'GLEW_NV_platform_binary',
    'glewImpl' => 'GLEW_NV_platform_binary',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_point_sprite' => {
    'binding_name' => 'GLEW_NV_point_sprite',
    'glewImpl' => 'GLEW_NV_point_sprite',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_polygon_mode' => {
    'binding_name' => 'GLEW_NV_polygon_mode',
    'glewImpl' => 'GLEW_NV_polygon_mode',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_present_video' => {
    'binding_name' => 'GLEW_NV_present_video',
    'glewImpl' => 'GLEW_NV_present_video',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_primitive_restart' => {
    'binding_name' => 'GLEW_NV_primitive_restart',
    'glewImpl' => 'GLEW_NV_primitive_restart',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_read_depth' => {
    'binding_name' => 'GLEW_NV_read_depth',
    'glewImpl' => 'GLEW_NV_read_depth',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_read_depth_stencil' => {
    'binding_name' => 'GLEW_NV_read_depth_stencil',
    'glewImpl' => 'GLEW_NV_read_depth_stencil',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_read_stencil' => {
    'binding_name' => 'GLEW_NV_read_stencil',
    'glewImpl' => 'GLEW_NV_read_stencil',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_register_combiners' => {
    'binding_name' => 'GLEW_NV_register_combiners',
    'glewImpl' => 'GLEW_NV_register_combiners',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_register_combiners2' => {
    'binding_name' => 'GLEW_NV_register_combiners2',
    'glewImpl' => 'GLEW_NV_register_combiners2',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_robustness_video_memory_purge' => {
    'binding_name' => 'GLEW_NV_robustness_video_memory_purge',
    'glewImpl' => 'GLEW_NV_robustness_video_memory_purge',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_sRGB_formats' => {
    'binding_name' => 'GLEW_NV_sRGB_formats',
    'glewImpl' => 'GLEW_NV_sRGB_formats',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_sample_locations' => {
    'binding_name' => 'GLEW_NV_sample_locations',
    'glewImpl' => 'GLEW_NV_sample_locations',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_sample_mask_override_coverage' => {
    'binding_name' => 'GLEW_NV_sample_mask_override_coverage',
    'glewImpl' => 'GLEW_NV_sample_mask_override_coverage',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_shader_atomic_counters' => {
    'binding_name' => 'GLEW_NV_shader_atomic_counters',
    'glewImpl' => 'GLEW_NV_shader_atomic_counters',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_shader_atomic_float' => {
    'binding_name' => 'GLEW_NV_shader_atomic_float',
    'glewImpl' => 'GLEW_NV_shader_atomic_float',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_shader_atomic_float64' => {
    'binding_name' => 'GLEW_NV_shader_atomic_float64',
    'glewImpl' => 'GLEW_NV_shader_atomic_float64',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_shader_atomic_fp16_vector' => {
    'binding_name' => 'GLEW_NV_shader_atomic_fp16_vector',
    'glewImpl' => 'GLEW_NV_shader_atomic_fp16_vector',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_shader_atomic_int64' => {
    'binding_name' => 'GLEW_NV_shader_atomic_int64',
    'glewImpl' => 'GLEW_NV_shader_atomic_int64',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_shader_buffer_load' => {
    'binding_name' => 'GLEW_NV_shader_buffer_load',
    'glewImpl' => 'GLEW_NV_shader_buffer_load',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_shader_noperspective_interpolation' => {
    'binding_name' => 'GLEW_NV_shader_noperspective_interpolation',
    'glewImpl' => 'GLEW_NV_shader_noperspective_interpolation',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_shader_storage_buffer_object' => {
    'binding_name' => 'GLEW_NV_shader_storage_buffer_object',
    'glewImpl' => 'GLEW_NV_shader_storage_buffer_object',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_shader_thread_group' => {
    'binding_name' => 'GLEW_NV_shader_thread_group',
    'glewImpl' => 'GLEW_NV_shader_thread_group',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_shader_thread_shuffle' => {
    'binding_name' => 'GLEW_NV_shader_thread_shuffle',
    'glewImpl' => 'GLEW_NV_shader_thread_shuffle',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_shadow_samplers_array' => {
    'binding_name' => 'GLEW_NV_shadow_samplers_array',
    'glewImpl' => 'GLEW_NV_shadow_samplers_array',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_shadow_samplers_cube' => {
    'binding_name' => 'GLEW_NV_shadow_samplers_cube',
    'glewImpl' => 'GLEW_NV_shadow_samplers_cube',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_stereo_view_rendering' => {
    'binding_name' => 'GLEW_NV_stereo_view_rendering',
    'glewImpl' => 'GLEW_NV_stereo_view_rendering',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_tessellation_program5' => {
    'binding_name' => 'GLEW_NV_tessellation_program5',
    'glewImpl' => 'GLEW_NV_tessellation_program5',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_texgen_emboss' => {
    'binding_name' => 'GLEW_NV_texgen_emboss',
    'glewImpl' => 'GLEW_NV_texgen_emboss',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_texgen_reflection' => {
    'binding_name' => 'GLEW_NV_texgen_reflection',
    'glewImpl' => 'GLEW_NV_texgen_reflection',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_texture_array' => {
    'binding_name' => 'GLEW_NV_texture_array',
    'glewImpl' => 'GLEW_NV_texture_array',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_texture_barrier' => {
    'binding_name' => 'GLEW_NV_texture_barrier',
    'glewImpl' => 'GLEW_NV_texture_barrier',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_texture_border_clamp' => {
    'binding_name' => 'GLEW_NV_texture_border_clamp',
    'glewImpl' => 'GLEW_NV_texture_border_clamp',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_texture_compression_latc' => {
    'binding_name' => 'GLEW_NV_texture_compression_latc',
    'glewImpl' => 'GLEW_NV_texture_compression_latc',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_texture_compression_s3tc' => {
    'binding_name' => 'GLEW_NV_texture_compression_s3tc',
    'glewImpl' => 'GLEW_NV_texture_compression_s3tc',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_texture_compression_s3tc_update' => {
    'binding_name' => 'GLEW_NV_texture_compression_s3tc_update',
    'glewImpl' => 'GLEW_NV_texture_compression_s3tc_update',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_texture_compression_vtc' => {
    'binding_name' => 'GLEW_NV_texture_compression_vtc',
    'glewImpl' => 'GLEW_NV_texture_compression_vtc',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_texture_env_combine4' => {
    'binding_name' => 'GLEW_NV_texture_env_combine4',
    'glewImpl' => 'GLEW_NV_texture_env_combine4',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_texture_expand_normal' => {
    'binding_name' => 'GLEW_NV_texture_expand_normal',
    'glewImpl' => 'GLEW_NV_texture_expand_normal',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_texture_multisample' => {
    'binding_name' => 'GLEW_NV_texture_multisample',
    'glewImpl' => 'GLEW_NV_texture_multisample',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_texture_npot_2D_mipmap' => {
    'binding_name' => 'GLEW_NV_texture_npot_2D_mipmap',
    'glewImpl' => 'GLEW_NV_texture_npot_2D_mipmap',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_texture_rectangle' => {
    'binding_name' => 'GLEW_NV_texture_rectangle',
    'glewImpl' => 'GLEW_NV_texture_rectangle',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_texture_rectangle_compressed' => {
    'binding_name' => 'GLEW_NV_texture_rectangle_compressed',
    'glewImpl' => 'GLEW_NV_texture_rectangle_compressed',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_texture_shader' => {
    'binding_name' => 'GLEW_NV_texture_shader',
    'glewImpl' => 'GLEW_NV_texture_shader',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_texture_shader2' => {
    'binding_name' => 'GLEW_NV_texture_shader2',
    'glewImpl' => 'GLEW_NV_texture_shader2',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_texture_shader3' => {
    'binding_name' => 'GLEW_NV_texture_shader3',
    'glewImpl' => 'GLEW_NV_texture_shader3',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_transform_feedback' => {
    'binding_name' => 'GLEW_NV_transform_feedback',
    'glewImpl' => 'GLEW_NV_transform_feedback',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_transform_feedback2' => {
    'binding_name' => 'GLEW_NV_transform_feedback2',
    'glewImpl' => 'GLEW_NV_transform_feedback2',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_uniform_buffer_unified_memory' => {
    'binding_name' => 'GLEW_NV_uniform_buffer_unified_memory',
    'glewImpl' => 'GLEW_NV_uniform_buffer_unified_memory',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_vdpau_interop' => {
    'binding_name' => 'GLEW_NV_vdpau_interop',
    'glewImpl' => 'GLEW_NV_vdpau_interop',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_vertex_array_range' => {
    'binding_name' => 'GLEW_NV_vertex_array_range',
    'glewImpl' => 'GLEW_NV_vertex_array_range',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_vertex_array_range2' => {
    'binding_name' => 'GLEW_NV_vertex_array_range2',
    'glewImpl' => 'GLEW_NV_vertex_array_range2',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_vertex_attrib_integer_64bit' => {
    'binding_name' => 'GLEW_NV_vertex_attrib_integer_64bit',
    'glewImpl' => 'GLEW_NV_vertex_attrib_integer_64bit',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_vertex_buffer_unified_memory' => {
    'binding_name' => 'GLEW_NV_vertex_buffer_unified_memory',
    'glewImpl' => 'GLEW_NV_vertex_buffer_unified_memory',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_vertex_program' => {
    'binding_name' => 'GLEW_NV_vertex_program',
    'glewImpl' => 'GLEW_NV_vertex_program',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_vertex_program1_1' => {
    'binding_name' => 'GLEW_NV_vertex_program1_1',
    'glewImpl' => 'GLEW_NV_vertex_program1_1',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_vertex_program2' => {
    'binding_name' => 'GLEW_NV_vertex_program2',
    'glewImpl' => 'GLEW_NV_vertex_program2',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_vertex_program2_option' => {
    'binding_name' => 'GLEW_NV_vertex_program2_option',
    'glewImpl' => 'GLEW_NV_vertex_program2_option',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_vertex_program3' => {
    'binding_name' => 'GLEW_NV_vertex_program3',
    'glewImpl' => 'GLEW_NV_vertex_program3',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_vertex_program4' => {
    'binding_name' => 'GLEW_NV_vertex_program4',
    'glewImpl' => 'GLEW_NV_vertex_program4',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_video_capture' => {
    'binding_name' => 'GLEW_NV_video_capture',
    'glewImpl' => 'GLEW_NV_video_capture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_viewport_array' => {
    'binding_name' => 'GLEW_NV_viewport_array',
    'glewImpl' => 'GLEW_NV_viewport_array',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_viewport_array2' => {
    'binding_name' => 'GLEW_NV_viewport_array2',
    'glewImpl' => 'GLEW_NV_viewport_array2',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_NV_viewport_swizzle' => {
    'binding_name' => 'GLEW_NV_viewport_swizzle',
    'glewImpl' => 'GLEW_NV_viewport_swizzle',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_OES_byte_coordinates' => {
    'binding_name' => 'GLEW_OES_byte_coordinates',
    'glewImpl' => 'GLEW_OES_byte_coordinates',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_OML_interlace' => {
    'binding_name' => 'GLEW_OML_interlace',
    'glewImpl' => 'GLEW_OML_interlace',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_OML_resample' => {
    'binding_name' => 'GLEW_OML_resample',
    'glewImpl' => 'GLEW_OML_resample',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_OML_subsample' => {
    'binding_name' => 'GLEW_OML_subsample',
    'glewImpl' => 'GLEW_OML_subsample',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_OVR_multiview' => {
    'binding_name' => 'GLEW_OVR_multiview',
    'glewImpl' => 'GLEW_OVR_multiview',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_OVR_multiview2' => {
    'binding_name' => 'GLEW_OVR_multiview2',
    'glewImpl' => 'GLEW_OVR_multiview2',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_OVR_multiview_multisampled_render_to_texture' => {
    'binding_name' => 'GLEW_OVR_multiview_multisampled_render_to_texture',
    'glewImpl' => 'GLEW_OVR_multiview_multisampled_render_to_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_PGI_misc_hints' => {
    'binding_name' => 'GLEW_PGI_misc_hints',
    'glewImpl' => 'GLEW_PGI_misc_hints',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_PGI_vertex_hints' => {
    'binding_name' => 'GLEW_PGI_vertex_hints',
    'glewImpl' => 'GLEW_PGI_vertex_hints',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_QCOM_alpha_test' => {
    'binding_name' => 'GLEW_QCOM_alpha_test',
    'glewImpl' => 'GLEW_QCOM_alpha_test',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_QCOM_binning_control' => {
    'binding_name' => 'GLEW_QCOM_binning_control',
    'glewImpl' => 'GLEW_QCOM_binning_control',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_QCOM_driver_control' => {
    'binding_name' => 'GLEW_QCOM_driver_control',
    'glewImpl' => 'GLEW_QCOM_driver_control',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_QCOM_extended_get' => {
    'binding_name' => 'GLEW_QCOM_extended_get',
    'glewImpl' => 'GLEW_QCOM_extended_get',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_QCOM_extended_get2' => {
    'binding_name' => 'GLEW_QCOM_extended_get2',
    'glewImpl' => 'GLEW_QCOM_extended_get2',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_QCOM_framebuffer_foveated' => {
    'binding_name' => 'GLEW_QCOM_framebuffer_foveated',
    'glewImpl' => 'GLEW_QCOM_framebuffer_foveated',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_QCOM_perfmon_global_mode' => {
    'binding_name' => 'GLEW_QCOM_perfmon_global_mode',
    'glewImpl' => 'GLEW_QCOM_perfmon_global_mode',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_QCOM_shader_framebuffer_fetch_noncoherent' => {
    'binding_name' => 'GLEW_QCOM_shader_framebuffer_fetch_noncoherent',
    'glewImpl' => 'GLEW_QCOM_shader_framebuffer_fetch_noncoherent',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_QCOM_tiled_rendering' => {
    'binding_name' => 'GLEW_QCOM_tiled_rendering',
    'glewImpl' => 'GLEW_QCOM_tiled_rendering',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_QCOM_writeonly_rendering' => {
    'binding_name' => 'GLEW_QCOM_writeonly_rendering',
    'glewImpl' => 'GLEW_QCOM_writeonly_rendering',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_REGAL_ES1_0_compatibility' => {
    'binding_name' => 'GLEW_REGAL_ES1_0_compatibility',
    'glewImpl' => 'GLEW_REGAL_ES1_0_compatibility',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_REGAL_ES1_1_compatibility' => {
    'binding_name' => 'GLEW_REGAL_ES1_1_compatibility',
    'glewImpl' => 'GLEW_REGAL_ES1_1_compatibility',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_REGAL_enable' => {
    'binding_name' => 'GLEW_REGAL_enable',
    'glewImpl' => 'GLEW_REGAL_enable',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_REGAL_error_string' => {
    'binding_name' => 'GLEW_REGAL_error_string',
    'glewImpl' => 'GLEW_REGAL_error_string',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_REGAL_extension_query' => {
    'binding_name' => 'GLEW_REGAL_extension_query',
    'glewImpl' => 'GLEW_REGAL_extension_query',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_REGAL_log' => {
    'binding_name' => 'GLEW_REGAL_log',
    'glewImpl' => 'GLEW_REGAL_log',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_REGAL_proc_address' => {
    'binding_name' => 'GLEW_REGAL_proc_address',
    'glewImpl' => 'GLEW_REGAL_proc_address',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_REND_screen_coordinates' => {
    'binding_name' => 'GLEW_REND_screen_coordinates',
    'glewImpl' => 'GLEW_REND_screen_coordinates',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_S3_s3tc' => {
    'binding_name' => 'GLEW_S3_s3tc',
    'glewImpl' => 'GLEW_S3_s3tc',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIS_clip_band_hint' => {
    'binding_name' => 'GLEW_SGIS_clip_band_hint',
    'glewImpl' => 'GLEW_SGIS_clip_band_hint',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIS_color_range' => {
    'binding_name' => 'GLEW_SGIS_color_range',
    'glewImpl' => 'GLEW_SGIS_color_range',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIS_detail_texture' => {
    'binding_name' => 'GLEW_SGIS_detail_texture',
    'glewImpl' => 'GLEW_SGIS_detail_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIS_fog_function' => {
    'binding_name' => 'GLEW_SGIS_fog_function',
    'glewImpl' => 'GLEW_SGIS_fog_function',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIS_generate_mipmap' => {
    'binding_name' => 'GLEW_SGIS_generate_mipmap',
    'glewImpl' => 'GLEW_SGIS_generate_mipmap',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIS_line_texgen' => {
    'binding_name' => 'GLEW_SGIS_line_texgen',
    'glewImpl' => 'GLEW_SGIS_line_texgen',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIS_multisample' => {
    'binding_name' => 'GLEW_SGIS_multisample',
    'glewImpl' => 'GLEW_SGIS_multisample',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIS_multitexture' => {
    'binding_name' => 'GLEW_SGIS_multitexture',
    'glewImpl' => 'GLEW_SGIS_multitexture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIS_pixel_texture' => {
    'binding_name' => 'GLEW_SGIS_pixel_texture',
    'glewImpl' => 'GLEW_SGIS_pixel_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIS_point_line_texgen' => {
    'binding_name' => 'GLEW_SGIS_point_line_texgen',
    'glewImpl' => 'GLEW_SGIS_point_line_texgen',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIS_shared_multisample' => {
    'binding_name' => 'GLEW_SGIS_shared_multisample',
    'glewImpl' => 'GLEW_SGIS_shared_multisample',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIS_sharpen_texture' => {
    'binding_name' => 'GLEW_SGIS_sharpen_texture',
    'glewImpl' => 'GLEW_SGIS_sharpen_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIS_texture4D' => {
    'binding_name' => 'GLEW_SGIS_texture4D',
    'glewImpl' => 'GLEW_SGIS_texture4D',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIS_texture_border_clamp' => {
    'binding_name' => 'GLEW_SGIS_texture_border_clamp',
    'glewImpl' => 'GLEW_SGIS_texture_border_clamp',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIS_texture_edge_clamp' => {
    'binding_name' => 'GLEW_SGIS_texture_edge_clamp',
    'glewImpl' => 'GLEW_SGIS_texture_edge_clamp',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIS_texture_filter4' => {
    'binding_name' => 'GLEW_SGIS_texture_filter4',
    'glewImpl' => 'GLEW_SGIS_texture_filter4',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIS_texture_lod' => {
    'binding_name' => 'GLEW_SGIS_texture_lod',
    'glewImpl' => 'GLEW_SGIS_texture_lod',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIS_texture_select' => {
    'binding_name' => 'GLEW_SGIS_texture_select',
    'glewImpl' => 'GLEW_SGIS_texture_select',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_async' => {
    'binding_name' => 'GLEW_SGIX_async',
    'glewImpl' => 'GLEW_SGIX_async',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_async_histogram' => {
    'binding_name' => 'GLEW_SGIX_async_histogram',
    'glewImpl' => 'GLEW_SGIX_async_histogram',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_async_pixel' => {
    'binding_name' => 'GLEW_SGIX_async_pixel',
    'glewImpl' => 'GLEW_SGIX_async_pixel',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_bali_g_instruments' => {
    'binding_name' => 'GLEW_SGIX_bali_g_instruments',
    'glewImpl' => 'GLEW_SGIX_bali_g_instruments',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_bali_r_instruments' => {
    'binding_name' => 'GLEW_SGIX_bali_r_instruments',
    'glewImpl' => 'GLEW_SGIX_bali_r_instruments',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_bali_timer_instruments' => {
    'binding_name' => 'GLEW_SGIX_bali_timer_instruments',
    'glewImpl' => 'GLEW_SGIX_bali_timer_instruments',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_blend_alpha_minmax' => {
    'binding_name' => 'GLEW_SGIX_blend_alpha_minmax',
    'glewImpl' => 'GLEW_SGIX_blend_alpha_minmax',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_blend_cadd' => {
    'binding_name' => 'GLEW_SGIX_blend_cadd',
    'glewImpl' => 'GLEW_SGIX_blend_cadd',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_blend_cmultiply' => {
    'binding_name' => 'GLEW_SGIX_blend_cmultiply',
    'glewImpl' => 'GLEW_SGIX_blend_cmultiply',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_calligraphic_fragment' => {
    'binding_name' => 'GLEW_SGIX_calligraphic_fragment',
    'glewImpl' => 'GLEW_SGIX_calligraphic_fragment',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_clipmap' => {
    'binding_name' => 'GLEW_SGIX_clipmap',
    'glewImpl' => 'GLEW_SGIX_clipmap',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_color_matrix_accuracy' => {
    'binding_name' => 'GLEW_SGIX_color_matrix_accuracy',
    'glewImpl' => 'GLEW_SGIX_color_matrix_accuracy',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_color_table_index_mode' => {
    'binding_name' => 'GLEW_SGIX_color_table_index_mode',
    'glewImpl' => 'GLEW_SGIX_color_table_index_mode',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_complex_polar' => {
    'binding_name' => 'GLEW_SGIX_complex_polar',
    'glewImpl' => 'GLEW_SGIX_complex_polar',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_convolution_accuracy' => {
    'binding_name' => 'GLEW_SGIX_convolution_accuracy',
    'glewImpl' => 'GLEW_SGIX_convolution_accuracy',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_cube_map' => {
    'binding_name' => 'GLEW_SGIX_cube_map',
    'glewImpl' => 'GLEW_SGIX_cube_map',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_cylinder_texgen' => {
    'binding_name' => 'GLEW_SGIX_cylinder_texgen',
    'glewImpl' => 'GLEW_SGIX_cylinder_texgen',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_datapipe' => {
    'binding_name' => 'GLEW_SGIX_datapipe',
    'glewImpl' => 'GLEW_SGIX_datapipe',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_decimation' => {
    'binding_name' => 'GLEW_SGIX_decimation',
    'glewImpl' => 'GLEW_SGIX_decimation',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_depth_pass_instrument' => {
    'binding_name' => 'GLEW_SGIX_depth_pass_instrument',
    'glewImpl' => 'GLEW_SGIX_depth_pass_instrument',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_depth_texture' => {
    'binding_name' => 'GLEW_SGIX_depth_texture',
    'glewImpl' => 'GLEW_SGIX_depth_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_dvc' => {
    'binding_name' => 'GLEW_SGIX_dvc',
    'glewImpl' => 'GLEW_SGIX_dvc',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_flush_raster' => {
    'binding_name' => 'GLEW_SGIX_flush_raster',
    'glewImpl' => 'GLEW_SGIX_flush_raster',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_fog_blend' => {
    'binding_name' => 'GLEW_SGIX_fog_blend',
    'glewImpl' => 'GLEW_SGIX_fog_blend',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_fog_factor_to_alpha' => {
    'binding_name' => 'GLEW_SGIX_fog_factor_to_alpha',
    'glewImpl' => 'GLEW_SGIX_fog_factor_to_alpha',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_fog_layers' => {
    'binding_name' => 'GLEW_SGIX_fog_layers',
    'glewImpl' => 'GLEW_SGIX_fog_layers',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_fog_offset' => {
    'binding_name' => 'GLEW_SGIX_fog_offset',
    'glewImpl' => 'GLEW_SGIX_fog_offset',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_fog_patchy' => {
    'binding_name' => 'GLEW_SGIX_fog_patchy',
    'glewImpl' => 'GLEW_SGIX_fog_patchy',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_fog_scale' => {
    'binding_name' => 'GLEW_SGIX_fog_scale',
    'glewImpl' => 'GLEW_SGIX_fog_scale',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_fog_texture' => {
    'binding_name' => 'GLEW_SGIX_fog_texture',
    'glewImpl' => 'GLEW_SGIX_fog_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_fragment_lighting_space' => {
    'binding_name' => 'GLEW_SGIX_fragment_lighting_space',
    'glewImpl' => 'GLEW_SGIX_fragment_lighting_space',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_fragment_specular_lighting' => {
    'binding_name' => 'GLEW_SGIX_fragment_specular_lighting',
    'glewImpl' => 'GLEW_SGIX_fragment_specular_lighting',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_fragments_instrument' => {
    'binding_name' => 'GLEW_SGIX_fragments_instrument',
    'glewImpl' => 'GLEW_SGIX_fragments_instrument',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_framezoom' => {
    'binding_name' => 'GLEW_SGIX_framezoom',
    'glewImpl' => 'GLEW_SGIX_framezoom',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_icc_texture' => {
    'binding_name' => 'GLEW_SGIX_icc_texture',
    'glewImpl' => 'GLEW_SGIX_icc_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_igloo_interface' => {
    'binding_name' => 'GLEW_SGIX_igloo_interface',
    'glewImpl' => 'GLEW_SGIX_igloo_interface',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_image_compression' => {
    'binding_name' => 'GLEW_SGIX_image_compression',
    'glewImpl' => 'GLEW_SGIX_image_compression',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_impact_pixel_texture' => {
    'binding_name' => 'GLEW_SGIX_impact_pixel_texture',
    'glewImpl' => 'GLEW_SGIX_impact_pixel_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_instrument_error' => {
    'binding_name' => 'GLEW_SGIX_instrument_error',
    'glewImpl' => 'GLEW_SGIX_instrument_error',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_interlace' => {
    'binding_name' => 'GLEW_SGIX_interlace',
    'glewImpl' => 'GLEW_SGIX_interlace',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_ir_instrument1' => {
    'binding_name' => 'GLEW_SGIX_ir_instrument1',
    'glewImpl' => 'GLEW_SGIX_ir_instrument1',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_line_quality_hint' => {
    'binding_name' => 'GLEW_SGIX_line_quality_hint',
    'glewImpl' => 'GLEW_SGIX_line_quality_hint',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_list_priority' => {
    'binding_name' => 'GLEW_SGIX_list_priority',
    'glewImpl' => 'GLEW_SGIX_list_priority',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_mpeg1' => {
    'binding_name' => 'GLEW_SGIX_mpeg1',
    'glewImpl' => 'GLEW_SGIX_mpeg1',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_mpeg2' => {
    'binding_name' => 'GLEW_SGIX_mpeg2',
    'glewImpl' => 'GLEW_SGIX_mpeg2',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_nonlinear_lighting_pervertex' => {
    'binding_name' => 'GLEW_SGIX_nonlinear_lighting_pervertex',
    'glewImpl' => 'GLEW_SGIX_nonlinear_lighting_pervertex',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_nurbs_eval' => {
    'binding_name' => 'GLEW_SGIX_nurbs_eval',
    'glewImpl' => 'GLEW_SGIX_nurbs_eval',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_occlusion_instrument' => {
    'binding_name' => 'GLEW_SGIX_occlusion_instrument',
    'glewImpl' => 'GLEW_SGIX_occlusion_instrument',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_packed_6bytes' => {
    'binding_name' => 'GLEW_SGIX_packed_6bytes',
    'glewImpl' => 'GLEW_SGIX_packed_6bytes',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_pixel_texture' => {
    'binding_name' => 'GLEW_SGIX_pixel_texture',
    'glewImpl' => 'GLEW_SGIX_pixel_texture',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_pixel_texture_bits' => {
    'binding_name' => 'GLEW_SGIX_pixel_texture_bits',
    'glewImpl' => 'GLEW_SGIX_pixel_texture_bits',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_pixel_texture_lod' => {
    'binding_name' => 'GLEW_SGIX_pixel_texture_lod',
    'glewImpl' => 'GLEW_SGIX_pixel_texture_lod',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_pixel_tiles' => {
    'binding_name' => 'GLEW_SGIX_pixel_tiles',
    'glewImpl' => 'GLEW_SGIX_pixel_tiles',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_polynomial_ffd' => {
    'binding_name' => 'GLEW_SGIX_polynomial_ffd',
    'glewImpl' => 'GLEW_SGIX_polynomial_ffd',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_quad_mesh' => {
    'binding_name' => 'GLEW_SGIX_quad_mesh',
    'glewImpl' => 'GLEW_SGIX_quad_mesh',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_reference_plane' => {
    'binding_name' => 'GLEW_SGIX_reference_plane',
    'glewImpl' => 'GLEW_SGIX_reference_plane',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_resample' => {
    'binding_name' => 'GLEW_SGIX_resample',
    'glewImpl' => 'GLEW_SGIX_resample',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_scalebias_hint' => {
    'binding_name' => 'GLEW_SGIX_scalebias_hint',
    'glewImpl' => 'GLEW_SGIX_scalebias_hint',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_shadow' => {
    'binding_name' => 'GLEW_SGIX_shadow',
    'glewImpl' => 'GLEW_SGIX_shadow',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_shadow_ambient' => {
    'binding_name' => 'GLEW_SGIX_shadow_ambient',
    'glewImpl' => 'GLEW_SGIX_shadow_ambient',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_slim' => {
    'binding_name' => 'GLEW_SGIX_slim',
    'glewImpl' => 'GLEW_SGIX_slim',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_spotlight_cutoff' => {
    'binding_name' => 'GLEW_SGIX_spotlight_cutoff',
    'glewImpl' => 'GLEW_SGIX_spotlight_cutoff',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_sprite' => {
    'binding_name' => 'GLEW_SGIX_sprite',
    'glewImpl' => 'GLEW_SGIX_sprite',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_subdiv_patch' => {
    'binding_name' => 'GLEW_SGIX_subdiv_patch',
    'glewImpl' => 'GLEW_SGIX_subdiv_patch',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_subsample' => {
    'binding_name' => 'GLEW_SGIX_subsample',
    'glewImpl' => 'GLEW_SGIX_subsample',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_tag_sample_buffer' => {
    'binding_name' => 'GLEW_SGIX_tag_sample_buffer',
    'glewImpl' => 'GLEW_SGIX_tag_sample_buffer',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_texture_add_env' => {
    'binding_name' => 'GLEW_SGIX_texture_add_env',
    'glewImpl' => 'GLEW_SGIX_texture_add_env',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_texture_coordinate_clamp' => {
    'binding_name' => 'GLEW_SGIX_texture_coordinate_clamp',
    'glewImpl' => 'GLEW_SGIX_texture_coordinate_clamp',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_texture_lod_bias' => {
    'binding_name' => 'GLEW_SGIX_texture_lod_bias',
    'glewImpl' => 'GLEW_SGIX_texture_lod_bias',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_texture_mipmap_anisotropic' => {
    'binding_name' => 'GLEW_SGIX_texture_mipmap_anisotropic',
    'glewImpl' => 'GLEW_SGIX_texture_mipmap_anisotropic',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_texture_multi_buffer' => {
    'binding_name' => 'GLEW_SGIX_texture_multi_buffer',
    'glewImpl' => 'GLEW_SGIX_texture_multi_buffer',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_texture_phase' => {
    'binding_name' => 'GLEW_SGIX_texture_phase',
    'glewImpl' => 'GLEW_SGIX_texture_phase',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_texture_range' => {
    'binding_name' => 'GLEW_SGIX_texture_range',
    'glewImpl' => 'GLEW_SGIX_texture_range',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_texture_scale_bias' => {
    'binding_name' => 'GLEW_SGIX_texture_scale_bias',
    'glewImpl' => 'GLEW_SGIX_texture_scale_bias',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_texture_supersample' => {
    'binding_name' => 'GLEW_SGIX_texture_supersample',
    'glewImpl' => 'GLEW_SGIX_texture_supersample',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_vector_ops' => {
    'binding_name' => 'GLEW_SGIX_vector_ops',
    'glewImpl' => 'GLEW_SGIX_vector_ops',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_vertex_array_object' => {
    'binding_name' => 'GLEW_SGIX_vertex_array_object',
    'glewImpl' => 'GLEW_SGIX_vertex_array_object',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_vertex_preclip' => {
    'binding_name' => 'GLEW_SGIX_vertex_preclip',
    'glewImpl' => 'GLEW_SGIX_vertex_preclip',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_vertex_preclip_hint' => {
    'binding_name' => 'GLEW_SGIX_vertex_preclip_hint',
    'glewImpl' => 'GLEW_SGIX_vertex_preclip_hint',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_ycrcb' => {
    'binding_name' => 'GLEW_SGIX_ycrcb',
    'glewImpl' => 'GLEW_SGIX_ycrcb',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_ycrcb_subsample' => {
    'binding_name' => 'GLEW_SGIX_ycrcb_subsample',
    'glewImpl' => 'GLEW_SGIX_ycrcb_subsample',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGIX_ycrcba' => {
    'binding_name' => 'GLEW_SGIX_ycrcba',
    'glewImpl' => 'GLEW_SGIX_ycrcba',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGI_color_matrix' => {
    'binding_name' => 'GLEW_SGI_color_matrix',
    'glewImpl' => 'GLEW_SGI_color_matrix',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGI_color_table' => {
    'binding_name' => 'GLEW_SGI_color_table',
    'glewImpl' => 'GLEW_SGI_color_table',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGI_complex' => {
    'binding_name' => 'GLEW_SGI_complex',
    'glewImpl' => 'GLEW_SGI_complex',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGI_complex_type' => {
    'binding_name' => 'GLEW_SGI_complex_type',
    'glewImpl' => 'GLEW_SGI_complex_type',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGI_fft' => {
    'binding_name' => 'GLEW_SGI_fft',
    'glewImpl' => 'GLEW_SGI_fft',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SGI_texture_color_table' => {
    'binding_name' => 'GLEW_SGI_texture_color_table',
    'glewImpl' => 'GLEW_SGI_texture_color_table',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SUNX_constant_data' => {
    'binding_name' => 'GLEW_SUNX_constant_data',
    'glewImpl' => 'GLEW_SUNX_constant_data',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SUN_convolution_border_modes' => {
    'binding_name' => 'GLEW_SUN_convolution_border_modes',
    'glewImpl' => 'GLEW_SUN_convolution_border_modes',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SUN_global_alpha' => {
    'binding_name' => 'GLEW_SUN_global_alpha',
    'glewImpl' => 'GLEW_SUN_global_alpha',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SUN_mesh_array' => {
    'binding_name' => 'GLEW_SUN_mesh_array',
    'glewImpl' => 'GLEW_SUN_mesh_array',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SUN_read_video_pixels' => {
    'binding_name' => 'GLEW_SUN_read_video_pixels',
    'glewImpl' => 'GLEW_SUN_read_video_pixels',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SUN_slice_accum' => {
    'binding_name' => 'GLEW_SUN_slice_accum',
    'glewImpl' => 'GLEW_SUN_slice_accum',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SUN_triangle_list' => {
    'binding_name' => 'GLEW_SUN_triangle_list',
    'glewImpl' => 'GLEW_SUN_triangle_list',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_SUN_vertex' => {
    'binding_name' => 'GLEW_SUN_vertex',
    'glewImpl' => 'GLEW_SUN_vertex',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_VERSION_1_1' => {
    'binding_name' => 'GLEW_VERSION_1_1',
    'glewImpl' => 'GLEW_VERSION_1_1',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_VERSION_1_2' => {
    'binding_name' => 'GLEW_VERSION_1_2',
    'glewImpl' => 'GLEW_VERSION_1_2',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_VERSION_1_2_1' => {
    'binding_name' => 'GLEW_VERSION_1_2_1',
    'glewImpl' => 'GLEW_VERSION_1_2_1',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_VERSION_1_3' => {
    'binding_name' => 'GLEW_VERSION_1_3',
    'glewImpl' => 'GLEW_VERSION_1_3',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_VERSION_1_4' => {
    'binding_name' => 'GLEW_VERSION_1_4',
    'glewImpl' => 'GLEW_VERSION_1_4',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_VERSION_1_5' => {
    'binding_name' => 'GLEW_VERSION_1_5',
    'glewImpl' => 'GLEW_VERSION_1_5',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_VERSION_2_0' => {
    'binding_name' => 'GLEW_VERSION_2_0',
    'glewImpl' => 'GLEW_VERSION_2_0',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_VERSION_2_1' => {
    'binding_name' => 'GLEW_VERSION_2_1',
    'glewImpl' => 'GLEW_VERSION_2_1',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_VERSION_3_0' => {
    'binding_name' => 'GLEW_VERSION_3_0',
    'glewImpl' => 'GLEW_VERSION_3_0',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_VERSION_3_1' => {
    'binding_name' => 'GLEW_VERSION_3_1',
    'glewImpl' => 'GLEW_VERSION_3_1',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_VERSION_3_2' => {
    'binding_name' => 'GLEW_VERSION_3_2',
    'glewImpl' => 'GLEW_VERSION_3_2',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_VERSION_3_3' => {
    'binding_name' => 'GLEW_VERSION_3_3',
    'glewImpl' => 'GLEW_VERSION_3_3',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_VERSION_4_0' => {
    'binding_name' => 'GLEW_VERSION_4_0',
    'glewImpl' => 'GLEW_VERSION_4_0',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_VERSION_4_1' => {
    'binding_name' => 'GLEW_VERSION_4_1',
    'glewImpl' => 'GLEW_VERSION_4_1',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_VERSION_4_2' => {
    'binding_name' => 'GLEW_VERSION_4_2',
    'glewImpl' => 'GLEW_VERSION_4_2',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_VERSION_4_3' => {
    'binding_name' => 'GLEW_VERSION_4_3',
    'glewImpl' => 'GLEW_VERSION_4_3',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_VERSION_4_4' => {
    'binding_name' => 'GLEW_VERSION_4_4',
    'glewImpl' => 'GLEW_VERSION_4_4',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_VERSION_4_5' => {
    'binding_name' => 'GLEW_VERSION_4_5',
    'glewImpl' => 'GLEW_VERSION_4_5',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_VERSION_4_6' => {
    'binding_name' => 'GLEW_VERSION_4_6',
    'glewImpl' => 'GLEW_VERSION_4_6',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_WIN_phong_shading' => {
    'binding_name' => 'GLEW_WIN_phong_shading',
    'glewImpl' => 'GLEW_WIN_phong_shading',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_WIN_scene_markerXXX' => {
    'binding_name' => 'GLEW_WIN_scene_markerXXX',
    'glewImpl' => 'GLEW_WIN_scene_markerXXX',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_WIN_specular_fog' => {
    'binding_name' => 'GLEW_WIN_specular_fog',
    'glewImpl' => 'GLEW_WIN_specular_fog',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'GLEW_WIN_swap_hint' => {
    'binding_name' => 'GLEW_WIN_swap_hint',
    'glewImpl' => 'GLEW_WIN_swap_hint',
    'glewtype' => 'var',
    'restype' => 'GLboolean',
    'signature' => 'void'
  },
  'glAccum' => {
    'argdata' => [
      [
        'op',
        'GLenum '
      ],
      [
        'value',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glAccum',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum op, GLfloat value'
  },
  'glAcquireKeyedMutexWin32EXT' => {
    'argdata' => [
      [
        'memory',
        'GLuint '
      ],
      [
        'key',
        'GLuint64 '
      ],
      [
        'timeout',
        'GLuint '
      ]
    ],
    'binding_name' => 'glAcquireKeyedMutexWin32EXT',
    'feature' => 'GL_EXT_win32_keyed_mutex',
    'glewImpl' => '__glewAcquireKeyedMutexWin32EXT',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint memory, GLuint64 key, GLuint timeout'
  },
  'glActiveProgramEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ]
    ],
    'binding_name' => 'glActiveProgramEXT',
    'feature' => 'GL_EXT_separate_shader_objects',
    'glewImpl' => '__glewActiveProgramEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program'
  },
  'glActiveShaderProgram' => {
    'argdata' => [
      [
        'pipeline',
        'GLuint '
      ],
      [
        'program',
        'GLuint '
      ]
    ],
    'binding_name' => 'glActiveShaderProgram',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewActiveShaderProgram',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint pipeline, GLuint program'
  },
  'glActiveStencilFaceEXT' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ]
    ],
    'binding_name' => 'glActiveStencilFaceEXT',
    'feature' => 'GL_EXT_stencil_two_side',
    'glewImpl' => '__glewActiveStencilFaceEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face'
  },
  'glActiveTexture' => {
    'argdata' => [
      [
        'texture',
        'GLenum '
      ]
    ],
    'binding_name' => 'glActiveTexture',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewActiveTexture',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texture'
  },
  'glActiveTextureARB' => {
    'argdata' => [
      [
        'texture',
        'GLenum '
      ]
    ],
    'binding_name' => 'glActiveTextureARB',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewActiveTextureARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texture'
  },
  'glActiveVaryingNV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'name',
        'const GLchar *'
      ]
    ],
    'binding_name' => 'glActiveVaryingNV_c',
    'feature' => 'GL_NV_transform_feedback',
    'glewImpl' => '__glewActiveVaryingNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, const GLchar *name'
  },
  'glAddSwapHintRectWIN' => {
    'argdata' => [
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glAddSwapHintRectWIN',
    'feature' => 'GL_WIN_swap_hint',
    'glewImpl' => '__glewAddSwapHintRectWIN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint x, GLint y, GLsizei width, GLsizei height'
  },
  'glAddressSpace' => {
    'argdata' => [
      [
        'space',
        'GLenum '
      ],
      [
        'mask',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glAddressSpace',
    'feature' => 'GL_SGIX_datapipe',
    'glewImpl' => '__glewAddressSpace',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum space, GLbitfield mask'
  },
  'glAllocMPEGPredictorsSGIX' => {
    'argdata' => [
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'predictors',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glAllocMPEGPredictorsSGIX_c',
    'feature' => 'GL_SGIX_mpeg1',
    'glewImpl' => '__glewAllocMPEGPredictorsSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei width, GLsizei height, GLsizei n, GLuint* predictors'
  },
  'glAlphaFragmentOp1ATI' => {
    'argdata' => [
      [
        'op',
        'GLenum '
      ],
      [
        'dst',
        'GLuint '
      ],
      [
        'dstMod',
        'GLuint '
      ],
      [
        'arg1',
        'GLuint '
      ],
      [
        'arg1Rep',
        'GLuint '
      ],
      [
        'arg1Mod',
        'GLuint '
      ]
    ],
    'binding_name' => 'glAlphaFragmentOp1ATI',
    'feature' => 'GL_ATI_fragment_shader',
    'glewImpl' => '__glewAlphaFragmentOp1ATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod'
  },
  'glAlphaFragmentOp2ATI' => {
    'argdata' => [
      [
        'op',
        'GLenum '
      ],
      [
        'dst',
        'GLuint '
      ],
      [
        'dstMod',
        'GLuint '
      ],
      [
        'arg1',
        'GLuint '
      ],
      [
        'arg1Rep',
        'GLuint '
      ],
      [
        'arg1Mod',
        'GLuint '
      ],
      [
        'arg2',
        'GLuint '
      ],
      [
        'arg2Rep',
        'GLuint '
      ],
      [
        'arg2Mod',
        'GLuint '
      ]
    ],
    'binding_name' => 'glAlphaFragmentOp2ATI',
    'feature' => 'GL_ATI_fragment_shader',
    'glewImpl' => '__glewAlphaFragmentOp2ATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod'
  },
  'glAlphaFragmentOp3ATI' => {
    'argdata' => [
      [
        'op',
        'GLenum '
      ],
      [
        'dst',
        'GLuint '
      ],
      [
        'dstMod',
        'GLuint '
      ],
      [
        'arg1',
        'GLuint '
      ],
      [
        'arg1Rep',
        'GLuint '
      ],
      [
        'arg1Mod',
        'GLuint '
      ],
      [
        'arg2',
        'GLuint '
      ],
      [
        'arg2Rep',
        'GLuint '
      ],
      [
        'arg2Mod',
        'GLuint '
      ],
      [
        'arg3',
        'GLuint '
      ],
      [
        'arg3Rep',
        'GLuint '
      ],
      [
        'arg3Mod',
        'GLuint '
      ]
    ],
    'binding_name' => 'glAlphaFragmentOp3ATI',
    'feature' => 'GL_ATI_fragment_shader',
    'glewImpl' => '__glewAlphaFragmentOp3ATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod'
  },
  'glAlphaFunc' => {
    'argdata' => [
      [
        'func',
        'GLenum '
      ],
      [
        'ref',
        'GLclampf '
      ]
    ],
    'binding_name' => 'glAlphaFunc',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum func, GLclampf ref'
  },
  'glAlphaFuncQCOM' => {
    'argdata' => [
      [
        'func',
        'GLenum '
      ],
      [
        'ref',
        'GLclampf '
      ]
    ],
    'binding_name' => 'glAlphaFuncQCOM',
    'feature' => 'GL_QCOM_alpha_test',
    'glewImpl' => '__glewAlphaFuncQCOM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum func, GLclampf ref'
  },
  'glAlphaFuncx' => {
    'argdata' => [
      [
        'func',
        'GLenum '
      ],
      [
        'ref',
        'GLclampx '
      ]
    ],
    'binding_name' => 'glAlphaFuncx',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewAlphaFuncx',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum func, GLclampx ref'
  },
  'glApplyTextureEXT' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glApplyTextureEXT',
    'feature' => 'GL_EXT_light_texture',
    'glewImpl' => '__glewApplyTextureEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode'
  },
  'glAreProgramsResidentNV' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'ids',
        'const GLuint* '
      ],
      [
        'residences',
        'GLboolean *'
      ]
    ],
    'binding_name' => 'glAreProgramsResidentNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewAreProgramsResidentNV',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLsizei n, const GLuint* ids, GLboolean *residences'
  },
  'glAreTexturesResident' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'textures',
        'const GLuint *'
      ],
      [
        'residences',
        'GLboolean *'
      ]
    ],
    'binding_name' => 'glAreTexturesResident_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLsizei n, const GLuint *textures, GLboolean *residences'
  },
  'glAreTexturesResidentEXT' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'textures',
        'const GLuint* '
      ],
      [
        'residences',
        'GLboolean* '
      ]
    ],
    'binding_name' => 'glAreTexturesResidentEXT_c',
    'feature' => 'GL_EXT_texture_object',
    'glewImpl' => '__glewAreTexturesResidentEXT',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLsizei n, const GLuint* textures, GLboolean* residences'
  },
  'glAreVertexArraysResidentSGIX' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'arrays',
        'const GLuint* '
      ],
      [
        'residences',
        'GLboolean* '
      ]
    ],
    'binding_name' => 'glAreVertexArraysResidentSGIX_c',
    'feature' => 'GL_SGIX_vertex_array_object',
    'glewImpl' => '__glewAreVertexArraysResidentSGIX',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLsizei n, const GLuint* arrays, GLboolean* residences'
  },
  'glArrayElement' => {
    'argdata' => [
      [
        'i',
        'GLint '
      ]
    ],
    'binding_name' => 'glArrayElement',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint i'
  },
  'glArrayElementEXT' => {
    'argdata' => [
      [
        'i',
        'GLint '
      ]
    ],
    'binding_name' => 'glArrayElementEXT',
    'feature' => 'GL_EXT_vertex_array',
    'glewImpl' => '__glewArrayElementEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint i'
  },
  'glArrayObjectATI' => {
    'argdata' => [
      [
        'array',
        'GLenum '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLuint '
      ]
    ],
    'binding_name' => 'glArrayObjectATI',
    'feature' => 'GL_ATI_vertex_array_object',
    'glewImpl' => '__glewArrayObjectATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset'
  },
  'glAsyncMarkerSGIX' => {
    'argdata' => [
      [
        'marker',
        'GLuint '
      ]
    ],
    'binding_name' => 'glAsyncMarkerSGIX',
    'feature' => 'GL_SGIX_async',
    'glewImpl' => '__glewAsyncMarkerSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint marker'
  },
  'glAttachObjectARB' => {
    'argdata' => [
      [
        'containerObj',
        'GLhandleARB '
      ],
      [
        'obj',
        'GLhandleARB '
      ]
    ],
    'binding_name' => 'glAttachObjectARB',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewAttachObjectARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhandleARB containerObj, GLhandleARB obj'
  },
  'glAttachShader' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'shader',
        'GLuint '
      ]
    ],
    'binding_name' => 'glAttachShader',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewAttachShader',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLuint shader'
  },
  'glBegin' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBegin',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode'
  },
  'glBeginConditionalRender' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBeginConditionalRender',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewBeginConditionalRender',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum mode'
  },
  'glBeginConditionalRenderNV' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBeginConditionalRenderNV',
    'feature' => 'GL_NV_conditional_render',
    'glewImpl' => '__glewBeginConditionalRenderNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum mode'
  },
  'glBeginConditionalRenderNVX' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBeginConditionalRenderNVX',
    'feature' => 'GL_NVX_conditional_render',
    'glewImpl' => '__glewBeginConditionalRenderNVX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id'
  },
  'glBeginFragmentShaderATI' => {
    'binding_name' => 'glBeginFragmentShaderATI',
    'feature' => 'GL_ATI_fragment_shader',
    'glewImpl' => '__glewBeginFragmentShaderATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glBeginOcclusionQueryNV' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBeginOcclusionQueryNV',
    'feature' => 'GL_NV_occlusion_query',
    'glewImpl' => '__glewBeginOcclusionQueryNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id'
  },
  'glBeginPerfMonitorAMD' => {
    'argdata' => [
      [
        'monitor',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBeginPerfMonitorAMD',
    'feature' => 'GL_AMD_performance_monitor',
    'glewImpl' => '__glewBeginPerfMonitorAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint monitor'
  },
  'glBeginPerfQueryINTEL' => {
    'argdata' => [
      [
        'queryHandle',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBeginPerfQueryINTEL',
    'feature' => 'GL_INTEL_performance_query',
    'glewImpl' => '__glewBeginPerfQueryINTEL',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint queryHandle'
  },
  'glBeginQuery' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'id',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBeginQuery',
    'feature' => 'GL_VERSION_1_5',
    'glewImpl' => '__glewBeginQuery',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint id'
  },
  'glBeginQueryANGLE' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'id',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBeginQueryANGLE',
    'feature' => 'GL_ANGLE_timer_query',
    'glewImpl' => '__glewBeginQueryANGLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint id'
  },
  'glBeginQueryARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'id',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBeginQueryARB',
    'feature' => 'GL_ARB_occlusion_query',
    'glewImpl' => '__glewBeginQueryARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint id'
  },
  'glBeginQueryIndexed' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'id',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBeginQueryIndexed',
    'feature' => 'GL_ARB_transform_feedback3',
    'glewImpl' => '__glewBeginQueryIndexed',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLuint id'
  },
  'glBeginSceneEXT' => {
    'binding_name' => 'glBeginSceneEXT',
    'feature' => 'GL_EXT_scene_marker',
    'glewImpl' => '__glewBeginSceneEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glBeginTransformFeedback' => {
    'argdata' => [
      [
        'primitiveMode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBeginTransformFeedback',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewBeginTransformFeedback',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum primitiveMode'
  },
  'glBeginTransformFeedbackEXT' => {
    'argdata' => [
      [
        'primitiveMode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBeginTransformFeedbackEXT',
    'feature' => 'GL_EXT_transform_feedback',
    'glewImpl' => '__glewBeginTransformFeedbackEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum primitiveMode'
  },
  'glBeginTransformFeedbackNV' => {
    'argdata' => [
      [
        'primitiveMode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBeginTransformFeedbackNV',
    'feature' => 'GL_NV_transform_feedback',
    'glewImpl' => '__glewBeginTransformFeedbackNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum primitiveMode'
  },
  'glBeginVertexShaderEXT' => {
    'binding_name' => 'glBeginVertexShaderEXT',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewBeginVertexShaderEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glBeginVideoCaptureNV' => {
    'argdata' => [
      [
        'video_capture_slot',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBeginVideoCaptureNV',
    'feature' => 'GL_NV_video_capture',
    'glewImpl' => '__glewBeginVideoCaptureNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint video_capture_slot'
  },
  'glBindArraySetEXT' => {
    'argdata' => [
      [
        'arrayset',
        'const void *'
      ]
    ],
    'binding_name' => 'glBindArraySetEXT_c',
    'feature' => 'GL_EXT_vertex_array_setXXX',
    'glewImpl' => '__glewBindArraySetEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const void *arrayset'
  },
  'glBindAttribLocation' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'name',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glBindAttribLocation_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewBindAttribLocation',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLuint index, const GLchar* name'
  },
  'glBindAttribLocationARB' => {
    'argdata' => [
      [
        'programObj',
        'GLhandleARB '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'name',
        'const GLcharARB* '
      ]
    ],
    'binding_name' => 'glBindAttribLocationARB_c',
    'feature' => 'GL_ARB_vertex_shader',
    'glewImpl' => '__glewBindAttribLocationARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhandleARB programObj, GLuint index, const GLcharARB* name'
  },
  'glBindBuffer' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBindBuffer',
    'feature' => 'GL_VERSION_1_5',
    'glewImpl' => '__glewBindBuffer',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint buffer'
  },
  'glBindBufferARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBindBufferARB',
    'feature' => 'GL_ARB_vertex_buffer_object',
    'glewImpl' => '__glewBindBufferARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint buffer'
  },
  'glBindBufferBase' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBindBufferBase',
    'feature' => 'GL_ARB_uniform_buffer_object',
    'glewImpl' => '__glewBindBufferBase',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLuint buffer'
  },
  'glBindBufferBaseEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBindBufferBaseEXT',
    'feature' => 'GL_EXT_transform_feedback',
    'glewImpl' => '__glewBindBufferBaseEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLuint buffer'
  },
  'glBindBufferBaseNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBindBufferBaseNV',
    'feature' => 'GL_NV_transform_feedback',
    'glewImpl' => '__glewBindBufferBaseNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLuint buffer'
  },
  'glBindBufferOffsetEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLintptr '
      ]
    ],
    'binding_name' => 'glBindBufferOffsetEXT',
    'feature' => 'GL_EXT_transform_feedback',
    'glewImpl' => '__glewBindBufferOffsetEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLuint buffer, GLintptr offset'
  },
  'glBindBufferOffsetNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLintptr '
      ]
    ],
    'binding_name' => 'glBindBufferOffsetNV',
    'feature' => 'GL_NV_transform_feedback',
    'glewImpl' => '__glewBindBufferOffsetNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLuint buffer, GLintptr offset'
  },
  'glBindBufferRange' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ]
    ],
    'binding_name' => 'glBindBufferRange',
    'feature' => 'GL_ARB_uniform_buffer_object',
    'glewImpl' => '__glewBindBufferRange',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size'
  },
  'glBindBufferRangeEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ]
    ],
    'binding_name' => 'glBindBufferRangeEXT',
    'feature' => 'GL_EXT_transform_feedback',
    'glewImpl' => '__glewBindBufferRangeEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size'
  },
  'glBindBufferRangeNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ]
    ],
    'binding_name' => 'glBindBufferRangeNV',
    'feature' => 'GL_NV_transform_feedback',
    'glewImpl' => '__glewBindBufferRangeNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size'
  },
  'glBindBuffersBase' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'first',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'buffers',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glBindBuffersBase_c',
    'feature' => 'GL_ARB_multi_bind',
    'glewImpl' => '__glewBindBuffersBase',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint first, GLsizei count, const GLuint* buffers'
  },
  'glBindBuffersRange' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'first',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'buffers',
        'const GLuint* '
      ],
      [
        'offsets',
        'const GLintptr *'
      ],
      [
        'sizes',
        'const GLsizeiptr *'
      ]
    ],
    'binding_name' => 'glBindBuffersRange_c',
    'feature' => 'GL_ARB_multi_bind',
    'glewImpl' => '__glewBindBuffersRange',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr *offsets, const GLsizeiptr *sizes'
  },
  'glBindFragDataLocation' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'colorNumber',
        'GLuint '
      ],
      [
        'name',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glBindFragDataLocation_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewBindFragDataLocation',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLuint colorNumber, const GLchar* name'
  },
  'glBindFragDataLocationEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'color',
        'GLuint '
      ],
      [
        'name',
        'const GLchar *'
      ]
    ],
    'binding_name' => 'glBindFragDataLocationEXT_c',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewBindFragDataLocationEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLuint color, const GLchar *name'
  },
  'glBindFragDataLocationIndexed' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'colorNumber',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'name',
        'const GLchar * '
      ]
    ],
    'binding_name' => 'glBindFragDataLocationIndexed_c',
    'feature' => 'GL_ARB_blend_func_extended',
    'glewImpl' => '__glewBindFragDataLocationIndexed',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLuint colorNumber, GLuint index, const GLchar * name'
  },
  'glBindFragDataLocationIndexedEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'colorNumber',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'name',
        'const GLchar * '
      ]
    ],
    'binding_name' => 'glBindFragDataLocationIndexedEXT_c',
    'feature' => 'GL_EXT_blend_func_extended',
    'glewImpl' => '__glewBindFragDataLocationIndexedEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLuint colorNumber, GLuint index, const GLchar * name'
  },
  'glBindFragmentShaderATI' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBindFragmentShaderATI',
    'feature' => 'GL_ATI_fragment_shader',
    'glewImpl' => '__glewBindFragmentShaderATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id'
  },
  'glBindFramebuffer' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'framebuffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBindFramebuffer',
    'feature' => 'GL_ARB_framebuffer_object',
    'glewImpl' => '__glewBindFramebuffer',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint framebuffer'
  },
  'glBindFramebufferEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'framebuffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBindFramebufferEXT',
    'feature' => 'GL_EXT_framebuffer_object',
    'glewImpl' => '__glewBindFramebufferEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint framebuffer'
  },
  'glBindImageTexture' => {
    'argdata' => [
      [
        'unit',
        'GLuint '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'layered',
        'GLboolean '
      ],
      [
        'layer',
        'GLint '
      ],
      [
        'access',
        'GLenum '
      ],
      [
        'format',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBindImageTexture',
    'feature' => 'GL_ARB_shader_image_load_store',
    'glewImpl' => '__glewBindImageTexture',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format'
  },
  'glBindImageTextureEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'layered',
        'GLboolean '
      ],
      [
        'layer',
        'GLint '
      ],
      [
        'access',
        'GLenum '
      ],
      [
        'format',
        'GLint '
      ]
    ],
    'binding_name' => 'glBindImageTextureEXT',
    'feature' => 'GL_EXT_shader_image_load_store',
    'glewImpl' => '__glewBindImageTextureEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format'
  },
  'glBindImageTextures' => {
    'argdata' => [
      [
        'first',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'textures',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glBindImageTextures_c',
    'feature' => 'GL_ARB_multi_bind',
    'glewImpl' => '__glewBindImageTextures',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint first, GLsizei count, const GLuint* textures'
  },
  'glBindLightParameterEXT' => {
    'argdata' => [
      [
        'light',
        'GLenum '
      ],
      [
        'value',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBindLightParameterEXT',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewBindLightParameterEXT',
    'glewtype' => 'fun',
    'restype' => 'GLuint',
    'signature' => 'GLenum light, GLenum value'
  },
  'glBindMaterialParameterEXT' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'value',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBindMaterialParameterEXT',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewBindMaterialParameterEXT',
    'glewtype' => 'fun',
    'restype' => 'GLuint',
    'signature' => 'GLenum face, GLenum value'
  },
  'glBindMultiTextureEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBindMultiTextureEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewBindMultiTextureEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLuint texture'
  },
  'glBindParameterEXT' => {
    'argdata' => [
      [
        'value',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBindParameterEXT',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewBindParameterEXT',
    'glewtype' => 'fun',
    'restype' => 'GLuint',
    'signature' => 'GLenum value'
  },
  'glBindProgramARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'program',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBindProgramARB',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewBindProgramARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint program'
  },
  'glBindProgramNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'id',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBindProgramNV',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewBindProgramNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint id'
  },
  'glBindProgramPipeline' => {
    'argdata' => [
      [
        'pipeline',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBindProgramPipeline',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewBindProgramPipeline',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint pipeline'
  },
  'glBindRenderbuffer' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'renderbuffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBindRenderbuffer',
    'feature' => 'GL_ARB_framebuffer_object',
    'glewImpl' => '__glewBindRenderbuffer',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint renderbuffer'
  },
  'glBindRenderbufferEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'renderbuffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBindRenderbufferEXT',
    'feature' => 'GL_EXT_framebuffer_object',
    'glewImpl' => '__glewBindRenderbufferEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint renderbuffer'
  },
  'glBindSampler' => {
    'argdata' => [
      [
        'unit',
        'GLuint '
      ],
      [
        'sampler',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBindSampler',
    'feature' => 'GL_ARB_sampler_objects',
    'glewImpl' => '__glewBindSampler',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint unit, GLuint sampler'
  },
  'glBindSamplers' => {
    'argdata' => [
      [
        'first',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'samplers',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glBindSamplers_c',
    'feature' => 'GL_ARB_multi_bind',
    'glewImpl' => '__glewBindSamplers',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint first, GLsizei count, const GLuint* samplers'
  },
  'glBindTexGenParameterEXT' => {
    'argdata' => [
      [
        'unit',
        'GLenum '
      ],
      [
        'coord',
        'GLenum '
      ],
      [
        'value',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBindTexGenParameterEXT',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewBindTexGenParameterEXT',
    'glewtype' => 'fun',
    'restype' => 'GLuint',
    'signature' => 'GLenum unit, GLenum coord, GLenum value'
  },
  'glBindTexture' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBindTexture',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint texture'
  },
  'glBindTextureEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBindTextureEXT',
    'feature' => 'GL_EXT_texture_object',
    'glewImpl' => '__glewBindTextureEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint texture'
  },
  'glBindTextureUnit' => {
    'argdata' => [
      [
        'unit',
        'GLuint '
      ],
      [
        'texture',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBindTextureUnit',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewBindTextureUnit',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint unit, GLuint texture'
  },
  'glBindTextureUnitParameterEXT' => {
    'argdata' => [
      [
        'unit',
        'GLenum '
      ],
      [
        'value',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBindTextureUnitParameterEXT',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewBindTextureUnitParameterEXT',
    'glewtype' => 'fun',
    'restype' => 'GLuint',
    'signature' => 'GLenum unit, GLenum value'
  },
  'glBindTextures' => {
    'argdata' => [
      [
        'first',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'textures',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glBindTextures_c',
    'feature' => 'GL_ARB_multi_bind',
    'glewImpl' => '__glewBindTextures',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint first, GLsizei count, const GLuint* textures'
  },
  'glBindTransformFeedback' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'id',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBindTransformFeedback',
    'feature' => 'GL_ARB_transform_feedback2',
    'glewImpl' => '__glewBindTransformFeedback',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint id'
  },
  'glBindTransformFeedbackNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'id',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBindTransformFeedbackNV',
    'feature' => 'GL_NV_transform_feedback2',
    'glewImpl' => '__glewBindTransformFeedbackNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint id'
  },
  'glBindVertexArray' => {
    'argdata' => [
      [
        'array',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBindVertexArray',
    'feature' => 'GL_ARB_vertex_array_object',
    'glewImpl' => '__glewBindVertexArray',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint array'
  },
  'glBindVertexArrayAPPLE' => {
    'argdata' => [
      [
        'array',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBindVertexArrayAPPLE',
    'feature' => 'GL_APPLE_vertex_array_object',
    'glewImpl' => '__glewBindVertexArrayAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint array'
  },
  'glBindVertexArraySGIX' => {
    'argdata' => [
      [
        'array',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBindVertexArraySGIX',
    'feature' => 'GL_SGIX_vertex_array_object',
    'glewImpl' => '__glewBindVertexArraySGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint array'
  },
  'glBindVertexBuffer' => {
    'argdata' => [
      [
        'bindingindex',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'stride',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glBindVertexBuffer',
    'feature' => 'GL_ARB_vertex_attrib_binding',
    'glewImpl' => '__glewBindVertexBuffer',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride'
  },
  'glBindVertexBuffers' => {
    'argdata' => [
      [
        'first',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'buffers',
        'const GLuint* '
      ],
      [
        'offsets',
        'const GLintptr *'
      ],
      [
        'strides',
        'const GLsizei *'
      ]
    ],
    'binding_name' => 'glBindVertexBuffers_c',
    'feature' => 'GL_ARB_multi_bind',
    'glewImpl' => '__glewBindVertexBuffers',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint first, GLsizei count, const GLuint* buffers, const GLintptr *offsets, const GLsizei *strides'
  },
  'glBindVertexShaderEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBindVertexShaderEXT',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewBindVertexShaderEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id'
  },
  'glBindVideoCaptureStreamBufferNV' => {
    'argdata' => [
      [
        'video_capture_slot',
        'GLuint '
      ],
      [
        'stream',
        'GLuint '
      ],
      [
        'frame_region',
        'GLenum '
      ],
      [
        'offset',
        'GLintptrARB '
      ]
    ],
    'binding_name' => 'glBindVideoCaptureStreamBufferNV',
    'feature' => 'GL_NV_video_capture',
    'glewImpl' => '__glewBindVideoCaptureStreamBufferNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset'
  },
  'glBindVideoCaptureStreamTextureNV' => {
    'argdata' => [
      [
        'video_capture_slot',
        'GLuint '
      ],
      [
        'stream',
        'GLuint '
      ],
      [
        'frame_region',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ]
    ],
    'binding_name' => 'glBindVideoCaptureStreamTextureNV',
    'feature' => 'GL_NV_video_capture',
    'glewImpl' => '__glewBindVideoCaptureStreamTextureNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture'
  },
  'glBinormalPointerEXT' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'void *'
      ]
    ],
    'binding_name' => 'glBinormalPointerEXT_c',
    'feature' => 'GL_EXT_coordinate_frame',
    'glewImpl' => '__glewBinormalPointerEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLsizei stride, void *pointer'
  },
  'glBitmap' => {
    'argdata' => [
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'xorig',
        'GLfloat '
      ],
      [
        'yorig',
        'GLfloat '
      ],
      [
        'xmove',
        'GLfloat '
      ],
      [
        'ymove',
        'GLfloat '
      ],
      [
        'bitmap',
        'const GLubyte *'
      ]
    ],
    'binding_name' => 'glBitmap_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap'
  },
  'glBlendBarrierKHR' => {
    'binding_name' => 'glBlendBarrierKHR',
    'feature' => 'GL_KHR_blend_equation_advanced',
    'glewImpl' => '__glewBlendBarrierKHR',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glBlendBarrierNV' => {
    'binding_name' => 'glBlendBarrierNV',
    'feature' => 'GL_NV_blend_equation_advanced',
    'glewImpl' => '__glewBlendBarrierNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glBlendColor' => {
    'argdata' => [
      [
        'red',
        'GLclampf '
      ],
      [
        'green',
        'GLclampf '
      ],
      [
        'blue',
        'GLclampf '
      ],
      [
        'alpha',
        'GLclampf '
      ]
    ],
    'binding_name' => 'glBlendColor',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewBlendColor',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha'
  },
  'glBlendColorEXT' => {
    'argdata' => [
      [
        'red',
        'GLclampf '
      ],
      [
        'green',
        'GLclampf '
      ],
      [
        'blue',
        'GLclampf '
      ],
      [
        'alpha',
        'GLclampf '
      ]
    ],
    'binding_name' => 'glBlendColorEXT',
    'feature' => 'GL_EXT_blend_color',
    'glewImpl' => '__glewBlendColorEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha'
  },
  'glBlendEquation' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlendEquation',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewBlendEquation',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode'
  },
  'glBlendEquationEXT' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlendEquationEXT',
    'feature' => 'GL_EXT_blend_minmax',
    'glewImpl' => '__glewBlendEquationEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode'
  },
  'glBlendEquationIndexedAMD' => {
    'argdata' => [
      [
        'buf',
        'GLuint '
      ],
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlendEquationIndexedAMD',
    'feature' => 'GL_AMD_draw_buffers_blend',
    'glewImpl' => '__glewBlendEquationIndexedAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buf, GLenum mode'
  },
  'glBlendEquationSeparate' => {
    'argdata' => [
      [
        'modeRGB',
        'GLenum '
      ],
      [
        'modeAlpha',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlendEquationSeparate',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewBlendEquationSeparate',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum modeRGB, GLenum modeAlpha'
  },
  'glBlendEquationSeparateEXT' => {
    'argdata' => [
      [
        'modeRGB',
        'GLenum '
      ],
      [
        'modeAlpha',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlendEquationSeparateEXT',
    'feature' => 'GL_EXT_blend_equation_separate',
    'glewImpl' => '__glewBlendEquationSeparateEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum modeRGB, GLenum modeAlpha'
  },
  'glBlendEquationSeparateIndexedAMD' => {
    'argdata' => [
      [
        'buf',
        'GLuint '
      ],
      [
        'modeRGB',
        'GLenum '
      ],
      [
        'modeAlpha',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlendEquationSeparateIndexedAMD',
    'feature' => 'GL_AMD_draw_buffers_blend',
    'glewImpl' => '__glewBlendEquationSeparateIndexedAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buf, GLenum modeRGB, GLenum modeAlpha'
  },
  'glBlendEquationSeparatei' => {
    'argdata' => [
      [
        'buf',
        'GLuint '
      ],
      [
        'modeRGB',
        'GLenum '
      ],
      [
        'modeAlpha',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlendEquationSeparatei',
    'feature' => 'GL_VERSION_4_0',
    'glewImpl' => '__glewBlendEquationSeparatei',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buf, GLenum modeRGB, GLenum modeAlpha'
  },
  'glBlendEquationSeparateiARB' => {
    'argdata' => [
      [
        'buf',
        'GLuint '
      ],
      [
        'modeRGB',
        'GLenum '
      ],
      [
        'modeAlpha',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlendEquationSeparateiARB',
    'feature' => 'GL_ARB_draw_buffers_blend',
    'glewImpl' => '__glewBlendEquationSeparateiARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buf, GLenum modeRGB, GLenum modeAlpha'
  },
  'glBlendEquationSeparateiEXT' => {
    'argdata' => [
      [
        'buf',
        'GLuint '
      ],
      [
        'modeRGB',
        'GLenum '
      ],
      [
        'modeAlpha',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlendEquationSeparateiEXT',
    'feature' => 'GL_EXT_draw_buffers_indexed',
    'glewImpl' => '__glewBlendEquationSeparateiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buf, GLenum modeRGB, GLenum modeAlpha'
  },
  'glBlendEquationi' => {
    'argdata' => [
      [
        'buf',
        'GLuint '
      ],
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlendEquationi',
    'feature' => 'GL_VERSION_4_0',
    'glewImpl' => '__glewBlendEquationi',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buf, GLenum mode'
  },
  'glBlendEquationiARB' => {
    'argdata' => [
      [
        'buf',
        'GLuint '
      ],
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlendEquationiARB',
    'feature' => 'GL_ARB_draw_buffers_blend',
    'glewImpl' => '__glewBlendEquationiARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buf, GLenum mode'
  },
  'glBlendEquationiEXT' => {
    'argdata' => [
      [
        'buf',
        'GLuint '
      ],
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlendEquationiEXT',
    'feature' => 'GL_EXT_draw_buffers_indexed',
    'glewImpl' => '__glewBlendEquationiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buf, GLenum mode'
  },
  'glBlendFunc' => {
    'argdata' => [
      [
        'sfactor',
        'GLenum '
      ],
      [
        'dfactor',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlendFunc',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum sfactor, GLenum dfactor'
  },
  'glBlendFuncIndexedAMD' => {
    'argdata' => [
      [
        'buf',
        'GLuint '
      ],
      [
        'src',
        'GLenum '
      ],
      [
        'dst',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlendFuncIndexedAMD',
    'feature' => 'GL_AMD_draw_buffers_blend',
    'glewImpl' => '__glewBlendFuncIndexedAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buf, GLenum src, GLenum dst'
  },
  'glBlendFuncSeparate' => {
    'argdata' => [
      [
        'sfactorRGB',
        'GLenum '
      ],
      [
        'dfactorRGB',
        'GLenum '
      ],
      [
        'sfactorAlpha',
        'GLenum '
      ],
      [
        'dfactorAlpha',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlendFuncSeparate',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewBlendFuncSeparate',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha'
  },
  'glBlendFuncSeparateEXT' => {
    'argdata' => [
      [
        'sfactorRGB',
        'GLenum '
      ],
      [
        'dfactorRGB',
        'GLenum '
      ],
      [
        'sfactorAlpha',
        'GLenum '
      ],
      [
        'dfactorAlpha',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlendFuncSeparateEXT',
    'feature' => 'GL_EXT_blend_func_separate',
    'glewImpl' => '__glewBlendFuncSeparateEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha'
  },
  'glBlendFuncSeparateIndexedAMD' => {
    'argdata' => [
      [
        'buf',
        'GLuint '
      ],
      [
        'srcRGB',
        'GLenum '
      ],
      [
        'dstRGB',
        'GLenum '
      ],
      [
        'srcAlpha',
        'GLenum '
      ],
      [
        'dstAlpha',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlendFuncSeparateIndexedAMD',
    'feature' => 'GL_AMD_draw_buffers_blend',
    'glewImpl' => '__glewBlendFuncSeparateIndexedAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha'
  },
  'glBlendFuncSeparatei' => {
    'argdata' => [
      [
        'buf',
        'GLuint '
      ],
      [
        'srcRGB',
        'GLenum '
      ],
      [
        'dstRGB',
        'GLenum '
      ],
      [
        'srcAlpha',
        'GLenum '
      ],
      [
        'dstAlpha',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlendFuncSeparatei',
    'feature' => 'GL_VERSION_4_0',
    'glewImpl' => '__glewBlendFuncSeparatei',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha'
  },
  'glBlendFuncSeparateiARB' => {
    'argdata' => [
      [
        'buf',
        'GLuint '
      ],
      [
        'srcRGB',
        'GLenum '
      ],
      [
        'dstRGB',
        'GLenum '
      ],
      [
        'srcAlpha',
        'GLenum '
      ],
      [
        'dstAlpha',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlendFuncSeparateiARB',
    'feature' => 'GL_ARB_draw_buffers_blend',
    'glewImpl' => '__glewBlendFuncSeparateiARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha'
  },
  'glBlendFuncSeparateiEXT' => {
    'argdata' => [
      [
        'buf',
        'GLuint '
      ],
      [
        'srcRGB',
        'GLenum '
      ],
      [
        'dstRGB',
        'GLenum '
      ],
      [
        'srcAlpha',
        'GLenum '
      ],
      [
        'dstAlpha',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlendFuncSeparateiEXT',
    'feature' => 'GL_EXT_draw_buffers_indexed',
    'glewImpl' => '__glewBlendFuncSeparateiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha'
  },
  'glBlendFunci' => {
    'argdata' => [
      [
        'buf',
        'GLuint '
      ],
      [
        'src',
        'GLenum '
      ],
      [
        'dst',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlendFunci',
    'feature' => 'GL_VERSION_4_0',
    'glewImpl' => '__glewBlendFunci',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buf, GLenum src, GLenum dst'
  },
  'glBlendFunciARB' => {
    'argdata' => [
      [
        'buf',
        'GLuint '
      ],
      [
        'src',
        'GLenum '
      ],
      [
        'dst',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlendFunciARB',
    'feature' => 'GL_ARB_draw_buffers_blend',
    'glewImpl' => '__glewBlendFunciARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buf, GLenum src, GLenum dst'
  },
  'glBlendFunciEXT' => {
    'argdata' => [
      [
        'buf',
        'GLuint '
      ],
      [
        'src',
        'GLenum '
      ],
      [
        'dst',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlendFunciEXT',
    'feature' => 'GL_EXT_draw_buffers_indexed',
    'glewImpl' => '__glewBlendFunciEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buf, GLenum src, GLenum dst'
  },
  'glBlendParameteriNV' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'value',
        'GLint '
      ]
    ],
    'binding_name' => 'glBlendParameteriNV',
    'feature' => 'GL_NV_blend_equation_advanced',
    'glewImpl' => '__glewBlendParameteriNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint value'
  },
  'glBlitFramebuffer' => {
    'argdata' => [
      [
        'srcX0',
        'GLint '
      ],
      [
        'srcY0',
        'GLint '
      ],
      [
        'srcX1',
        'GLint '
      ],
      [
        'srcY1',
        'GLint '
      ],
      [
        'dstX0',
        'GLint '
      ],
      [
        'dstY0',
        'GLint '
      ],
      [
        'dstX1',
        'GLint '
      ],
      [
        'dstY1',
        'GLint '
      ],
      [
        'mask',
        'GLbitfield '
      ],
      [
        'filter',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlitFramebuffer',
    'feature' => 'GL_ARB_framebuffer_object',
    'glewImpl' => '__glewBlitFramebuffer',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter'
  },
  'glBlitFramebufferANGLE' => {
    'argdata' => [
      [
        'srcX0',
        'GLint '
      ],
      [
        'srcY0',
        'GLint '
      ],
      [
        'srcX1',
        'GLint '
      ],
      [
        'srcY1',
        'GLint '
      ],
      [
        'dstX0',
        'GLint '
      ],
      [
        'dstY0',
        'GLint '
      ],
      [
        'dstX1',
        'GLint '
      ],
      [
        'dstY1',
        'GLint '
      ],
      [
        'mask',
        'GLbitfield '
      ],
      [
        'filter',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlitFramebufferANGLE',
    'feature' => 'GL_ANGLE_framebuffer_blit',
    'glewImpl' => '__glewBlitFramebufferANGLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter'
  },
  'glBlitFramebufferEXT' => {
    'argdata' => [
      [
        'srcX0',
        'GLint '
      ],
      [
        'srcY0',
        'GLint '
      ],
      [
        'srcX1',
        'GLint '
      ],
      [
        'srcY1',
        'GLint '
      ],
      [
        'dstX0',
        'GLint '
      ],
      [
        'dstY0',
        'GLint '
      ],
      [
        'dstX1',
        'GLint '
      ],
      [
        'dstY1',
        'GLint '
      ],
      [
        'mask',
        'GLbitfield '
      ],
      [
        'filter',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlitFramebufferEXT',
    'feature' => 'GL_EXT_framebuffer_blit',
    'glewImpl' => '__glewBlitFramebufferEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter'
  },
  'glBlitFramebufferNV' => {
    'argdata' => [
      [
        'srcX0',
        'GLint '
      ],
      [
        'srcY0',
        'GLint '
      ],
      [
        'srcX1',
        'GLint '
      ],
      [
        'srcY1',
        'GLint '
      ],
      [
        'dstX0',
        'GLint '
      ],
      [
        'dstY0',
        'GLint '
      ],
      [
        'dstX1',
        'GLint '
      ],
      [
        'dstY1',
        'GLint '
      ],
      [
        'mask',
        'GLbitfield '
      ],
      [
        'filter',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlitFramebufferNV',
    'feature' => 'GL_NV_framebuffer_blit',
    'glewImpl' => '__glewBlitFramebufferNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter'
  },
  'glBlitNamedFramebuffer' => {
    'argdata' => [
      [
        'readFramebuffer',
        'GLuint '
      ],
      [
        'drawFramebuffer',
        'GLuint '
      ],
      [
        'srcX0',
        'GLint '
      ],
      [
        'srcY0',
        'GLint '
      ],
      [
        'srcX1',
        'GLint '
      ],
      [
        'srcY1',
        'GLint '
      ],
      [
        'dstX0',
        'GLint '
      ],
      [
        'dstY0',
        'GLint '
      ],
      [
        'dstX1',
        'GLint '
      ],
      [
        'dstY1',
        'GLint '
      ],
      [
        'mask',
        'GLbitfield '
      ],
      [
        'filter',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBlitNamedFramebuffer',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewBlitNamedFramebuffer',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter'
  },
  'glBufferAddressRangeNV' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'address',
        'GLuint64EXT '
      ],
      [
        'length',
        'GLsizeiptr '
      ]
    ],
    'binding_name' => 'glBufferAddressRangeNV',
    'feature' => 'GL_NV_vertex_buffer_unified_memory',
    'glewImpl' => '__glewBufferAddressRangeNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length'
  },
  'glBufferData' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'size',
        'GLsizeiptr '
      ],
      [
        'data',
        'const void* '
      ],
      [
        'usage',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBufferData_c',
    'feature' => 'GL_VERSION_1_5',
    'glewImpl' => '__glewBufferData',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizeiptr size, const void* data, GLenum usage'
  },
  'glBufferDataARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'size',
        'GLsizeiptrARB '
      ],
      [
        'data',
        'const void *'
      ],
      [
        'usage',
        'GLenum '
      ]
    ],
    'binding_name' => 'glBufferDataARB_c',
    'feature' => 'GL_ARB_vertex_buffer_object',
    'glewImpl' => '__glewBufferDataARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizeiptrARB size, const void *data, GLenum usage'
  },
  'glBufferPageCommitmentARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ],
      [
        'commit',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glBufferPageCommitmentARB',
    'feature' => 'GL_ARB_sparse_buffer',
    'glewImpl' => '__glewBufferPageCommitmentARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit'
  },
  'glBufferParameteriAPPLE' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glBufferParameteriAPPLE',
    'feature' => 'GL_APPLE_flush_buffer_range',
    'glewImpl' => '__glewBufferParameteriAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint param'
  },
  'glBufferRegionEnabled' => {
    'binding_name' => 'glBufferRegionEnabled',
    'feature' => 'GL_KTX_buffer_region',
    'glewImpl' => '__glewBufferRegionEnabled',
    'glewtype' => 'fun',
    'restype' => 'GLuint',
    'signature' => 'void'
  },
  'glBufferStorage' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'size',
        'GLsizeiptr '
      ],
      [
        'data',
        'const void *'
      ],
      [
        'flags',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glBufferStorage_c',
    'feature' => 'GL_ARB_buffer_storage',
    'glewImpl' => '__glewBufferStorage',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizeiptr size, const void *data, GLbitfield flags'
  },
  'glBufferStorageEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'size',
        'GLsizeiptr '
      ],
      [
        'data',
        'const void *'
      ],
      [
        'flags',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glBufferStorageEXT_c',
    'feature' => 'GL_EXT_buffer_storage',
    'glewImpl' => '__glewBufferStorageEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizeiptr size, const void *data, GLbitfield flags'
  },
  'glBufferStorageExternalEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ],
      [
        'clientBuffer',
        'GLeglClientBufferEXT '
      ],
      [
        'flags',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glBufferStorageExternalEXT',
    'feature' => 'GL_EXT_external_buffer',
    'glewImpl' => '__glewBufferStorageExternalEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags'
  },
  'glBufferStorageMemEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'size',
        'GLsizeiptr '
      ],
      [
        'memory',
        'GLuint '
      ],
      [
        'offset',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glBufferStorageMemEXT',
    'feature' => 'GL_EXT_memory_object',
    'glewImpl' => '__glewBufferStorageMemEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset'
  },
  'glBufferSubData' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ],
      [
        'data',
        'const void* '
      ]
    ],
    'binding_name' => 'glBufferSubData_c',
    'feature' => 'GL_VERSION_1_5',
    'glewImpl' => '__glewBufferSubData',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLintptr offset, GLsizeiptr size, const void* data'
  },
  'glBufferSubDataARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'offset',
        'GLintptrARB '
      ],
      [
        'size',
        'GLsizeiptrARB '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glBufferSubDataARB_c',
    'feature' => 'GL_ARB_vertex_buffer_object',
    'glewImpl' => '__glewBufferSubDataARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data'
  },
  'glCallCommandListNV' => {
    'argdata' => [
      [
        'list',
        'GLuint '
      ]
    ],
    'binding_name' => 'glCallCommandListNV',
    'feature' => 'GL_NV_command_list',
    'glewImpl' => '__glewCallCommandListNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint list'
  },
  'glCallList' => {
    'argdata' => [
      [
        'list',
        'GLuint '
      ]
    ],
    'binding_name' => 'glCallList',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint list'
  },
  'glCallLists' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'lists',
        'const void *'
      ]
    ],
    'binding_name' => 'glCallLists_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLenum type, const void *lists'
  },
  'glCheckFramebufferStatus' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glCheckFramebufferStatus',
    'feature' => 'GL_ARB_framebuffer_object',
    'glewImpl' => '__glewCheckFramebufferStatus',
    'glewtype' => 'fun',
    'restype' => 'GLenum',
    'signature' => 'GLenum target'
  },
  'glCheckFramebufferStatusEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glCheckFramebufferStatusEXT',
    'feature' => 'GL_EXT_framebuffer_object',
    'glewImpl' => '__glewCheckFramebufferStatusEXT',
    'glewtype' => 'fun',
    'restype' => 'GLenum',
    'signature' => 'GLenum target'
  },
  'glCheckNamedFramebufferStatus' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glCheckNamedFramebufferStatus',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewCheckNamedFramebufferStatus',
    'glewtype' => 'fun',
    'restype' => 'GLenum',
    'signature' => 'GLuint framebuffer, GLenum target'
  },
  'glCheckNamedFramebufferStatusEXT' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glCheckNamedFramebufferStatusEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewCheckNamedFramebufferStatusEXT',
    'glewtype' => 'fun',
    'restype' => 'GLenum',
    'signature' => 'GLuint framebuffer, GLenum target'
  },
  'glClampColor' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'clamp',
        'GLenum '
      ]
    ],
    'binding_name' => 'glClampColor',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewClampColor',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum clamp'
  },
  'glClampColorARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'clamp',
        'GLenum '
      ]
    ],
    'binding_name' => 'glClampColorARB',
    'feature' => 'GL_ARB_color_buffer_float',
    'glewImpl' => '__glewClampColorARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum clamp'
  },
  'glClear' => {
    'argdata' => [
      [
        'mask',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glClear',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLbitfield mask'
  },
  'glClearAccum' => {
    'argdata' => [
      [
        'red',
        'GLfloat '
      ],
      [
        'green',
        'GLfloat '
      ],
      [
        'blue',
        'GLfloat '
      ],
      [
        'alpha',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glClearAccum',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha'
  },
  'glClearBufferData' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glClearBufferData_c',
    'feature' => 'GL_ARB_clear_buffer_object',
    'glewImpl' => '__glewClearBufferData',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data'
  },
  'glClearBufferSubData' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glClearBufferSubData_c',
    'feature' => 'GL_ARB_clear_buffer_object',
    'glewImpl' => '__glewClearBufferSubData',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data'
  },
  'glClearBufferfi' => {
    'argdata' => [
      [
        'buffer',
        'GLenum '
      ],
      [
        'drawBuffer',
        'GLint '
      ],
      [
        'depth',
        'GLfloat '
      ],
      [
        'stencil',
        'GLint '
      ]
    ],
    'binding_name' => 'glClearBufferfi',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewClearBufferfi',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum buffer, GLint drawBuffer, GLfloat depth, GLint stencil'
  },
  'glClearBufferfv' => {
    'argdata' => [
      [
        'buffer',
        'GLenum '
      ],
      [
        'drawBuffer',
        'GLint '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glClearBufferfv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewClearBufferfv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum buffer, GLint drawBuffer, const GLfloat* value'
  },
  'glClearBufferiv' => {
    'argdata' => [
      [
        'buffer',
        'GLenum '
      ],
      [
        'drawBuffer',
        'GLint '
      ],
      [
        'value',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glClearBufferiv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewClearBufferiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum buffer, GLint drawBuffer, const GLint* value'
  },
  'glClearBufferuiv' => {
    'argdata' => [
      [
        'buffer',
        'GLenum '
      ],
      [
        'drawBuffer',
        'GLint '
      ],
      [
        'value',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glClearBufferuiv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewClearBufferuiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum buffer, GLint drawBuffer, const GLuint* value'
  },
  'glClearColor' => {
    'argdata' => [
      [
        'red',
        'GLclampf '
      ],
      [
        'green',
        'GLclampf '
      ],
      [
        'blue',
        'GLclampf '
      ],
      [
        'alpha',
        'GLclampf '
      ]
    ],
    'binding_name' => 'glClearColor',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha'
  },
  'glClearColorIiEXT' => {
    'argdata' => [
      [
        'red',
        'GLint '
      ],
      [
        'green',
        'GLint '
      ],
      [
        'blue',
        'GLint '
      ],
      [
        'alpha',
        'GLint '
      ]
    ],
    'binding_name' => 'glClearColorIiEXT',
    'feature' => 'GL_EXT_texture_integer',
    'glewImpl' => '__glewClearColorIiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint red, GLint green, GLint blue, GLint alpha'
  },
  'glClearColorIuiEXT' => {
    'argdata' => [
      [
        'red',
        'GLuint '
      ],
      [
        'green',
        'GLuint '
      ],
      [
        'blue',
        'GLuint '
      ],
      [
        'alpha',
        'GLuint '
      ]
    ],
    'binding_name' => 'glClearColorIuiEXT',
    'feature' => 'GL_EXT_texture_integer',
    'glewImpl' => '__glewClearColorIuiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint red, GLuint green, GLuint blue, GLuint alpha'
  },
  'glClearColorx' => {
    'argdata' => [
      [
        'red',
        'GLclampx '
      ],
      [
        'green',
        'GLclampx '
      ],
      [
        'blue',
        'GLclampx '
      ],
      [
        'alpha',
        'GLclampx '
      ]
    ],
    'binding_name' => 'glClearColorx',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewClearColorx',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha'
  },
  'glClearDepth' => {
    'argdata' => [
      [
        'depth',
        'GLclampd '
      ]
    ],
    'binding_name' => 'glClearDepth',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLclampd depth'
  },
  'glClearDepthdNV' => {
    'argdata' => [
      [
        'depth',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glClearDepthdNV',
    'feature' => 'GL_NV_depth_buffer_float',
    'glewImpl' => '__glewClearDepthdNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble depth'
  },
  'glClearDepthf' => {
    'argdata' => [
      [
        'd',
        'GLclampf '
      ]
    ],
    'binding_name' => 'glClearDepthf',
    'feature' => 'GL_ARB_ES2_compatibility',
    'glewImpl' => '__glewClearDepthf',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLclampf d'
  },
  'glClearDepthx' => {
    'argdata' => [
      [
        'depth',
        'GLclampx '
      ]
    ],
    'binding_name' => 'glClearDepthx',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewClearDepthx',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLclampx depth'
  },
  'glClearIndex' => {
    'argdata' => [
      [
        'c',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glClearIndex',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat c'
  },
  'glClearNamedBufferData' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glClearNamedBufferData_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewClearNamedBufferData',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data'
  },
  'glClearNamedBufferDataEXT' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glClearNamedBufferDataEXT_c',
    'feature' => 'GL_ARB_clear_buffer_object',
    'glewImpl' => '__glewClearNamedBufferDataEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data'
  },
  'glClearNamedBufferSubData' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glClearNamedBufferSubData_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewClearNamedBufferSubData',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data'
  },
  'glClearNamedBufferSubDataEXT' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glClearNamedBufferSubDataEXT_c',
    'feature' => 'GL_ARB_clear_buffer_object',
    'glewImpl' => '__glewClearNamedBufferSubDataEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data'
  },
  'glClearNamedFramebufferfi' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'buffer',
        'GLenum '
      ],
      [
        'drawbuffer',
        'GLint '
      ],
      [
        'depth',
        'GLfloat '
      ],
      [
        'stencil',
        'GLint '
      ]
    ],
    'binding_name' => 'glClearNamedFramebufferfi',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewClearNamedFramebufferfi',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil'
  },
  'glClearNamedFramebufferfv' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'buffer',
        'GLenum '
      ],
      [
        'drawbuffer',
        'GLint '
      ],
      [
        'value',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glClearNamedFramebufferfv_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewClearNamedFramebufferfv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat* value'
  },
  'glClearNamedFramebufferiv' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'buffer',
        'GLenum '
      ],
      [
        'drawbuffer',
        'GLint '
      ],
      [
        'value',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glClearNamedFramebufferiv_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewClearNamedFramebufferiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint* value'
  },
  'glClearNamedFramebufferuiv' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'buffer',
        'GLenum '
      ],
      [
        'drawbuffer',
        'GLint '
      ],
      [
        'value',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glClearNamedFramebufferuiv_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewClearNamedFramebufferuiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint* value'
  },
  'glClearPixelLocalStorageuiEXT' => {
    'argdata' => [
      [
        'offset',
        'GLsizei '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'values',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glClearPixelLocalStorageuiEXT_c',
    'feature' => 'GL_EXT_shader_pixel_local_storage2',
    'glewImpl' => '__glewClearPixelLocalStorageuiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei offset, GLsizei n, const GLuint* values'
  },
  'glClearStencil' => {
    'argdata' => [
      [
        's',
        'GLint '
      ]
    ],
    'binding_name' => 'glClearStencil',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint s'
  },
  'glClearTexImage' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glClearTexImage_c',
    'feature' => 'GL_ARB_clear_texture',
    'glewImpl' => '__glewClearTexImage',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLint level, GLenum format, GLenum type, const void *data'
  },
  'glClearTexImageEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glClearTexImageEXT_c',
    'feature' => 'GL_EXT_clear_texture',
    'glewImpl' => '__glewClearTexImageEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLint level, GLenum format, GLenum type, const void *data'
  },
  'glClearTexSubImage' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glClearTexSubImage_c',
    'feature' => 'GL_ARB_clear_texture',
    'glewImpl' => '__glewClearTexSubImage',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data'
  },
  'glClearTexSubImageEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glClearTexSubImageEXT_c',
    'feature' => 'GL_EXT_clear_texture',
    'glewImpl' => '__glewClearTexSubImageEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data'
  },
  'glClientActiveTexture' => {
    'argdata' => [
      [
        'texture',
        'GLenum '
      ]
    ],
    'binding_name' => 'glClientActiveTexture',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewClientActiveTexture',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texture'
  },
  'glClientActiveTextureARB' => {
    'argdata' => [
      [
        'texture',
        'GLenum '
      ]
    ],
    'binding_name' => 'glClientActiveTextureARB',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewClientActiveTextureARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texture'
  },
  'glClientActiveVertexStreamATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ]
    ],
    'binding_name' => 'glClientActiveVertexStreamATI',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewClientActiveVertexStreamATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream'
  },
  'glClientAttribDefaultEXT' => {
    'argdata' => [
      [
        'mask',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glClientAttribDefaultEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewClientAttribDefaultEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLbitfield mask'
  },
  'glClientWaitSync' => {
    'argdata' => [
      [
        'myGLsync',
        'GLsync '
      ],
      [
        'flags',
        'GLbitfield '
      ],
      [
        'timeout',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glClientWaitSync',
    'feature' => 'GL_ARB_sync',
    'glewImpl' => '__glewClientWaitSync',
    'glewtype' => 'fun',
    'restype' => 'GLenum',
    'signature' => 'GLsync GLsync,GLbitfield flags,GLuint64 timeout'
  },
  'glClientWaitSyncAPPLE' => {
    'argdata' => [
      [
        'myGLsync',
        'GLsync '
      ],
      [
        'flags',
        'GLbitfield '
      ],
      [
        'timeout',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glClientWaitSyncAPPLE',
    'feature' => 'GL_APPLE_sync',
    'glewImpl' => '__glewClientWaitSyncAPPLE',
    'glewtype' => 'fun',
    'restype' => 'GLenum',
    'signature' => 'GLsync GLsync, GLbitfield flags, GLuint64 timeout'
  },
  'glClipControl' => {
    'argdata' => [
      [
        'origin',
        'GLenum '
      ],
      [
        'depth',
        'GLenum '
      ]
    ],
    'binding_name' => 'glClipControl',
    'feature' => 'GL_ARB_clip_control',
    'glewImpl' => '__glewClipControl',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum origin, GLenum depth'
  },
  'glClipPlane' => {
    'argdata' => [
      [
        'plane',
        'GLenum '
      ],
      [
        'equation',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glClipPlane_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum plane, const GLdouble *equation'
  },
  'glClipPlanef' => {
    'argdata' => [
      [
        'plane',
        'GLenum '
      ],
      [
        'equation',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glClipPlanef_c',
    'feature' => 'GL_REGAL_ES1_1_compatibility',
    'glewImpl' => '__glewClipPlanef',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum plane, const GLfloat* equation'
  },
  'glClipPlanex' => {
    'argdata' => [
      [
        'plane',
        'GLenum '
      ],
      [
        'equation',
        'const GLfixed* '
      ]
    ],
    'binding_name' => 'glClipPlanex_c',
    'feature' => 'GL_REGAL_ES1_1_compatibility',
    'glewImpl' => '__glewClipPlanex',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum plane, const GLfixed* equation'
  },
  'glColor3b' => {
    'argdata' => [
      [
        'red',
        'GLbyte '
      ],
      [
        'green',
        'GLbyte '
      ],
      [
        'blue',
        'GLbyte '
      ]
    ],
    'binding_name' => 'glColor3b',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLbyte red, GLbyte green, GLbyte blue'
  },
  'glColor3bv' => {
    'argdata' => [
      [
        'v',
        'const GLbyte *'
      ]
    ],
    'binding_name' => 'glColor3bv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLbyte *v'
  },
  'glColor3d' => {
    'argdata' => [
      [
        'red',
        'GLdouble '
      ],
      [
        'green',
        'GLdouble '
      ],
      [
        'blue',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glColor3d',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble red, GLdouble green, GLdouble blue'
  },
  'glColor3dv' => {
    'argdata' => [
      [
        'v',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glColor3dv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble *v'
  },
  'glColor3f' => {
    'argdata' => [
      [
        'red',
        'GLfloat '
      ],
      [
        'green',
        'GLfloat '
      ],
      [
        'blue',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glColor3f',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat red, GLfloat green, GLfloat blue'
  },
  'glColor3fVertex3fSUN' => {
    'argdata' => [
      [
        'r',
        'GLfloat '
      ],
      [
        'g',
        'GLfloat '
      ],
      [
        'b',
        'GLfloat '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glColor3fVertex3fSUN',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewColor3fVertex3fSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z'
  },
  'glColor3fVertex3fvSUN' => {
    'argdata' => [
      [
        'c',
        'const GLfloat* '
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glColor3fVertex3fvSUN_c',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewColor3fVertex3fvSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat* c, const GLfloat *v'
  },
  'glColor3fv' => {
    'argdata' => [
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glColor3fv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat *v'
  },
  'glColor3hNV' => {
    'argdata' => [
      [
        'red',
        'GLhalf '
      ],
      [
        'green',
        'GLhalf '
      ],
      [
        'blue',
        'GLhalf '
      ]
    ],
    'binding_name' => 'glColor3hNV',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewColor3hNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhalf red, GLhalf green, GLhalf blue'
  },
  'glColor3hvNV' => {
    'argdata' => [
      [
        'v',
        'const GLhalf* '
      ]
    ],
    'binding_name' => 'glColor3hvNV_c',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewColor3hvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLhalf* v'
  },
  'glColor3i' => {
    'argdata' => [
      [
        'red',
        'GLint '
      ],
      [
        'green',
        'GLint '
      ],
      [
        'blue',
        'GLint '
      ]
    ],
    'binding_name' => 'glColor3i',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint red, GLint green, GLint blue'
  },
  'glColor3iv' => {
    'argdata' => [
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glColor3iv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLint *v'
  },
  'glColor3s' => {
    'argdata' => [
      [
        'red',
        'GLshort '
      ],
      [
        'green',
        'GLshort '
      ],
      [
        'blue',
        'GLshort '
      ]
    ],
    'binding_name' => 'glColor3s',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLshort red, GLshort green, GLshort blue'
  },
  'glColor3sv' => {
    'argdata' => [
      [
        'v',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glColor3sv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLshort *v'
  },
  'glColor3ub' => {
    'argdata' => [
      [
        'red',
        'GLubyte '
      ],
      [
        'green',
        'GLubyte '
      ],
      [
        'blue',
        'GLubyte '
      ]
    ],
    'binding_name' => 'glColor3ub',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLubyte red, GLubyte green, GLubyte blue'
  },
  'glColor3ubv' => {
    'argdata' => [
      [
        'v',
        'const GLubyte *'
      ]
    ],
    'binding_name' => 'glColor3ubv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLubyte *v'
  },
  'glColor3ui' => {
    'argdata' => [
      [
        'red',
        'GLuint '
      ],
      [
        'green',
        'GLuint '
      ],
      [
        'blue',
        'GLuint '
      ]
    ],
    'binding_name' => 'glColor3ui',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint red, GLuint green, GLuint blue'
  },
  'glColor3uiv' => {
    'argdata' => [
      [
        'v',
        'const GLuint *'
      ]
    ],
    'binding_name' => 'glColor3uiv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLuint *v'
  },
  'glColor3us' => {
    'argdata' => [
      [
        'red',
        'GLushort '
      ],
      [
        'green',
        'GLushort '
      ],
      [
        'blue',
        'GLushort '
      ]
    ],
    'binding_name' => 'glColor3us',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLushort red, GLushort green, GLushort blue'
  },
  'glColor3usv' => {
    'argdata' => [
      [
        'v',
        'const GLushort *'
      ]
    ],
    'binding_name' => 'glColor3usv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLushort *v'
  },
  'glColor4b' => {
    'argdata' => [
      [
        'red',
        'GLbyte '
      ],
      [
        'green',
        'GLbyte '
      ],
      [
        'blue',
        'GLbyte '
      ],
      [
        'alpha',
        'GLbyte '
      ]
    ],
    'binding_name' => 'glColor4b',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha'
  },
  'glColor4bv' => {
    'argdata' => [
      [
        'v',
        'const GLbyte *'
      ]
    ],
    'binding_name' => 'glColor4bv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLbyte *v'
  },
  'glColor4d' => {
    'argdata' => [
      [
        'red',
        'GLdouble '
      ],
      [
        'green',
        'GLdouble '
      ],
      [
        'blue',
        'GLdouble '
      ],
      [
        'alpha',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glColor4d',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha'
  },
  'glColor4dv' => {
    'argdata' => [
      [
        'v',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glColor4dv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble *v'
  },
  'glColor4f' => {
    'argdata' => [
      [
        'red',
        'GLfloat '
      ],
      [
        'green',
        'GLfloat '
      ],
      [
        'blue',
        'GLfloat '
      ],
      [
        'alpha',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glColor4f',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha'
  },
  'glColor4fNormal3fVertex3fSUN' => {
    'argdata' => [
      [
        'r',
        'GLfloat '
      ],
      [
        'g',
        'GLfloat '
      ],
      [
        'b',
        'GLfloat '
      ],
      [
        'a',
        'GLfloat '
      ],
      [
        'nx',
        'GLfloat '
      ],
      [
        'ny',
        'GLfloat '
      ],
      [
        'nz',
        'GLfloat '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glColor4fNormal3fVertex3fSUN',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewColor4fNormal3fVertex3fSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z'
  },
  'glColor4fNormal3fVertex3fvSUN' => {
    'argdata' => [
      [
        'c',
        'const GLfloat* '
      ],
      [
        'n',
        'const GLfloat *'
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glColor4fNormal3fVertex3fvSUN_c',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewColor4fNormal3fVertex3fvSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat* c, const GLfloat *n, const GLfloat *v'
  },
  'glColor4fv' => {
    'argdata' => [
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glColor4fv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat *v'
  },
  'glColor4hNV' => {
    'argdata' => [
      [
        'red',
        'GLhalf '
      ],
      [
        'green',
        'GLhalf '
      ],
      [
        'blue',
        'GLhalf '
      ],
      [
        'alpha',
        'GLhalf '
      ]
    ],
    'binding_name' => 'glColor4hNV',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewColor4hNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhalf red, GLhalf green, GLhalf blue, GLhalf alpha'
  },
  'glColor4hvNV' => {
    'argdata' => [
      [
        'v',
        'const GLhalf* '
      ]
    ],
    'binding_name' => 'glColor4hvNV_c',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewColor4hvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLhalf* v'
  },
  'glColor4i' => {
    'argdata' => [
      [
        'red',
        'GLint '
      ],
      [
        'green',
        'GLint '
      ],
      [
        'blue',
        'GLint '
      ],
      [
        'alpha',
        'GLint '
      ]
    ],
    'binding_name' => 'glColor4i',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint red, GLint green, GLint blue, GLint alpha'
  },
  'glColor4iv' => {
    'argdata' => [
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glColor4iv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLint *v'
  },
  'glColor4s' => {
    'argdata' => [
      [
        'red',
        'GLshort '
      ],
      [
        'green',
        'GLshort '
      ],
      [
        'blue',
        'GLshort '
      ],
      [
        'alpha',
        'GLshort '
      ]
    ],
    'binding_name' => 'glColor4s',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLshort red, GLshort green, GLshort blue, GLshort alpha'
  },
  'glColor4sv' => {
    'argdata' => [
      [
        'v',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glColor4sv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLshort *v'
  },
  'glColor4ub' => {
    'argdata' => [
      [
        'red',
        'GLubyte '
      ],
      [
        'green',
        'GLubyte '
      ],
      [
        'blue',
        'GLubyte '
      ],
      [
        'alpha',
        'GLubyte '
      ]
    ],
    'binding_name' => 'glColor4ub',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha'
  },
  'glColor4ubVertex2fSUN' => {
    'argdata' => [
      [
        'r',
        'GLubyte '
      ],
      [
        'g',
        'GLubyte '
      ],
      [
        'b',
        'GLubyte '
      ],
      [
        'a',
        'GLubyte '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glColor4ubVertex2fSUN',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewColor4ubVertex2fSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y'
  },
  'glColor4ubVertex2fvSUN' => {
    'argdata' => [
      [
        'c',
        'const GLubyte* '
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glColor4ubVertex2fvSUN_c',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewColor4ubVertex2fvSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLubyte* c, const GLfloat *v'
  },
  'glColor4ubVertex3fSUN' => {
    'argdata' => [
      [
        'r',
        'GLubyte '
      ],
      [
        'g',
        'GLubyte '
      ],
      [
        'b',
        'GLubyte '
      ],
      [
        'a',
        'GLubyte '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glColor4ubVertex3fSUN',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewColor4ubVertex3fSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z'
  },
  'glColor4ubVertex3fvSUN' => {
    'argdata' => [
      [
        'c',
        'const GLubyte* '
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glColor4ubVertex3fvSUN_c',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewColor4ubVertex3fvSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLubyte* c, const GLfloat *v'
  },
  'glColor4ubv' => {
    'argdata' => [
      [
        'v',
        'const GLubyte *'
      ]
    ],
    'binding_name' => 'glColor4ubv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLubyte *v'
  },
  'glColor4ui' => {
    'argdata' => [
      [
        'red',
        'GLuint '
      ],
      [
        'green',
        'GLuint '
      ],
      [
        'blue',
        'GLuint '
      ],
      [
        'alpha',
        'GLuint '
      ]
    ],
    'binding_name' => 'glColor4ui',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint red, GLuint green, GLuint blue, GLuint alpha'
  },
  'glColor4uiv' => {
    'argdata' => [
      [
        'v',
        'const GLuint *'
      ]
    ],
    'binding_name' => 'glColor4uiv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLuint *v'
  },
  'glColor4us' => {
    'argdata' => [
      [
        'red',
        'GLushort '
      ],
      [
        'green',
        'GLushort '
      ],
      [
        'blue',
        'GLushort '
      ],
      [
        'alpha',
        'GLushort '
      ]
    ],
    'binding_name' => 'glColor4us',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLushort red, GLushort green, GLushort blue, GLushort alpha'
  },
  'glColor4usv' => {
    'argdata' => [
      [
        'v',
        'const GLushort *'
      ]
    ],
    'binding_name' => 'glColor4usv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLushort *v'
  },
  'glColor4x' => {
    'argdata' => [
      [
        'red',
        'GLfixed '
      ],
      [
        'green',
        'GLfixed '
      ],
      [
        'blue',
        'GLfixed '
      ],
      [
        'alpha',
        'GLfixed '
      ]
    ],
    'binding_name' => 'glColor4x',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewColor4x',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha'
  },
  'glColorFormatNV' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glColorFormatNV',
    'feature' => 'GL_NV_vertex_buffer_unified_memory',
    'glewImpl' => '__glewColorFormatNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLenum type, GLsizei stride'
  },
  'glColorFragmentOp1ATI' => {
    'argdata' => [
      [
        'op',
        'GLenum '
      ],
      [
        'dst',
        'GLuint '
      ],
      [
        'dstMask',
        'GLuint '
      ],
      [
        'dstMod',
        'GLuint '
      ],
      [
        'arg1',
        'GLuint '
      ],
      [
        'arg1Rep',
        'GLuint '
      ],
      [
        'arg1Mod',
        'GLuint '
      ]
    ],
    'binding_name' => 'glColorFragmentOp1ATI',
    'feature' => 'GL_ATI_fragment_shader',
    'glewImpl' => '__glewColorFragmentOp1ATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod'
  },
  'glColorFragmentOp2ATI' => {
    'argdata' => [
      [
        'op',
        'GLenum '
      ],
      [
        'dst',
        'GLuint '
      ],
      [
        'dstMask',
        'GLuint '
      ],
      [
        'dstMod',
        'GLuint '
      ],
      [
        'arg1',
        'GLuint '
      ],
      [
        'arg1Rep',
        'GLuint '
      ],
      [
        'arg1Mod',
        'GLuint '
      ],
      [
        'arg2',
        'GLuint '
      ],
      [
        'arg2Rep',
        'GLuint '
      ],
      [
        'arg2Mod',
        'GLuint '
      ]
    ],
    'binding_name' => 'glColorFragmentOp2ATI',
    'feature' => 'GL_ATI_fragment_shader',
    'glewImpl' => '__glewColorFragmentOp2ATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod'
  },
  'glColorFragmentOp3ATI' => {
    'argdata' => [
      [
        'op',
        'GLenum '
      ],
      [
        'dst',
        'GLuint '
      ],
      [
        'dstMask',
        'GLuint '
      ],
      [
        'dstMod',
        'GLuint '
      ],
      [
        'arg1',
        'GLuint '
      ],
      [
        'arg1Rep',
        'GLuint '
      ],
      [
        'arg1Mod',
        'GLuint '
      ],
      [
        'arg2',
        'GLuint '
      ],
      [
        'arg2Rep',
        'GLuint '
      ],
      [
        'arg2Mod',
        'GLuint '
      ],
      [
        'arg3',
        'GLuint '
      ],
      [
        'arg3Rep',
        'GLuint '
      ],
      [
        'arg3Mod',
        'GLuint '
      ]
    ],
    'binding_name' => 'glColorFragmentOp3ATI',
    'feature' => 'GL_ATI_fragment_shader',
    'glewImpl' => '__glewColorFragmentOp3ATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod'
  },
  'glColorMask' => {
    'argdata' => [
      [
        'red',
        'GLboolean '
      ],
      [
        'green',
        'GLboolean '
      ],
      [
        'blue',
        'GLboolean '
      ],
      [
        'alpha',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glColorMask',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha'
  },
  'glColorMaskIndexedEXT' => {
    'argdata' => [
      [
        'buf',
        'GLuint '
      ],
      [
        'r',
        'GLboolean '
      ],
      [
        'g',
        'GLboolean '
      ],
      [
        'b',
        'GLboolean '
      ],
      [
        'a',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glColorMaskIndexedEXT',
    'feature' => 'GL_EXT_draw_buffers2',
    'glewImpl' => '__glewColorMaskIndexedEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a'
  },
  'glColorMaski' => {
    'argdata' => [
      [
        'buf',
        'GLuint '
      ],
      [
        'red',
        'GLboolean '
      ],
      [
        'green',
        'GLboolean '
      ],
      [
        'blue',
        'GLboolean '
      ],
      [
        'alpha',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glColorMaski',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewColorMaski',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buf, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha'
  },
  'glColorMaskiEXT' => {
    'argdata' => [
      [
        'buf',
        'GLuint '
      ],
      [
        'r',
        'GLboolean '
      ],
      [
        'g',
        'GLboolean '
      ],
      [
        'b',
        'GLboolean '
      ],
      [
        'a',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glColorMaskiEXT',
    'feature' => 'GL_EXT_draw_buffers_indexed',
    'glewImpl' => '__glewColorMaskiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a'
  },
  'glColorMaterial' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glColorMaterial',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum mode'
  },
  'glColorP3ui' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'color',
        'GLuint '
      ]
    ],
    'binding_name' => 'glColorP3ui',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewColorP3ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLuint color'
  },
  'glColorP3uiv' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'color',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glColorP3uiv_c',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewColorP3uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, const GLuint* color'
  },
  'glColorP4ui' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'color',
        'GLuint '
      ]
    ],
    'binding_name' => 'glColorP4ui',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewColorP4ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLuint color'
  },
  'glColorP4uiv' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'color',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glColorP4uiv_c',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewColorP4uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, const GLuint* color'
  },
  'glColorPointer' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'const void *'
      ]
    ],
    'binding_name' => 'glColorPointer_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLenum type, GLsizei stride, const void *pointer'
  },
  'glColorPointerEXT' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'pointer',
        'const void *'
      ]
    ],
    'binding_name' => 'glColorPointerEXT_c',
    'feature' => 'GL_EXT_vertex_array',
    'glewImpl' => '__glewColorPointerEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer'
  },
  'glColorPointerListIBM' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLint '
      ],
      [
        'pointer',
        'const void** '
      ],
      [
        'ptrstride',
        'GLint '
      ]
    ],
    'binding_name' => 'glColorPointerListIBM_c',
    'feature' => 'GL_IBM_vertex_array_lists',
    'glewImpl' => '__glewColorPointerListIBM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride'
  },
  'glColorPointervINTEL' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pointer',
        'const void** '
      ]
    ],
    'binding_name' => 'glColorPointervINTEL_c',
    'feature' => 'GL_INTEL_parallel_arrays',
    'glewImpl' => '__glewColorPointervINTEL',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLenum type, const void** pointer'
  },
  'glColorSubTable' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'start',
        'GLsizei '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glColorSubTable_c',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewColorSubTable',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data'
  },
  'glColorSubTableEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'start',
        'GLsizei '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glColorSubTableEXT_c',
    'feature' => 'GL_EXT_color_subtable',
    'glewImpl' => '__glewColorSubTableEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data'
  },
  'glColorTable' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'table',
        'const void *'
      ]
    ],
    'binding_name' => 'glColorTable_c',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewColorTable',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table'
  },
  'glColorTableEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalFormat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glColorTableEXT_c',
    'feature' => 'GL_EXT_paletted_texture',
    'glewImpl' => '__glewColorTableEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *data'
  },
  'glColorTableParameterfv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glColorTableParameterfv_c',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewColorTableParameterfv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLfloat *params'
  },
  'glColorTableParameterfvSGI' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glColorTableParameterfvSGI_c',
    'feature' => 'GL_SGI_color_table',
    'glewImpl' => '__glewColorTableParameterfvSGI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLfloat* params'
  },
  'glColorTableParameteriv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glColorTableParameteriv_c',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewColorTableParameteriv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLint *params'
  },
  'glColorTableParameterivSGI' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glColorTableParameterivSGI_c',
    'feature' => 'GL_SGI_color_table',
    'glewImpl' => '__glewColorTableParameterivSGI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLint* params'
  },
  'glColorTableSGI' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'table',
        'const void *'
      ]
    ],
    'binding_name' => 'glColorTableSGI_c',
    'feature' => 'GL_SGI_color_table',
    'glewImpl' => '__glewColorTableSGI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table'
  },
  'glCombinerInputNV' => {
    'argdata' => [
      [
        'stage',
        'GLenum '
      ],
      [
        'portion',
        'GLenum '
      ],
      [
        'variable',
        'GLenum '
      ],
      [
        'input',
        'GLenum '
      ],
      [
        'mapping',
        'GLenum '
      ],
      [
        'componentUsage',
        'GLenum '
      ]
    ],
    'binding_name' => 'glCombinerInputNV',
    'feature' => 'GL_NV_register_combiners',
    'glewImpl' => '__glewCombinerInputNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage'
  },
  'glCombinerOutputNV' => {
    'argdata' => [
      [
        'stage',
        'GLenum '
      ],
      [
        'portion',
        'GLenum '
      ],
      [
        'abOutput',
        'GLenum '
      ],
      [
        'cdOutput',
        'GLenum '
      ],
      [
        'sumOutput',
        'GLenum '
      ],
      [
        'scale',
        'GLenum '
      ],
      [
        'bias',
        'GLenum '
      ],
      [
        'abDotProduct',
        'GLboolean '
      ],
      [
        'cdDotProduct',
        'GLboolean '
      ],
      [
        'muxSum',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glCombinerOutputNV',
    'feature' => 'GL_NV_register_combiners',
    'glewImpl' => '__glewCombinerOutputNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum'
  },
  'glCombinerParameterfNV' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glCombinerParameterfNV',
    'feature' => 'GL_NV_register_combiners',
    'glewImpl' => '__glewCombinerParameterfNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfloat param'
  },
  'glCombinerParameterfvNV' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glCombinerParameterfvNV_c',
    'feature' => 'GL_NV_register_combiners',
    'glewImpl' => '__glewCombinerParameterfvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, const GLfloat* params'
  },
  'glCombinerParameteriNV' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glCombinerParameteriNV',
    'feature' => 'GL_NV_register_combiners',
    'glewImpl' => '__glewCombinerParameteriNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint param'
  },
  'glCombinerParameterivNV' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glCombinerParameterivNV_c',
    'feature' => 'GL_NV_register_combiners',
    'glewImpl' => '__glewCombinerParameterivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, const GLint* params'
  },
  'glCombinerStageParameterfvNV' => {
    'argdata' => [
      [
        'stage',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glCombinerStageParameterfvNV_c',
    'feature' => 'GL_NV_register_combiners2',
    'glewImpl' => '__glewCombinerStageParameterfvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stage, GLenum pname, const GLfloat* params'
  },
  'glCommandListSegmentsNV' => {
    'argdata' => [
      [
        'list',
        'GLuint '
      ],
      [
        'segments',
        'GLuint '
      ]
    ],
    'binding_name' => 'glCommandListSegmentsNV',
    'feature' => 'GL_NV_command_list',
    'glewImpl' => '__glewCommandListSegmentsNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint list, GLuint segments'
  },
  'glCompileCommandListNV' => {
    'argdata' => [
      [
        'list',
        'GLuint '
      ]
    ],
    'binding_name' => 'glCompileCommandListNV',
    'feature' => 'GL_NV_command_list',
    'glewImpl' => '__glewCompileCommandListNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint list'
  },
  'glCompileShader' => {
    'argdata' => [
      [
        'shader',
        'GLuint '
      ]
    ],
    'binding_name' => 'glCompileShader',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewCompileShader',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint shader'
  },
  'glCompileShaderARB' => {
    'argdata' => [
      [
        'shaderObj',
        'GLhandleARB '
      ]
    ],
    'binding_name' => 'glCompileShaderARB',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewCompileShaderARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhandleARB shaderObj'
  },
  'glCompileShaderIncludeARB' => {
    'argdata' => [
      [
        'shader',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'path',
        'const GLchar* const *'
      ],
      [
        'length',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glCompileShaderIncludeARB_c',
    'feature' => 'GL_ARB_shading_language_include',
    'glewImpl' => '__glewCompileShaderIncludeARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint shader, GLsizei count, const GLchar* const *path, const GLint *length'
  },
  'glCompressedMultiTexImage1DEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedMultiTexImage1DEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewCompressedMultiTexImage1DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data'
  },
  'glCompressedMultiTexImage2DEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedMultiTexImage2DEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewCompressedMultiTexImage2DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data'
  },
  'glCompressedMultiTexImage3DEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedMultiTexImage3DEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewCompressedMultiTexImage3DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data'
  },
  'glCompressedMultiTexSubImage1DEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedMultiTexSubImage1DEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewCompressedMultiTexSubImage1DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data'
  },
  'glCompressedMultiTexSubImage2DEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedMultiTexSubImage2DEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewCompressedMultiTexSubImage2DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data'
  },
  'glCompressedMultiTexSubImage3DEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedMultiTexSubImage3DEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewCompressedMultiTexSubImage3DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data'
  },
  'glCompressedTexImage1D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedTexImage1D_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewCompressedTexImage1D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data'
  },
  'glCompressedTexImage1DARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedTexImage1DARB_c',
    'feature' => 'GL_ARB_texture_compression',
    'glewImpl' => '__glewCompressedTexImage1DARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data'
  },
  'glCompressedTexImage2D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedTexImage2D_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewCompressedTexImage2D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data'
  },
  'glCompressedTexImage2DARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedTexImage2DARB_c',
    'feature' => 'GL_ARB_texture_compression',
    'glewImpl' => '__glewCompressedTexImage2DARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data'
  },
  'glCompressedTexImage3D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedTexImage3D_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewCompressedTexImage3D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data'
  },
  'glCompressedTexImage3DARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedTexImage3DARB_c',
    'feature' => 'GL_ARB_texture_compression',
    'glewImpl' => '__glewCompressedTexImage3DARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data'
  },
  'glCompressedTexImage3DNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedTexImage3DNV_c',
    'feature' => 'GL_NV_texture_array',
    'glewImpl' => '__glewCompressedTexImage3DNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data'
  },
  'glCompressedTexSubImage1D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedTexSubImage1D_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewCompressedTexSubImage1D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data'
  },
  'glCompressedTexSubImage1DARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedTexSubImage1DARB_c',
    'feature' => 'GL_ARB_texture_compression',
    'glewImpl' => '__glewCompressedTexSubImage1DARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data'
  },
  'glCompressedTexSubImage2D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedTexSubImage2D_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewCompressedTexSubImage2D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data'
  },
  'glCompressedTexSubImage2DARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedTexSubImage2DARB_c',
    'feature' => 'GL_ARB_texture_compression',
    'glewImpl' => '__glewCompressedTexSubImage2DARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data'
  },
  'glCompressedTexSubImage3D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedTexSubImage3D_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewCompressedTexSubImage3D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data'
  },
  'glCompressedTexSubImage3DARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedTexSubImage3DARB_c',
    'feature' => 'GL_ARB_texture_compression',
    'glewImpl' => '__glewCompressedTexSubImage3DARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data'
  },
  'glCompressedTexSubImage3DNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedTexSubImage3DNV_c',
    'feature' => 'GL_NV_texture_array',
    'glewImpl' => '__glewCompressedTexSubImage3DNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data'
  },
  'glCompressedTextureImage1DEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedTextureImage1DEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewCompressedTextureImage1DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data'
  },
  'glCompressedTextureImage2DEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedTextureImage2DEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewCompressedTextureImage2DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data'
  },
  'glCompressedTextureImage3DEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedTextureImage3DEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewCompressedTextureImage3DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data'
  },
  'glCompressedTextureSubImage1D' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedTextureSubImage1D_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewCompressedTextureSubImage1D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data'
  },
  'glCompressedTextureSubImage1DEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedTextureSubImage1DEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewCompressedTextureSubImage1DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data'
  },
  'glCompressedTextureSubImage2D' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedTextureSubImage2D_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewCompressedTextureSubImage2D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data'
  },
  'glCompressedTextureSubImage2DEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedTextureSubImage2DEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewCompressedTextureSubImage2DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data'
  },
  'glCompressedTextureSubImage3D' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedTextureSubImage3D_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewCompressedTextureSubImage3D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data'
  },
  'glCompressedTextureSubImage3DEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'imageSize',
        'GLsizei '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glCompressedTextureSubImage3DEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewCompressedTextureSubImage3DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data'
  },
  'glConservativeRasterParameterfNV' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'value',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glConservativeRasterParameterfNV',
    'feature' => 'GL_NV_conservative_raster_dilate',
    'glewImpl' => '__glewConservativeRasterParameterfNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfloat value'
  },
  'glConservativeRasterParameteriNV' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glConservativeRasterParameteriNV',
    'feature' => 'GL_NV_conservative_raster_pre_snap_triangles',
    'glewImpl' => '__glewConservativeRasterParameteriNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint param'
  },
  'glConvolutionFilter1D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'image',
        'const void *'
      ]
    ],
    'binding_name' => 'glConvolutionFilter1D_c',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewConvolutionFilter1D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image'
  },
  'glConvolutionFilter1DEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'image',
        'const void *'
      ]
    ],
    'binding_name' => 'glConvolutionFilter1DEXT_c',
    'feature' => 'GL_EXT_convolution',
    'glewImpl' => '__glewConvolutionFilter1DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image'
  },
  'glConvolutionFilter2D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'image',
        'const void *'
      ]
    ],
    'binding_name' => 'glConvolutionFilter2D_c',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewConvolutionFilter2D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image'
  },
  'glConvolutionFilter2DEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'image',
        'const void *'
      ]
    ],
    'binding_name' => 'glConvolutionFilter2DEXT_c',
    'feature' => 'GL_EXT_convolution',
    'glewImpl' => '__glewConvolutionFilter2DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image'
  },
  'glConvolutionParameterf' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glConvolutionParameterf',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewConvolutionParameterf',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLfloat params'
  },
  'glConvolutionParameterfEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glConvolutionParameterfEXT',
    'feature' => 'GL_EXT_convolution',
    'glewImpl' => '__glewConvolutionParameterfEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLfloat param'
  },
  'glConvolutionParameterfv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glConvolutionParameterfv_c',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewConvolutionParameterfv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLfloat *params'
  },
  'glConvolutionParameterfvEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glConvolutionParameterfvEXT_c',
    'feature' => 'GL_EXT_convolution',
    'glewImpl' => '__glewConvolutionParameterfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLfloat* params'
  },
  'glConvolutionParameteri' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint '
      ]
    ],
    'binding_name' => 'glConvolutionParameteri',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewConvolutionParameteri',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint params'
  },
  'glConvolutionParameteriEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glConvolutionParameteriEXT',
    'feature' => 'GL_EXT_convolution',
    'glewImpl' => '__glewConvolutionParameteriEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint param'
  },
  'glConvolutionParameteriv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glConvolutionParameteriv_c',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewConvolutionParameteriv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLint *params'
  },
  'glConvolutionParameterivEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glConvolutionParameterivEXT_c',
    'feature' => 'GL_EXT_convolution',
    'glewImpl' => '__glewConvolutionParameterivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLint* params'
  },
  'glCopyBufferSubData' => {
    'argdata' => [
      [
        'readtarget',
        'GLenum '
      ],
      [
        'writetarget',
        'GLenum '
      ],
      [
        'readoffset',
        'GLintptr '
      ],
      [
        'writeoffset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ]
    ],
    'binding_name' => 'glCopyBufferSubData',
    'feature' => 'GL_ARB_copy_buffer',
    'glewImpl' => '__glewCopyBufferSubData',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size'
  },
  'glCopyBufferSubDataNV' => {
    'argdata' => [
      [
        'readtarget',
        'GLenum '
      ],
      [
        'writetarget',
        'GLenum '
      ],
      [
        'readoffset',
        'GLintptr '
      ],
      [
        'writeoffset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ]
    ],
    'binding_name' => 'glCopyBufferSubDataNV',
    'feature' => 'GL_NV_copy_buffer',
    'glewImpl' => '__glewCopyBufferSubDataNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size'
  },
  'glCopyColorSubTable' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'start',
        'GLsizei '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyColorSubTable',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewCopyColorSubTable',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei start, GLint x, GLint y, GLsizei width'
  },
  'glCopyColorSubTableEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'start',
        'GLsizei '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyColorSubTableEXT',
    'feature' => 'GL_EXT_color_subtable',
    'glewImpl' => '__glewCopyColorSubTableEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei start, GLint x, GLint y, GLsizei width'
  },
  'glCopyColorTable' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyColorTable',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewCopyColorTable',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width'
  },
  'glCopyColorTableSGI' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyColorTableSGI',
    'feature' => 'GL_SGI_color_table',
    'glewImpl' => '__glewCopyColorTableSGI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width'
  },
  'glCopyConvolutionFilter1D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyConvolutionFilter1D',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewCopyConvolutionFilter1D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width'
  },
  'glCopyConvolutionFilter1DEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyConvolutionFilter1DEXT',
    'feature' => 'GL_EXT_convolution',
    'glewImpl' => '__glewCopyConvolutionFilter1DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width'
  },
  'glCopyConvolutionFilter2D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyConvolutionFilter2D',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewCopyConvolutionFilter2D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height'
  },
  'glCopyConvolutionFilter2DEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyConvolutionFilter2DEXT',
    'feature' => 'GL_EXT_convolution',
    'glewImpl' => '__glewCopyConvolutionFilter2DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height'
  },
  'glCopyImageSubData' => {
    'argdata' => [
      [
        'srcName',
        'GLuint '
      ],
      [
        'srcTarget',
        'GLenum '
      ],
      [
        'srcLevel',
        'GLint '
      ],
      [
        'srcX',
        'GLint '
      ],
      [
        'srcY',
        'GLint '
      ],
      [
        'srcZ',
        'GLint '
      ],
      [
        'dstName',
        'GLuint '
      ],
      [
        'dstTarget',
        'GLenum '
      ],
      [
        'dstLevel',
        'GLint '
      ],
      [
        'dstX',
        'GLint '
      ],
      [
        'dstY',
        'GLint '
      ],
      [
        'dstZ',
        'GLint '
      ],
      [
        'srcWidth',
        'GLsizei '
      ],
      [
        'srcHeight',
        'GLsizei '
      ],
      [
        'srcDepth',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyImageSubData',
    'feature' => 'GL_ARB_copy_image',
    'glewImpl' => '__glewCopyImageSubData',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth'
  },
  'glCopyImageSubDataEXT' => {
    'argdata' => [
      [
        'srcName',
        'GLuint '
      ],
      [
        'srcTarget',
        'GLenum '
      ],
      [
        'srcLevel',
        'GLint '
      ],
      [
        'srcX',
        'GLint '
      ],
      [
        'srcY',
        'GLint '
      ],
      [
        'srcZ',
        'GLint '
      ],
      [
        'dstName',
        'GLuint '
      ],
      [
        'dstTarget',
        'GLenum '
      ],
      [
        'dstLevel',
        'GLint '
      ],
      [
        'dstX',
        'GLint '
      ],
      [
        'dstY',
        'GLint '
      ],
      [
        'dstZ',
        'GLint '
      ],
      [
        'srcWidth',
        'GLsizei '
      ],
      [
        'srcHeight',
        'GLsizei '
      ],
      [
        'srcDepth',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyImageSubDataEXT',
    'feature' => 'GL_EXT_copy_image',
    'glewImpl' => '__glewCopyImageSubDataEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth'
  },
  'glCopyImageSubDataNV' => {
    'argdata' => [
      [
        'srcName',
        'GLuint '
      ],
      [
        'srcTarget',
        'GLenum '
      ],
      [
        'srcLevel',
        'GLint '
      ],
      [
        'srcX',
        'GLint '
      ],
      [
        'srcY',
        'GLint '
      ],
      [
        'srcZ',
        'GLint '
      ],
      [
        'dstName',
        'GLuint '
      ],
      [
        'dstTarget',
        'GLenum '
      ],
      [
        'dstLevel',
        'GLint '
      ],
      [
        'dstX',
        'GLint '
      ],
      [
        'dstY',
        'GLint '
      ],
      [
        'dstZ',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyImageSubDataNV',
    'feature' => 'GL_NV_copy_image',
    'glewImpl' => '__glewCopyImageSubDataNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth'
  },
  'glCopyMultiTexImage1DEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ]
    ],
    'binding_name' => 'glCopyMultiTexImage1DEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewCopyMultiTexImage1DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border'
  },
  'glCopyMultiTexImage2DEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ]
    ],
    'binding_name' => 'glCopyMultiTexImage2DEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewCopyMultiTexImage2DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border'
  },
  'glCopyMultiTexSubImage1DEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyMultiTexSubImage1DEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewCopyMultiTexSubImage1DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width'
  },
  'glCopyMultiTexSubImage2DEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyMultiTexSubImage2DEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewCopyMultiTexSubImage2DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height'
  },
  'glCopyMultiTexSubImage3DEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyMultiTexSubImage3DEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewCopyMultiTexSubImage3DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height'
  },
  'glCopyNamedBufferSubData' => {
    'argdata' => [
      [
        'readBuffer',
        'GLuint '
      ],
      [
        'writeBuffer',
        'GLuint '
      ],
      [
        'readOffset',
        'GLintptr '
      ],
      [
        'writeOffset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ]
    ],
    'binding_name' => 'glCopyNamedBufferSubData',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewCopyNamedBufferSubData',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size'
  },
  'glCopyPathNV' => {
    'argdata' => [
      [
        'resultPath',
        'GLuint '
      ],
      [
        'srcPath',
        'GLuint '
      ]
    ],
    'binding_name' => 'glCopyPathNV',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewCopyPathNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint resultPath, GLuint srcPath'
  },
  'glCopyPixels' => {
    'argdata' => [
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'type',
        'GLenum '
      ]
    ],
    'binding_name' => 'glCopyPixels',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint x, GLint y, GLsizei width, GLsizei height, GLenum type'
  },
  'glCopyTexImage1D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalFormat',
        'GLenum '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ]
    ],
    'binding_name' => 'glCopyTexImage1D',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border'
  },
  'glCopyTexImage1DEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ]
    ],
    'binding_name' => 'glCopyTexImage1DEXT',
    'feature' => 'GL_EXT_copy_texture',
    'glewImpl' => '__glewCopyTexImage1DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border'
  },
  'glCopyTexImage2D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalFormat',
        'GLenum '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ]
    ],
    'binding_name' => 'glCopyTexImage2D',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border'
  },
  'glCopyTexImage2DEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ]
    ],
    'binding_name' => 'glCopyTexImage2DEXT',
    'feature' => 'GL_EXT_copy_texture',
    'glewImpl' => '__glewCopyTexImage2DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border'
  },
  'glCopyTexSubImage1D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyTexSubImage1D',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width'
  },
  'glCopyTexSubImage1DEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyTexSubImage1DEXT',
    'feature' => 'GL_EXT_copy_texture',
    'glewImpl' => '__glewCopyTexSubImage1DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width'
  },
  'glCopyTexSubImage2D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyTexSubImage2D',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height'
  },
  'glCopyTexSubImage2DEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyTexSubImage2DEXT',
    'feature' => 'GL_EXT_copy_texture',
    'glewImpl' => '__glewCopyTexSubImage2DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height'
  },
  'glCopyTexSubImage3D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyTexSubImage3D',
    'feature' => 'GL_VERSION_1_2',
    'glewImpl' => '__glewCopyTexSubImage3D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height'
  },
  'glCopyTexSubImage3DEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyTexSubImage3DEXT',
    'feature' => 'GL_EXT_copy_texture',
    'glewImpl' => '__glewCopyTexSubImage3DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height'
  },
  'glCopyTexSubImage3DNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyTexSubImage3DNV',
    'feature' => 'GL_NV_texture_array',
    'glewImpl' => '__glewCopyTexSubImage3DNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height'
  },
  'glCopyTextureImage1DEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ]
    ],
    'binding_name' => 'glCopyTextureImage1DEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewCopyTextureImage1DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border'
  },
  'glCopyTextureImage2DEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ]
    ],
    'binding_name' => 'glCopyTextureImage2DEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewCopyTextureImage2DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border'
  },
  'glCopyTextureLevelsAPPLE' => {
    'argdata' => [
      [
        'destinationTexture',
        'GLuint '
      ],
      [
        'sourceTexture',
        'GLuint '
      ],
      [
        'sourceBaseLevel',
        'GLint '
      ],
      [
        'sourceLevelCount',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyTextureLevelsAPPLE',
    'feature' => 'GL_APPLE_copy_texture_levels',
    'glewImpl' => '__glewCopyTextureLevelsAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount'
  },
  'glCopyTextureSubImage1D' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyTextureSubImage1D',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewCopyTextureSubImage1D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width'
  },
  'glCopyTextureSubImage1DEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyTextureSubImage1DEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewCopyTextureSubImage1DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width'
  },
  'glCopyTextureSubImage2D' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyTextureSubImage2D',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewCopyTextureSubImage2D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height'
  },
  'glCopyTextureSubImage2DEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyTextureSubImage2DEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewCopyTextureSubImage2DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height'
  },
  'glCopyTextureSubImage3D' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyTextureSubImage3D',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewCopyTextureSubImage3D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height'
  },
  'glCopyTextureSubImage3DEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glCopyTextureSubImage3DEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewCopyTextureSubImage3DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height'
  },
  'glCoverFillPathInstancedNV' => {
    'argdata' => [
      [
        'numPaths',
        'GLsizei '
      ],
      [
        'pathNameType',
        'GLenum '
      ],
      [
        'paths',
        'const void *'
      ],
      [
        'pathBase',
        'GLuint '
      ],
      [
        'coverMode',
        'GLenum '
      ],
      [
        'transformType',
        'GLenum '
      ],
      [
        'transformValues',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glCoverFillPathInstancedNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewCoverFillPathInstancedNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues'
  },
  'glCoverFillPathNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'coverMode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glCoverFillPathNV',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewCoverFillPathNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint path, GLenum coverMode'
  },
  'glCoverStrokePathInstancedNV' => {
    'argdata' => [
      [
        'numPaths',
        'GLsizei '
      ],
      [
        'pathNameType',
        'GLenum '
      ],
      [
        'paths',
        'const void *'
      ],
      [
        'pathBase',
        'GLuint '
      ],
      [
        'coverMode',
        'GLenum '
      ],
      [
        'transformType',
        'GLenum '
      ],
      [
        'transformValues',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glCoverStrokePathInstancedNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewCoverStrokePathInstancedNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues'
  },
  'glCoverStrokePathNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'coverMode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glCoverStrokePathNV',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewCoverStrokePathNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint path, GLenum coverMode'
  },
  'glCoverageModulationNV' => {
    'argdata' => [
      [
        'components',
        'GLenum '
      ]
    ],
    'binding_name' => 'glCoverageModulationNV',
    'feature' => 'GL_EXT_raster_multisample',
    'glewImpl' => '__glewCoverageModulationNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum components'
  },
  'glCoverageModulationTableNV' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'v',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glCoverageModulationTableNV_c',
    'feature' => 'GL_EXT_raster_multisample',
    'glewImpl' => '__glewCoverageModulationTableNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLfloat* v'
  },
  'glCreateBuffers' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'buffers',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glCreateBuffers_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewCreateBuffers',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* buffers'
  },
  'glCreateCommandListsNV' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'lists',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glCreateCommandListsNV_c',
    'feature' => 'GL_NV_command_list',
    'glewImpl' => '__glewCreateCommandListsNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* lists'
  },
  'glCreateFramebuffers' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'framebuffers',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glCreateFramebuffers_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewCreateFramebuffers',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* framebuffers'
  },
  'glCreateMemoryObjectsEXT' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'memoryObjects',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glCreateMemoryObjectsEXT_c',
    'feature' => 'GL_EXT_memory_object',
    'glewImpl' => '__glewCreateMemoryObjectsEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* memoryObjects'
  },
  'glCreatePerfQueryINTEL' => {
    'argdata' => [
      [
        'queryId',
        'GLuint '
      ],
      [
        'queryHandle',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glCreatePerfQueryINTEL_c',
    'feature' => 'GL_INTEL_performance_query',
    'glewImpl' => '__glewCreatePerfQueryINTEL',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint queryId, GLuint* queryHandle'
  },
  'glCreateProgram' => {
    'binding_name' => 'glCreateProgram',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewCreateProgram',
    'glewtype' => 'fun',
    'restype' => 'GLuint',
    'signature' => 'void'
  },
  'glCreateProgramObjectARB' => {
    'binding_name' => 'glCreateProgramObjectARB',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewCreateProgramObjectARB',
    'glewtype' => 'fun',
    'restype' => 'GLhandleARB',
    'signature' => 'void'
  },
  'glCreateProgramPipelines' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'pipelines',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glCreateProgramPipelines_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewCreateProgramPipelines',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* pipelines'
  },
  'glCreateQueries' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'ids',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glCreateQueries_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewCreateQueries',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei n, GLuint* ids'
  },
  'glCreateRenderbuffers' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'renderbuffers',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glCreateRenderbuffers_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewCreateRenderbuffers',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* renderbuffers'
  },
  'glCreateSamplers' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'samplers',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glCreateSamplers_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewCreateSamplers',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* samplers'
  },
  'glCreateShader' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ]
    ],
    'binding_name' => 'glCreateShader',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewCreateShader',
    'glewtype' => 'fun',
    'restype' => 'GLuint',
    'signature' => 'GLenum type'
  },
  'glCreateShaderObjectARB' => {
    'argdata' => [
      [
        'shaderType',
        'GLenum '
      ]
    ],
    'binding_name' => 'glCreateShaderObjectARB',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewCreateShaderObjectARB',
    'glewtype' => 'fun',
    'restype' => 'GLhandleARB',
    'signature' => 'GLenum shaderType'
  },
  'glCreateShaderProgramEXT' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'string',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glCreateShaderProgramEXT_c',
    'feature' => 'GL_EXT_separate_shader_objects',
    'glewImpl' => '__glewCreateShaderProgramEXT',
    'glewtype' => 'fun',
    'restype' => 'GLuint',
    'signature' => 'GLenum type, const GLchar* string'
  },
  'glCreateShaderProgramv' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'strings',
        'const GLchar * const * '
      ]
    ],
    'binding_name' => 'glCreateShaderProgramv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewCreateShaderProgramv',
    'glewtype' => 'fun',
    'restype' => 'GLuint',
    'signature' => 'GLenum type, GLsizei count, const GLchar * const * strings'
  },
  'glCreateStatesNV' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'states',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glCreateStatesNV_c',
    'feature' => 'GL_NV_command_list',
    'glewImpl' => '__glewCreateStatesNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* states'
  },
  'glCreateSyncFromCLeventARB' => {
    'argdata' => [
      [
        'context',
        'cl_context '
      ],
      [
        'event',
        'cl_event '
      ],
      [
        'flags',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glCreateSyncFromCLeventARB',
    'feature' => 'GL_ARB_cl_event',
    'glewImpl' => '__glewCreateSyncFromCLeventARB',
    'glewtype' => 'fun',
    'restype' => 'GLsync',
    'signature' => 'cl_context context, cl_event event, GLbitfield flags'
  },
  'glCreateTextures' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'textures',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glCreateTextures_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewCreateTextures',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei n, GLuint* textures'
  },
  'glCreateTransformFeedbacks' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'ids',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glCreateTransformFeedbacks_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewCreateTransformFeedbacks',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* ids'
  },
  'glCreateVertexArrays' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'arrays',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glCreateVertexArrays_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewCreateVertexArrays',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* arrays'
  },
  'glCullFace' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glCullFace',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode'
  },
  'glCullParameterdvEXT' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLdouble* '
      ]
    ],
    'binding_name' => 'glCullParameterdvEXT_c',
    'feature' => 'GL_EXT_cull_vertex',
    'glewImpl' => '__glewCullParameterdvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLdouble* params'
  },
  'glCullParameterfvEXT' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glCullParameterfvEXT_c',
    'feature' => 'GL_EXT_cull_vertex',
    'glewImpl' => '__glewCullParameterfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfloat* params'
  },
  'glCurrentPaletteMatrixARB' => {
    'argdata' => [
      [
        'index',
        'GLint '
      ]
    ],
    'binding_name' => 'glCurrentPaletteMatrixARB',
    'feature' => 'GL_ARB_matrix_palette',
    'glewImpl' => '__glewCurrentPaletteMatrixARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint index'
  },
  'glDataPipe' => {
    'argdata' => [
      [
        'space',
        'GLenum '
      ]
    ],
    'binding_name' => 'glDataPipe',
    'feature' => 'GL_SGIX_datapipe',
    'glewImpl' => '__glewDataPipe',
    'glewtype' => 'fun',
    'restype' => 'GLint',
    'signature' => 'GLenum space'
  },
  'glDebugMessageCallback' => {
    'argdata' => [
      [
        'callback',
        'GLDEBUGPROC '
      ],
      [
        'userParam',
        'const void *'
      ]
    ],
    'binding_name' => 'glDebugMessageCallback_c',
    'feature' => 'GL_KHR_debug',
    'glewImpl' => '__glewDebugMessageCallback',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLDEBUGPROC callback, const void *userParam'
  },
  'glDebugMessageCallbackAMD' => {
    'argdata' => [
      [
        'callback',
        'GLDEBUGPROCAMD '
      ],
      [
        'userParam',
        'void *'
      ]
    ],
    'binding_name' => 'glDebugMessageCallbackAMD_c',
    'feature' => 'GL_AMD_debug_output',
    'glewImpl' => '__glewDebugMessageCallbackAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLDEBUGPROCAMD callback, void *userParam'
  },
  'glDebugMessageCallbackARB' => {
    'argdata' => [
      [
        'callback',
        'GLDEBUGPROCARB '
      ],
      [
        'userParam',
        'const void *'
      ]
    ],
    'binding_name' => 'glDebugMessageCallbackARB_c',
    'feature' => 'GL_ARB_debug_output',
    'glewImpl' => '__glewDebugMessageCallbackARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLDEBUGPROCARB callback, const void *userParam'
  },
  'glDebugMessageControl' => {
    'argdata' => [
      [
        'source',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'severity',
        'GLenum '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'ids',
        'const GLuint* '
      ],
      [
        'enabled',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glDebugMessageControl_c',
    'feature' => 'GL_KHR_debug',
    'glewImpl' => '__glewDebugMessageControl',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled'
  },
  'glDebugMessageControlARB' => {
    'argdata' => [
      [
        'source',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'severity',
        'GLenum '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'ids',
        'const GLuint* '
      ],
      [
        'enabled',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glDebugMessageControlARB_c',
    'feature' => 'GL_ARB_debug_output',
    'glewImpl' => '__glewDebugMessageControlARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled'
  },
  'glDebugMessageEnableAMD' => {
    'argdata' => [
      [
        'category',
        'GLenum '
      ],
      [
        'severity',
        'GLenum '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'ids',
        'const GLuint* '
      ],
      [
        'enabled',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glDebugMessageEnableAMD_c',
    'feature' => 'GL_AMD_debug_output',
    'glewImpl' => '__glewDebugMessageEnableAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum category, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled'
  },
  'glDebugMessageInsert' => {
    'argdata' => [
      [
        'source',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'id',
        'GLuint '
      ],
      [
        'severity',
        'GLenum '
      ],
      [
        'length',
        'GLsizei '
      ],
      [
        'buf',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glDebugMessageInsert_c',
    'feature' => 'GL_KHR_debug',
    'glewImpl' => '__glewDebugMessageInsert',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf'
  },
  'glDebugMessageInsertAMD' => {
    'argdata' => [
      [
        'category',
        'GLenum '
      ],
      [
        'severity',
        'GLenum '
      ],
      [
        'id',
        'GLuint '
      ],
      [
        'length',
        'GLsizei '
      ],
      [
        'buf',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glDebugMessageInsertAMD_c',
    'feature' => 'GL_AMD_debug_output',
    'glewImpl' => '__glewDebugMessageInsertAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar* buf'
  },
  'glDebugMessageInsertARB' => {
    'argdata' => [
      [
        'source',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'id',
        'GLuint '
      ],
      [
        'severity',
        'GLenum '
      ],
      [
        'length',
        'GLsizei '
      ],
      [
        'buf',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glDebugMessageInsertARB_c',
    'feature' => 'GL_ARB_debug_output',
    'glewImpl' => '__glewDebugMessageInsertARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf'
  },
  'glDeformSGIX' => {
    'argdata' => [
      [
        'mask',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glDeformSGIX',
    'feature' => 'GL_SGIX_polynomial_ffd',
    'glewImpl' => '__glewDeformSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLbitfield mask'
  },
  'glDeleteArraySetsEXT' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'arrayset',
        'const void * *'
      ]
    ],
    'binding_name' => 'glDeleteArraySetsEXT_c',
    'feature' => 'GL_EXT_vertex_array_setXXX',
    'glewImpl' => '__glewDeleteArraySetsEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const void *arrayset[]'
  },
  'glDeleteAsyncMarkersSGIX' => {
    'argdata' => [
      [
        'marker',
        'GLuint '
      ],
      [
        'range',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glDeleteAsyncMarkersSGIX',
    'feature' => 'GL_SGIX_async',
    'glewImpl' => '__glewDeleteAsyncMarkersSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint marker, GLsizei range'
  },
  'glDeleteBufferRegion' => {
    'argdata' => [
      [
        'region',
        'GLenum '
      ]
    ],
    'binding_name' => 'glDeleteBufferRegion',
    'feature' => 'GL_KTX_buffer_region',
    'glewImpl' => '__glewDeleteBufferRegion',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum region'
  },
  'glDeleteBuffers' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'buffers',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteBuffers_c',
    'feature' => 'GL_VERSION_1_5',
    'glewImpl' => '__glewDeleteBuffers',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* buffers'
  },
  'glDeleteBuffersARB' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'buffers',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteBuffersARB_c',
    'feature' => 'GL_ARB_vertex_buffer_object',
    'glewImpl' => '__glewDeleteBuffersARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* buffers'
  },
  'glDeleteCommandListsNV' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'lists',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteCommandListsNV_c',
    'feature' => 'GL_NV_command_list',
    'glewImpl' => '__glewDeleteCommandListsNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* lists'
  },
  'glDeleteFencesAPPLE' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'fences',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteFencesAPPLE_c',
    'feature' => 'GL_APPLE_fence',
    'glewImpl' => '__glewDeleteFencesAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* fences'
  },
  'glDeleteFencesNV' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'fences',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteFencesNV_c',
    'feature' => 'GL_NV_fence',
    'glewImpl' => '__glewDeleteFencesNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* fences'
  },
  'glDeleteFragmentShaderATI' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDeleteFragmentShaderATI',
    'feature' => 'GL_ATI_fragment_shader',
    'glewImpl' => '__glewDeleteFragmentShaderATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id'
  },
  'glDeleteFramebuffers' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'framebuffers',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteFramebuffers_c',
    'feature' => 'GL_ARB_framebuffer_object',
    'glewImpl' => '__glewDeleteFramebuffers',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* framebuffers'
  },
  'glDeleteFramebuffersEXT' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'framebuffers',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteFramebuffersEXT_c',
    'feature' => 'GL_EXT_framebuffer_object',
    'glewImpl' => '__glewDeleteFramebuffersEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* framebuffers'
  },
  'glDeleteLists' => {
    'argdata' => [
      [
        'list',
        'GLuint '
      ],
      [
        'range',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glDeleteLists',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint list, GLsizei range'
  },
  'glDeleteMPEGPredictorsSGIX' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'predictors',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteMPEGPredictorsSGIX_c',
    'feature' => 'GL_SGIX_mpeg1',
    'glewImpl' => '__glewDeleteMPEGPredictorsSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* predictors'
  },
  'glDeleteMemoryObjectsEXT' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'memoryObjects',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteMemoryObjectsEXT_c',
    'feature' => 'GL_EXT_memory_object',
    'glewImpl' => '__glewDeleteMemoryObjectsEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* memoryObjects'
  },
  'glDeleteNamedStringARB' => {
    'argdata' => [
      [
        'namelen',
        'GLint '
      ],
      [
        'name',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glDeleteNamedStringARB_c',
    'feature' => 'GL_ARB_shading_language_include',
    'glewImpl' => '__glewDeleteNamedStringARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint namelen, const GLchar* name'
  },
  'glDeleteNamesAMD' => {
    'argdata' => [
      [
        'identifier',
        'GLenum '
      ],
      [
        'num',
        'GLuint '
      ],
      [
        'names',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteNamesAMD_c',
    'feature' => 'GL_AMD_name_gen_delete',
    'glewImpl' => '__glewDeleteNamesAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum identifier, GLuint num, const GLuint* names'
  },
  'glDeleteObjectARB' => {
    'argdata' => [
      [
        'obj',
        'GLhandleARB '
      ]
    ],
    'binding_name' => 'glDeleteObjectARB',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewDeleteObjectARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhandleARB obj'
  },
  'glDeleteOcclusionQueriesNV' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'ids',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteOcclusionQueriesNV_c',
    'feature' => 'GL_NV_occlusion_query',
    'glewImpl' => '__glewDeleteOcclusionQueriesNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* ids'
  },
  'glDeletePathsNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'range',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glDeletePathsNV',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewDeletePathsNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint path, GLsizei range'
  },
  'glDeletePerfMonitorsAMD' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'monitors',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glDeletePerfMonitorsAMD_c',
    'feature' => 'GL_AMD_performance_monitor',
    'glewImpl' => '__glewDeletePerfMonitorsAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* monitors'
  },
  'glDeletePerfQueryINTEL' => {
    'argdata' => [
      [
        'queryHandle',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDeletePerfQueryINTEL',
    'feature' => 'GL_INTEL_performance_query',
    'glewImpl' => '__glewDeletePerfQueryINTEL',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint queryHandle'
  },
  'glDeleteProgram' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDeleteProgram',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewDeleteProgram',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program'
  },
  'glDeleteProgramPipelines' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'pipelines',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteProgramPipelines_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewDeleteProgramPipelines',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* pipelines'
  },
  'glDeleteProgramsARB' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'programs',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteProgramsARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewDeleteProgramsARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* programs'
  },
  'glDeleteProgramsNV' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'ids',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteProgramsNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewDeleteProgramsNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* ids'
  },
  'glDeleteQueries' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'ids',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteQueries_c',
    'feature' => 'GL_VERSION_1_5',
    'glewImpl' => '__glewDeleteQueries',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* ids'
  },
  'glDeleteQueriesANGLE' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'ids',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteQueriesANGLE_c',
    'feature' => 'GL_ANGLE_timer_query',
    'glewImpl' => '__glewDeleteQueriesANGLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* ids'
  },
  'glDeleteQueriesARB' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'ids',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteQueriesARB_c',
    'feature' => 'GL_ARB_occlusion_query',
    'glewImpl' => '__glewDeleteQueriesARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* ids'
  },
  'glDeleteRenderbuffers' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'renderbuffers',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteRenderbuffers_c',
    'feature' => 'GL_ARB_framebuffer_object',
    'glewImpl' => '__glewDeleteRenderbuffers',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* renderbuffers'
  },
  'glDeleteRenderbuffersEXT' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'renderbuffers',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteRenderbuffersEXT_c',
    'feature' => 'GL_EXT_framebuffer_object',
    'glewImpl' => '__glewDeleteRenderbuffersEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* renderbuffers'
  },
  'glDeleteSamplers' => {
    'argdata' => [
      [
        'count',
        'GLsizei '
      ],
      [
        'samplers',
        'const GLuint * '
      ]
    ],
    'binding_name' => 'glDeleteSamplers_c',
    'feature' => 'GL_ARB_sampler_objects',
    'glewImpl' => '__glewDeleteSamplers',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei count, const GLuint * samplers'
  },
  'glDeleteSemaphoresEXT' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'semaphores',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteSemaphoresEXT_c',
    'feature' => 'GL_EXT_semaphore',
    'glewImpl' => '__glewDeleteSemaphoresEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* semaphores'
  },
  'glDeleteShader' => {
    'argdata' => [
      [
        'shader',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDeleteShader',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewDeleteShader',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint shader'
  },
  'glDeleteStatesNV' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'states',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteStatesNV_c',
    'feature' => 'GL_NV_command_list',
    'glewImpl' => '__glewDeleteStatesNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* states'
  },
  'glDeleteSync' => {
    'argdata' => [
      [
        'myGLsync',
        'GLsync '
      ]
    ],
    'binding_name' => 'glDeleteSync',
    'feature' => 'GL_ARB_sync',
    'glewImpl' => '__glewDeleteSync',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsync GLsync'
  },
  'glDeleteSyncAPPLE' => {
    'argdata' => [
      [
        'myGLsync',
        'GLsync '
      ]
    ],
    'binding_name' => 'glDeleteSyncAPPLE',
    'feature' => 'GL_APPLE_sync',
    'glewImpl' => '__glewDeleteSyncAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsync GLsync'
  },
  'glDeleteTextures' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'textures',
        'const GLuint *'
      ]
    ],
    'binding_name' => 'glDeleteTextures_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint *textures'
  },
  'glDeleteTexturesEXT' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'textures',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteTexturesEXT_c',
    'feature' => 'GL_EXT_texture_object',
    'glewImpl' => '__glewDeleteTexturesEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* textures'
  },
  'glDeleteTransformFeedbacks' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'ids',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteTransformFeedbacks_c',
    'feature' => 'GL_ARB_transform_feedback2',
    'glewImpl' => '__glewDeleteTransformFeedbacks',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* ids'
  },
  'glDeleteTransformFeedbacksNV' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'ids',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteTransformFeedbacksNV_c',
    'feature' => 'GL_NV_transform_feedback2',
    'glewImpl' => '__glewDeleteTransformFeedbacksNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* ids'
  },
  'glDeleteVertexArrays' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'arrays',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteVertexArrays_c',
    'feature' => 'GL_ARB_vertex_array_object',
    'glewImpl' => '__glewDeleteVertexArrays',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* arrays'
  },
  'glDeleteVertexArraysAPPLE' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'arrays',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteVertexArraysAPPLE_c',
    'feature' => 'GL_APPLE_vertex_array_object',
    'glewImpl' => '__glewDeleteVertexArraysAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* arrays'
  },
  'glDeleteVertexArraysSGIX' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'arrays',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glDeleteVertexArraysSGIX_c',
    'feature' => 'GL_SGIX_vertex_array_object',
    'glewImpl' => '__glewDeleteVertexArraysSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* arrays'
  },
  'glDeleteVertexShaderEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDeleteVertexShaderEXT',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewDeleteVertexShaderEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id'
  },
  'glDepthBoundsEXT' => {
    'argdata' => [
      [
        'zmin',
        'GLclampd '
      ],
      [
        'zmax',
        'GLclampd '
      ]
    ],
    'binding_name' => 'glDepthBoundsEXT',
    'feature' => 'GL_EXT_depth_bounds_test',
    'glewImpl' => '__glewDepthBoundsEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLclampd zmin, GLclampd zmax'
  },
  'glDepthBoundsdNV' => {
    'argdata' => [
      [
        'zmin',
        'GLdouble '
      ],
      [
        'zmax',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glDepthBoundsdNV',
    'feature' => 'GL_NV_depth_buffer_float',
    'glewImpl' => '__glewDepthBoundsdNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble zmin, GLdouble zmax'
  },
  'glDepthFunc' => {
    'argdata' => [
      [
        'func',
        'GLenum '
      ]
    ],
    'binding_name' => 'glDepthFunc',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum func'
  },
  'glDepthMask' => {
    'argdata' => [
      [
        'flag',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glDepthMask',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLboolean flag'
  },
  'glDepthRange' => {
    'argdata' => [
      [
        'zNear',
        'GLclampd '
      ],
      [
        'zFar',
        'GLclampd '
      ]
    ],
    'binding_name' => 'glDepthRange',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLclampd zNear, GLclampd zFar'
  },
  'glDepthRangeArrayfvNV' => {
    'argdata' => [
      [
        'first',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'v',
        'const GLfloat * '
      ]
    ],
    'binding_name' => 'glDepthRangeArrayfvNV_c',
    'feature' => 'GL_NV_viewport_array',
    'glewImpl' => '__glewDepthRangeArrayfvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint first, GLsizei count, const GLfloat * v'
  },
  'glDepthRangeArrayv' => {
    'argdata' => [
      [
        'first',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'v',
        'const GLclampd * '
      ]
    ],
    'binding_name' => 'glDepthRangeArrayv_c',
    'feature' => 'GL_ARB_viewport_array',
    'glewImpl' => '__glewDepthRangeArrayv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint first, GLsizei count, const GLclampd * v'
  },
  'glDepthRangeIndexed' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'n',
        'GLclampd '
      ],
      [
        'f',
        'GLclampd '
      ]
    ],
    'binding_name' => 'glDepthRangeIndexed',
    'feature' => 'GL_ARB_viewport_array',
    'glewImpl' => '__glewDepthRangeIndexed',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLclampd n, GLclampd f'
  },
  'glDepthRangeIndexedfNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'n',
        'GLfloat '
      ],
      [
        'f',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glDepthRangeIndexedfNV',
    'feature' => 'GL_NV_viewport_array',
    'glewImpl' => '__glewDepthRangeIndexedfNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLfloat n, GLfloat f'
  },
  'glDepthRangedNV' => {
    'argdata' => [
      [
        'zNear',
        'GLdouble '
      ],
      [
        'zFar',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glDepthRangedNV',
    'feature' => 'GL_NV_depth_buffer_float',
    'glewImpl' => '__glewDepthRangedNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble zNear, GLdouble zFar'
  },
  'glDepthRangef' => {
    'argdata' => [
      [
        'n',
        'GLclampf '
      ],
      [
        'f',
        'GLclampf '
      ]
    ],
    'binding_name' => 'glDepthRangef',
    'feature' => 'GL_ARB_ES2_compatibility',
    'glewImpl' => '__glewDepthRangef',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLclampf n, GLclampf f'
  },
  'glDepthRangex' => {
    'argdata' => [
      [
        'zNear',
        'GLclampx '
      ],
      [
        'zFar',
        'GLclampx '
      ]
    ],
    'binding_name' => 'glDepthRangex',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewDepthRangex',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLclampx zNear, GLclampx zFar'
  },
  'glDetachObjectARB' => {
    'argdata' => [
      [
        'containerObj',
        'GLhandleARB '
      ],
      [
        'attachedObj',
        'GLhandleARB '
      ]
    ],
    'binding_name' => 'glDetachObjectARB',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewDetachObjectARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhandleARB containerObj, GLhandleARB attachedObj'
  },
  'glDetachShader' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'shader',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDetachShader',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewDetachShader',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLuint shader'
  },
  'glDetailTexFuncSGIS' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'points',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glDetailTexFuncSGIS_c',
    'feature' => 'GL_SGIS_detail_texture',
    'glewImpl' => '__glewDetailTexFuncSGIS',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei n, const GLfloat* points'
  },
  'glDisable' => {
    'argdata' => [
      [
        'cap',
        'GLenum '
      ]
    ],
    'binding_name' => 'glDisable',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum cap'
  },
  'glDisableClientState' => {
    'argdata' => [
      [
        'array',
        'GLenum '
      ]
    ],
    'binding_name' => 'glDisableClientState',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum array'
  },
  'glDisableClientStateIndexedEXT' => {
    'argdata' => [
      [
        'array',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDisableClientStateIndexedEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewDisableClientStateIndexedEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum array, GLuint index'
  },
  'glDisableClientStateiEXT' => {
    'argdata' => [
      [
        'array',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDisableClientStateiEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewDisableClientStateiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum array, GLuint index'
  },
  'glDisableDriverControlQCOM' => {
    'argdata' => [
      [
        'driverControl',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDisableDriverControlQCOM',
    'feature' => 'GL_QCOM_driver_control',
    'glewImpl' => '__glewDisableDriverControlQCOM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint driverControl'
  },
  'glDisableIndexedEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDisableIndexedEXT',
    'feature' => 'GL_EXT_draw_buffers2',
    'glewImpl' => '__glewDisableIndexedEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index'
  },
  'glDisableVariantClientStateEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDisableVariantClientStateEXT',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewDisableVariantClientStateEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id'
  },
  'glDisableVertexArrayAttrib' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDisableVertexArrayAttrib',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewDisableVertexArrayAttrib',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint index'
  },
  'glDisableVertexArrayAttribEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDisableVertexArrayAttribEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewDisableVertexArrayAttribEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint index'
  },
  'glDisableVertexArrayEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'array',
        'GLenum '
      ]
    ],
    'binding_name' => 'glDisableVertexArrayEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewDisableVertexArrayEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLenum array'
  },
  'glDisableVertexAttribAPPLE' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ]
    ],
    'binding_name' => 'glDisableVertexAttribAPPLE',
    'feature' => 'GL_APPLE_vertex_program_evaluators',
    'glewImpl' => '__glewDisableVertexAttribAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname'
  },
  'glDisableVertexAttribArray' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDisableVertexAttribArray',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewDisableVertexAttribArray',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index'
  },
  'glDisableVertexAttribArrayARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDisableVertexAttribArrayARB',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewDisableVertexAttribArrayARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index'
  },
  'glDisablei' => {
    'argdata' => [
      [
        'cap',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDisablei',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewDisablei',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum cap, GLuint index'
  },
  'glDisableiEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDisableiEXT',
    'feature' => 'GL_EXT_draw_buffers_indexed',
    'glewImpl' => '__glewDisableiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index'
  },
  'glDisableiNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDisableiNV',
    'feature' => 'GL_NV_viewport_array',
    'glewImpl' => '__glewDisableiNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index'
  },
  'glDiscardFramebufferEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'numAttachments',
        'GLsizei '
      ],
      [
        'attachments',
        'const GLenum* '
      ]
    ],
    'binding_name' => 'glDiscardFramebufferEXT_c',
    'feature' => 'GL_EXT_discard_framebuffer',
    'glewImpl' => '__glewDiscardFramebufferEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei numAttachments, const GLenum* attachments'
  },
  'glDispatchCompute' => {
    'argdata' => [
      [
        'num_groups_x',
        'GLuint '
      ],
      [
        'num_groups_y',
        'GLuint '
      ],
      [
        'num_groups_z',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDispatchCompute',
    'feature' => 'GL_ARB_compute_shader',
    'glewImpl' => '__glewDispatchCompute',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z'
  },
  'glDispatchComputeGroupSizeARB' => {
    'argdata' => [
      [
        'num_groups_x',
        'GLuint '
      ],
      [
        'num_groups_y',
        'GLuint '
      ],
      [
        'num_groups_z',
        'GLuint '
      ],
      [
        'group_size_x',
        'GLuint '
      ],
      [
        'group_size_y',
        'GLuint '
      ],
      [
        'group_size_z',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDispatchComputeGroupSizeARB',
    'feature' => 'GL_ARB_compute_variable_group_size',
    'glewImpl' => '__glewDispatchComputeGroupSizeARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z'
  },
  'glDispatchComputeIndirect' => {
    'argdata' => [
      [
        'indirect',
        'GLintptr '
      ]
    ],
    'binding_name' => 'glDispatchComputeIndirect',
    'feature' => 'GL_ARB_compute_shader',
    'glewImpl' => '__glewDispatchComputeIndirect',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLintptr indirect'
  },
  'glDrawArrays' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'first',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glDrawArrays',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLint first, GLsizei count'
  },
  'glDrawArraysEXT' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'first',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glDrawArraysEXT',
    'feature' => 'GL_EXT_vertex_array',
    'glewImpl' => '__glewDrawArraysEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLint first, GLsizei count'
  },
  'glDrawArraysIndirect' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'indirect',
        'const void *'
      ]
    ],
    'binding_name' => 'glDrawArraysIndirect_c',
    'feature' => 'GL_ARB_draw_indirect',
    'glewImpl' => '__glewDrawArraysIndirect',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, const void *indirect'
  },
  'glDrawArraysInstanced' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'first',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'primcount',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glDrawArraysInstanced',
    'feature' => 'GL_VERSION_3_1',
    'glewImpl' => '__glewDrawArraysInstanced',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLint first, GLsizei count, GLsizei primcount'
  },
  'glDrawArraysInstancedANGLE' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'first',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'primcount',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glDrawArraysInstancedANGLE',
    'feature' => 'GL_ANGLE_instanced_arrays',
    'glewImpl' => '__glewDrawArraysInstancedANGLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLint first, GLsizei count, GLsizei primcount'
  },
  'glDrawArraysInstancedARB' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'first',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'primcount',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glDrawArraysInstancedARB',
    'feature' => 'GL_ARB_instanced_arrays',
    'glewImpl' => '__glewDrawArraysInstancedARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLint first, GLsizei count, GLsizei primcount'
  },
  'glDrawArraysInstancedBaseInstance' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'first',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'primcount',
        'GLsizei '
      ],
      [
        'baseinstance',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDrawArraysInstancedBaseInstance',
    'feature' => 'GL_ARB_base_instance',
    'glewImpl' => '__glewDrawArraysInstancedBaseInstance',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance'
  },
  'glDrawArraysInstancedBaseInstanceEXT' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'first',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'instancecount',
        'GLsizei '
      ],
      [
        'baseinstance',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDrawArraysInstancedBaseInstanceEXT',
    'feature' => 'GL_EXT_base_instance',
    'glewImpl' => '__glewDrawArraysInstancedBaseInstanceEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance'
  },
  'glDrawArraysInstancedEXT' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'start',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'primcount',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glDrawArraysInstancedEXT',
    'feature' => 'GL_EXT_draw_instanced',
    'glewImpl' => '__glewDrawArraysInstancedEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLint start, GLsizei count, GLsizei primcount'
  },
  'glDrawArraysInstancedNV' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'first',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'primcount',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glDrawArraysInstancedNV',
    'feature' => 'GL_NV_draw_instanced',
    'glewImpl' => '__glewDrawArraysInstancedNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLint first, GLsizei count, GLsizei primcount'
  },
  'glDrawBuffer' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glDrawBuffer',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode'
  },
  'glDrawBufferRegion' => {
    'argdata' => [
      [
        'region',
        'GLuint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'xDest',
        'GLint '
      ],
      [
        'yDest',
        'GLint '
      ]
    ],
    'binding_name' => 'glDrawBufferRegion',
    'feature' => 'GL_KTX_buffer_region',
    'glewImpl' => '__glewDrawBufferRegion',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest'
  },
  'glDrawBuffers' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'bufs',
        'const GLenum* '
      ]
    ],
    'binding_name' => 'glDrawBuffers_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewDrawBuffers',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLenum* bufs'
  },
  'glDrawBuffersARB' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'bufs',
        'const GLenum* '
      ]
    ],
    'binding_name' => 'glDrawBuffersARB_c',
    'feature' => 'GL_ARB_draw_buffers',
    'glewImpl' => '__glewDrawBuffersARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLenum* bufs'
  },
  'glDrawBuffersATI' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'bufs',
        'const GLenum* '
      ]
    ],
    'binding_name' => 'glDrawBuffersATI_c',
    'feature' => 'GL_ATI_draw_buffers',
    'glewImpl' => '__glewDrawBuffersATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLenum* bufs'
  },
  'glDrawBuffersEXT' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'bufs',
        'const GLenum* '
      ]
    ],
    'binding_name' => 'glDrawBuffersEXT_c',
    'feature' => 'GL_EXT_draw_buffers',
    'glewImpl' => '__glewDrawBuffersEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLenum* bufs'
  },
  'glDrawBuffersIndexedEXT' => {
    'argdata' => [
      [
        'n',
        'GLint '
      ],
      [
        'location',
        'const GLenum* '
      ],
      [
        'indices',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glDrawBuffersIndexedEXT_c',
    'feature' => 'GL_EXT_multiview_draw_buffers',
    'glewImpl' => '__glewDrawBuffersIndexedEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint n, const GLenum* location, const GLint *indices'
  },
  'glDrawBuffersNV' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'bufs',
        'const GLenum* '
      ]
    ],
    'binding_name' => 'glDrawBuffersNV_c',
    'feature' => 'GL_NV_draw_buffers',
    'glewImpl' => '__glewDrawBuffersNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLenum* bufs'
  },
  'glDrawCommandsAddressNV' => {
    'argdata' => [
      [
        'primitiveMode',
        'GLenum '
      ],
      [
        'indirects',
        'const GLuint64* '
      ],
      [
        'sizes',
        'const GLsizei* '
      ],
      [
        'count',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDrawCommandsAddressNV_c',
    'feature' => 'GL_NV_command_list',
    'glewImpl' => '__glewDrawCommandsAddressNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum primitiveMode, const GLuint64* indirects, const GLsizei* sizes, GLuint count'
  },
  'glDrawCommandsNV' => {
    'argdata' => [
      [
        'primitiveMode',
        'GLenum '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'indirects',
        'const GLintptr* '
      ],
      [
        'sizes',
        'const GLsizei* '
      ],
      [
        'count',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDrawCommandsNV_c',
    'feature' => 'GL_NV_command_list',
    'glewImpl' => '__glewDrawCommandsNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum primitiveMode, GLuint buffer, const GLintptr* indirects, const GLsizei* sizes, GLuint count'
  },
  'glDrawCommandsStatesAddressNV' => {
    'argdata' => [
      [
        'indirects',
        'const GLuint64* '
      ],
      [
        'sizes',
        'const GLsizei* '
      ],
      [
        'states',
        'const GLuint* '
      ],
      [
        'fbos',
        'const GLuint* '
      ],
      [
        'count',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDrawCommandsStatesAddressNV_c',
    'feature' => 'GL_NV_command_list',
    'glewImpl' => '__glewDrawCommandsStatesAddressNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLuint64* indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count'
  },
  'glDrawCommandsStatesNV' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'indirects',
        'const GLintptr* '
      ],
      [
        'sizes',
        'const GLsizei* '
      ],
      [
        'states',
        'const GLuint* '
      ],
      [
        'fbos',
        'const GLuint* '
      ],
      [
        'count',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDrawCommandsStatesNV_c',
    'feature' => 'GL_NV_command_list',
    'glewImpl' => '__glewDrawCommandsStatesNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, const GLintptr* indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count'
  },
  'glDrawElementArrayAPPLE' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'first',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glDrawElementArrayAPPLE',
    'feature' => 'GL_APPLE_element_array',
    'glewImpl' => '__glewDrawElementArrayAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLint first, GLsizei count'
  },
  'glDrawElementArrayATI' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'count',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glDrawElementArrayATI',
    'feature' => 'GL_ATI_element_array',
    'glewImpl' => '__glewDrawElementArrayATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLsizei count'
  },
  'glDrawElements' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indices',
        'const void *'
      ]
    ],
    'binding_name' => 'glDrawElements_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLsizei count, GLenum type, const void *indices'
  },
  'glDrawElementsBaseVertex' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indices',
        'void *'
      ],
      [
        'basevertex',
        'GLint '
      ]
    ],
    'binding_name' => 'glDrawElementsBaseVertex_c',
    'feature' => 'GL_ARB_draw_elements_base_vertex',
    'glewImpl' => '__glewDrawElementsBaseVertex',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLsizei count, GLenum type, void *indices, GLint basevertex'
  },
  'glDrawElementsBaseVertexEXT' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indices',
        'const void *'
      ],
      [
        'basevertex',
        'GLint '
      ]
    ],
    'binding_name' => 'glDrawElementsBaseVertexEXT_c',
    'feature' => 'GL_EXT_draw_elements_base_vertex',
    'glewImpl' => '__glewDrawElementsBaseVertexEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex'
  },
  'glDrawElementsIndirect' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indirect',
        'const void *'
      ]
    ],
    'binding_name' => 'glDrawElementsIndirect_c',
    'feature' => 'GL_ARB_draw_indirect',
    'glewImpl' => '__glewDrawElementsIndirect',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLenum type, const void *indirect'
  },
  'glDrawElementsInstanced' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indices',
        'const void* '
      ],
      [
        'primcount',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glDrawElementsInstanced_c',
    'feature' => 'GL_VERSION_3_1',
    'glewImpl' => '__glewDrawElementsInstanced',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount'
  },
  'glDrawElementsInstancedANGLE' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indices',
        'const void *'
      ],
      [
        'primcount',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glDrawElementsInstancedANGLE_c',
    'feature' => 'GL_ANGLE_instanced_arrays',
    'glewImpl' => '__glewDrawElementsInstancedANGLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount'
  },
  'glDrawElementsInstancedARB' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indices',
        'const void* '
      ],
      [
        'primcount',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glDrawElementsInstancedARB_c',
    'feature' => 'GL_ARB_instanced_arrays',
    'glewImpl' => '__glewDrawElementsInstancedARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount'
  },
  'glDrawElementsInstancedBaseInstance' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indices',
        'const void *'
      ],
      [
        'primcount',
        'GLsizei '
      ],
      [
        'baseinstance',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDrawElementsInstancedBaseInstance_c',
    'feature' => 'GL_ARB_base_instance',
    'glewImpl' => '__glewDrawElementsInstancedBaseInstance',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, GLuint baseinstance'
  },
  'glDrawElementsInstancedBaseInstanceEXT' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indices',
        'const void *'
      ],
      [
        'instancecount',
        'GLsizei '
      ],
      [
        'baseinstance',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDrawElementsInstancedBaseInstanceEXT_c',
    'feature' => 'GL_EXT_base_instance',
    'glewImpl' => '__glewDrawElementsInstancedBaseInstanceEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance'
  },
  'glDrawElementsInstancedBaseVertex' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indices',
        'const void *'
      ],
      [
        'primcount',
        'GLsizei '
      ],
      [
        'basevertex',
        'GLint '
      ]
    ],
    'binding_name' => 'glDrawElementsInstancedBaseVertex_c',
    'feature' => 'GL_ARB_draw_elements_base_vertex',
    'glewImpl' => '__glewDrawElementsInstancedBaseVertex',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, GLint basevertex'
  },
  'glDrawElementsInstancedBaseVertexBaseInstance' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indices',
        'const void *'
      ],
      [
        'primcount',
        'GLsizei '
      ],
      [
        'basevertex',
        'GLint '
      ],
      [
        'baseinstance',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDrawElementsInstancedBaseVertexBaseInstance_c',
    'feature' => 'GL_ARB_base_instance',
    'glewImpl' => '__glewDrawElementsInstancedBaseVertexBaseInstance',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance'
  },
  'glDrawElementsInstancedBaseVertexBaseInstanceEXT' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indices',
        'const void *'
      ],
      [
        'instancecount',
        'GLsizei '
      ],
      [
        'basevertex',
        'GLint '
      ],
      [
        'baseinstance',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDrawElementsInstancedBaseVertexBaseInstanceEXT_c',
    'feature' => 'GL_EXT_base_instance',
    'glewImpl' => '__glewDrawElementsInstancedBaseVertexBaseInstanceEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance'
  },
  'glDrawElementsInstancedBaseVertexEXT' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indices',
        'const void *'
      ],
      [
        'instancecount',
        'GLsizei '
      ],
      [
        'basevertex',
        'GLint '
      ]
    ],
    'binding_name' => 'glDrawElementsInstancedBaseVertexEXT_c',
    'feature' => 'GL_EXT_draw_elements_base_vertex',
    'glewImpl' => '__glewDrawElementsInstancedBaseVertexEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex'
  },
  'glDrawElementsInstancedEXT' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indices',
        'const void *'
      ],
      [
        'primcount',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glDrawElementsInstancedEXT_c',
    'feature' => 'GL_EXT_draw_instanced',
    'glewImpl' => '__glewDrawElementsInstancedEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount'
  },
  'glDrawElementsInstancedNV' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indices',
        'const void *'
      ],
      [
        'primcount',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glDrawElementsInstancedNV_c',
    'feature' => 'GL_NV_draw_instanced',
    'glewImpl' => '__glewDrawElementsInstancedNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount'
  },
  'glDrawPixels' => {
    'argdata' => [
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glDrawPixels_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels'
  },
  'glDrawRangeElementArrayAPPLE' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'start',
        'GLuint '
      ],
      [
        'end',
        'GLuint '
      ],
      [
        'first',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glDrawRangeElementArrayAPPLE',
    'feature' => 'GL_APPLE_element_array',
    'glewImpl' => '__glewDrawRangeElementArrayAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count'
  },
  'glDrawRangeElementArrayATI' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'start',
        'GLuint '
      ],
      [
        'end',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glDrawRangeElementArrayATI',
    'feature' => 'GL_ATI_element_array',
    'glewImpl' => '__glewDrawRangeElementArrayATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLuint start, GLuint end, GLsizei count'
  },
  'glDrawRangeElements' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'start',
        'GLuint '
      ],
      [
        'end',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indices',
        'const void *'
      ]
    ],
    'binding_name' => 'glDrawRangeElements_c',
    'feature' => 'GL_VERSION_1_2',
    'glewImpl' => '__glewDrawRangeElements',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices'
  },
  'glDrawRangeElementsBaseVertex' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'start',
        'GLuint '
      ],
      [
        'end',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indices',
        'void *'
      ],
      [
        'basevertex',
        'GLint '
      ]
    ],
    'binding_name' => 'glDrawRangeElementsBaseVertex_c',
    'feature' => 'GL_ARB_draw_elements_base_vertex',
    'glewImpl' => '__glewDrawRangeElementsBaseVertex',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, void *indices, GLint basevertex'
  },
  'glDrawRangeElementsBaseVertexEXT' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'start',
        'GLuint '
      ],
      [
        'end',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indices',
        'const void *'
      ],
      [
        'basevertex',
        'GLint '
      ]
    ],
    'binding_name' => 'glDrawRangeElementsBaseVertexEXT_c',
    'feature' => 'GL_EXT_draw_elements_base_vertex',
    'glewImpl' => '__glewDrawRangeElementsBaseVertexEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex'
  },
  'glDrawRangeElementsEXT' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'start',
        'GLuint '
      ],
      [
        'end',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indices',
        'const void *'
      ]
    ],
    'binding_name' => 'glDrawRangeElementsEXT_c',
    'feature' => 'GL_EXT_draw_range_elements',
    'glewImpl' => '__glewDrawRangeElementsEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices'
  },
  'glDrawTextureNV' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'sampler',
        'GLuint '
      ],
      [
        'x0',
        'GLfloat '
      ],
      [
        'y0',
        'GLfloat '
      ],
      [
        'x1',
        'GLfloat '
      ],
      [
        'y1',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ],
      [
        's0',
        'GLfloat '
      ],
      [
        't0',
        'GLfloat '
      ],
      [
        's1',
        'GLfloat '
      ],
      [
        't1',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glDrawTextureNV',
    'feature' => 'GL_NV_draw_texture',
    'glewImpl' => '__glewDrawTextureNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1'
  },
  'glDrawTransformFeedback' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'id',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDrawTransformFeedback',
    'feature' => 'GL_ARB_transform_feedback2',
    'glewImpl' => '__glewDrawTransformFeedback',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLuint id'
  },
  'glDrawTransformFeedbackInstanced' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'id',
        'GLuint '
      ],
      [
        'primcount',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glDrawTransformFeedbackInstanced',
    'feature' => 'GL_ARB_transform_feedback_instanced',
    'glewImpl' => '__glewDrawTransformFeedbackInstanced',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLuint id, GLsizei primcount'
  },
  'glDrawTransformFeedbackNV' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'id',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDrawTransformFeedbackNV',
    'feature' => 'GL_NV_transform_feedback2',
    'glewImpl' => '__glewDrawTransformFeedbackNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLuint id'
  },
  'glDrawTransformFeedbackStream' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'id',
        'GLuint '
      ],
      [
        'stream',
        'GLuint '
      ]
    ],
    'binding_name' => 'glDrawTransformFeedbackStream',
    'feature' => 'GL_ARB_transform_feedback3',
    'glewImpl' => '__glewDrawTransformFeedbackStream',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLuint id, GLuint stream'
  },
  'glDrawTransformFeedbackStreamInstanced' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'id',
        'GLuint '
      ],
      [
        'stream',
        'GLuint '
      ],
      [
        'primcount',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glDrawTransformFeedbackStreamInstanced',
    'feature' => 'GL_ARB_transform_feedback_instanced',
    'glewImpl' => '__glewDrawTransformFeedbackStreamInstanced',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLuint id, GLuint stream, GLsizei primcount'
  },
  'glDrawVkImageNV' => {
    'argdata' => [
      [
        'vkImage',
        'GLuint64 '
      ],
      [
        'sampler',
        'GLuint '
      ],
      [
        'x0',
        'GLfloat '
      ],
      [
        'y0',
        'GLfloat '
      ],
      [
        'x1',
        'GLfloat '
      ],
      [
        'y1',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ],
      [
        's0',
        'GLfloat '
      ],
      [
        't0',
        'GLfloat '
      ],
      [
        's1',
        'GLfloat '
      ],
      [
        't1',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glDrawVkImageNV',
    'feature' => 'GL_NV_draw_vulkan_image',
    'glewImpl' => '__glewDrawVkImageNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1'
  },
  'glEdgeFlag' => {
    'argdata' => [
      [
        'flag',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glEdgeFlag',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLboolean flag'
  },
  'glEdgeFlagFormatNV' => {
    'argdata' => [
      [
        'stride',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glEdgeFlagFormatNV',
    'feature' => 'GL_NV_vertex_buffer_unified_memory',
    'glewImpl' => '__glewEdgeFlagFormatNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei stride'
  },
  'glEdgeFlagPointer' => {
    'argdata' => [
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'const void *'
      ]
    ],
    'binding_name' => 'glEdgeFlagPointer_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei stride, const void *pointer'
  },
  'glEdgeFlagPointerEXT' => {
    'argdata' => [
      [
        'stride',
        'GLsizei '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'pointer',
        'const GLboolean* '
      ]
    ],
    'binding_name' => 'glEdgeFlagPointerEXT_c',
    'feature' => 'GL_EXT_vertex_array',
    'glewImpl' => '__glewEdgeFlagPointerEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei stride, GLsizei count, const GLboolean* pointer'
  },
  'glEdgeFlagPointerListIBM' => {
    'argdata' => [
      [
        'stride',
        'GLint '
      ],
      [
        'pointer',
        'const GLboolean ** '
      ],
      [
        'ptrstride',
        'GLint '
      ]
    ],
    'binding_name' => 'glEdgeFlagPointerListIBM_c',
    'feature' => 'GL_IBM_vertex_array_lists',
    'glewImpl' => '__glewEdgeFlagPointerListIBM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint stride, const GLboolean ** pointer, GLint ptrstride'
  },
  'glEdgeFlagv' => {
    'argdata' => [
      [
        'flag',
        'const GLboolean *'
      ]
    ],
    'binding_name' => 'glEdgeFlagv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLboolean *flag'
  },
  'glElementPointerAPPLE' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'pointer',
        'const void *'
      ]
    ],
    'binding_name' => 'glElementPointerAPPLE_c',
    'feature' => 'GL_APPLE_element_array',
    'glewImpl' => '__glewElementPointerAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, const void *pointer'
  },
  'glElementPointerATI' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'pointer',
        'const void *'
      ]
    ],
    'binding_name' => 'glElementPointerATI_c',
    'feature' => 'GL_ATI_element_array',
    'glewImpl' => '__glewElementPointerATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, const void *pointer'
  },
  'glEnable' => {
    'argdata' => [
      [
        'cap',
        'GLenum '
      ]
    ],
    'binding_name' => 'glEnable',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum cap'
  },
  'glEnableClientState' => {
    'argdata' => [
      [
        'array',
        'GLenum '
      ]
    ],
    'binding_name' => 'glEnableClientState',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum array'
  },
  'glEnableClientStateIndexedEXT' => {
    'argdata' => [
      [
        'array',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glEnableClientStateIndexedEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewEnableClientStateIndexedEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum array, GLuint index'
  },
  'glEnableClientStateiEXT' => {
    'argdata' => [
      [
        'array',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glEnableClientStateiEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewEnableClientStateiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum array, GLuint index'
  },
  'glEnableDriverControlQCOM' => {
    'argdata' => [
      [
        'driverControl',
        'GLuint '
      ]
    ],
    'binding_name' => 'glEnableDriverControlQCOM',
    'feature' => 'GL_QCOM_driver_control',
    'glewImpl' => '__glewEnableDriverControlQCOM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint driverControl'
  },
  'glEnableIndexedEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glEnableIndexedEXT',
    'feature' => 'GL_EXT_draw_buffers2',
    'glewImpl' => '__glewEnableIndexedEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index'
  },
  'glEnableVariantClientStateEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ]
    ],
    'binding_name' => 'glEnableVariantClientStateEXT',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewEnableVariantClientStateEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id'
  },
  'glEnableVertexArrayAttrib' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glEnableVertexArrayAttrib',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewEnableVertexArrayAttrib',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint index'
  },
  'glEnableVertexArrayAttribEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glEnableVertexArrayAttribEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewEnableVertexArrayAttribEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint index'
  },
  'glEnableVertexArrayEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'array',
        'GLenum '
      ]
    ],
    'binding_name' => 'glEnableVertexArrayEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewEnableVertexArrayEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLenum array'
  },
  'glEnableVertexAttribAPPLE' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ]
    ],
    'binding_name' => 'glEnableVertexAttribAPPLE',
    'feature' => 'GL_APPLE_vertex_program_evaluators',
    'glewImpl' => '__glewEnableVertexAttribAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname'
  },
  'glEnableVertexAttribArray' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glEnableVertexAttribArray',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewEnableVertexAttribArray',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index'
  },
  'glEnableVertexAttribArrayARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glEnableVertexAttribArrayARB',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewEnableVertexAttribArrayARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index'
  },
  'glEnablei' => {
    'argdata' => [
      [
        'cap',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glEnablei',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewEnablei',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum cap, GLuint index'
  },
  'glEnableiEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glEnableiEXT',
    'feature' => 'GL_EXT_draw_buffers_indexed',
    'glewImpl' => '__glewEnableiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index'
  },
  'glEnableiNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glEnableiNV',
    'feature' => 'GL_NV_viewport_array',
    'glewImpl' => '__glewEnableiNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index'
  },
  'glEnd' => {
    'binding_name' => 'glEnd',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glEndConditionalRender' => {
    'binding_name' => 'glEndConditionalRender',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewEndConditionalRender',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glEndConditionalRenderNV' => {
    'binding_name' => 'glEndConditionalRenderNV',
    'feature' => 'GL_NV_conditional_render',
    'glewImpl' => '__glewEndConditionalRenderNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glEndConditionalRenderNVX' => {
    'binding_name' => 'glEndConditionalRenderNVX',
    'feature' => 'GL_NVX_conditional_render',
    'glewImpl' => '__glewEndConditionalRenderNVX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glEndFragmentShaderATI' => {
    'binding_name' => 'glEndFragmentShaderATI',
    'feature' => 'GL_ATI_fragment_shader',
    'glewImpl' => '__glewEndFragmentShaderATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glEndList' => {
    'binding_name' => 'glEndList',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glEndOcclusionQueryNV' => {
    'binding_name' => 'glEndOcclusionQueryNV',
    'feature' => 'GL_NV_occlusion_query',
    'glewImpl' => '__glewEndOcclusionQueryNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glEndPerfMonitorAMD' => {
    'argdata' => [
      [
        'monitor',
        'GLuint '
      ]
    ],
    'binding_name' => 'glEndPerfMonitorAMD',
    'feature' => 'GL_AMD_performance_monitor',
    'glewImpl' => '__glewEndPerfMonitorAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint monitor'
  },
  'glEndPerfQueryINTEL' => {
    'argdata' => [
      [
        'queryHandle',
        'GLuint '
      ]
    ],
    'binding_name' => 'glEndPerfQueryINTEL',
    'feature' => 'GL_INTEL_performance_query',
    'glewImpl' => '__glewEndPerfQueryINTEL',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint queryHandle'
  },
  'glEndQuery' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glEndQuery',
    'feature' => 'GL_VERSION_1_5',
    'glewImpl' => '__glewEndQuery',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target'
  },
  'glEndQueryANGLE' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glEndQueryANGLE',
    'feature' => 'GL_ANGLE_timer_query',
    'glewImpl' => '__glewEndQueryANGLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target'
  },
  'glEndQueryARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glEndQueryARB',
    'feature' => 'GL_ARB_occlusion_query',
    'glewImpl' => '__glewEndQueryARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target'
  },
  'glEndQueryIndexed' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glEndQueryIndexed',
    'feature' => 'GL_ARB_transform_feedback3',
    'glewImpl' => '__glewEndQueryIndexed',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index'
  },
  'glEndSceneEXT' => {
    'binding_name' => 'glEndSceneEXT',
    'feature' => 'GL_EXT_scene_marker',
    'glewImpl' => '__glewEndSceneEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glEndTilingQCOM' => {
    'argdata' => [
      [
        'preserveMask',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glEndTilingQCOM',
    'feature' => 'GL_QCOM_tiled_rendering',
    'glewImpl' => '__glewEndTilingQCOM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLbitfield preserveMask'
  },
  'glEndTransformFeedback' => {
    'binding_name' => 'glEndTransformFeedback',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewEndTransformFeedback',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glEndTransformFeedbackEXT' => {
    'binding_name' => 'glEndTransformFeedbackEXT',
    'feature' => 'GL_EXT_transform_feedback',
    'glewImpl' => '__glewEndTransformFeedbackEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glEndTransformFeedbackNV' => {
    'binding_name' => 'glEndTransformFeedbackNV',
    'feature' => 'GL_NV_transform_feedback',
    'glewImpl' => '__glewEndTransformFeedbackNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glEndVertexShaderEXT' => {
    'binding_name' => 'glEndVertexShaderEXT',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewEndVertexShaderEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glEndVideoCaptureNV' => {
    'argdata' => [
      [
        'video_capture_slot',
        'GLuint '
      ]
    ],
    'binding_name' => 'glEndVideoCaptureNV',
    'feature' => 'GL_NV_video_capture',
    'glewImpl' => '__glewEndVideoCaptureNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint video_capture_slot'
  },
  'glEvalCoord1d' => {
    'argdata' => [
      [
        'u',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glEvalCoord1d',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble u'
  },
  'glEvalCoord1dv' => {
    'argdata' => [
      [
        'u',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glEvalCoord1dv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble *u'
  },
  'glEvalCoord1f' => {
    'argdata' => [
      [
        'u',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glEvalCoord1f',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat u'
  },
  'glEvalCoord1fv' => {
    'argdata' => [
      [
        'u',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glEvalCoord1fv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat *u'
  },
  'glEvalCoord2d' => {
    'argdata' => [
      [
        'u',
        'GLdouble '
      ],
      [
        'v',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glEvalCoord2d',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble u, GLdouble v'
  },
  'glEvalCoord2dv' => {
    'argdata' => [
      [
        'u',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glEvalCoord2dv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble *u'
  },
  'glEvalCoord2f' => {
    'argdata' => [
      [
        'u',
        'GLfloat '
      ],
      [
        'v',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glEvalCoord2f',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat u, GLfloat v'
  },
  'glEvalCoord2fv' => {
    'argdata' => [
      [
        'u',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glEvalCoord2fv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat *u'
  },
  'glEvalMapsNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glEvalMapsNV',
    'feature' => 'GL_NV_evaluators',
    'glewImpl' => '__glewEvalMapsNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum mode'
  },
  'glEvalMesh1' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'i1',
        'GLint '
      ],
      [
        'i2',
        'GLint '
      ]
    ],
    'binding_name' => 'glEvalMesh1',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLint i1, GLint i2'
  },
  'glEvalMesh2' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'i1',
        'GLint '
      ],
      [
        'i2',
        'GLint '
      ],
      [
        'j1',
        'GLint '
      ],
      [
        'j2',
        'GLint '
      ]
    ],
    'binding_name' => 'glEvalMesh2',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2'
  },
  'glEvalPoint1' => {
    'argdata' => [
      [
        'i',
        'GLint '
      ]
    ],
    'binding_name' => 'glEvalPoint1',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint i'
  },
  'glEvalPoint2' => {
    'argdata' => [
      [
        'i',
        'GLint '
      ],
      [
        'j',
        'GLint '
      ]
    ],
    'binding_name' => 'glEvalPoint2',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint i, GLint j'
  },
  'glExecuteProgramNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'id',
        'GLuint '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glExecuteProgramNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewExecuteProgramNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint id, const GLfloat* params'
  },
  'glExtGetBufferPointervQCOM' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'params',
        'void** '
      ]
    ],
    'binding_name' => 'glExtGetBufferPointervQCOM_c',
    'feature' => 'GL_QCOM_extended_get',
    'glewImpl' => '__glewExtGetBufferPointervQCOM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, void** params'
  },
  'glExtGetBuffersQCOM' => {
    'argdata' => [
      [
        'buffers',
        'GLuint* '
      ],
      [
        'maxBuffers',
        'GLint '
      ],
      [
        'numBuffers',
        'GLint* '
      ]
    ],
    'binding_name' => 'glExtGetBuffersQCOM_c',
    'feature' => 'GL_QCOM_extended_get',
    'glewImpl' => '__glewExtGetBuffersQCOM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint* buffers, GLint maxBuffers, GLint* numBuffers'
  },
  'glExtGetFramebuffersQCOM' => {
    'argdata' => [
      [
        'framebuffers',
        'GLuint* '
      ],
      [
        'maxFramebuffers',
        'GLint '
      ],
      [
        'numFramebuffers',
        'GLint* '
      ]
    ],
    'binding_name' => 'glExtGetFramebuffersQCOM_c',
    'feature' => 'GL_QCOM_extended_get',
    'glewImpl' => '__glewExtGetFramebuffersQCOM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint* framebuffers, GLint maxFramebuffers, GLint* numFramebuffers'
  },
  'glExtGetProgramBinarySourceQCOM' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'shadertype',
        'GLenum '
      ],
      [
        'source',
        'GLchar* '
      ],
      [
        'length',
        'GLint* '
      ]
    ],
    'binding_name' => 'glExtGetProgramBinarySourceQCOM_c',
    'feature' => 'GL_QCOM_extended_get2',
    'glewImpl' => '__glewExtGetProgramBinarySourceQCOM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum shadertype, GLchar* source, GLint* length'
  },
  'glExtGetProgramsQCOM' => {
    'argdata' => [
      [
        'programs',
        'GLuint* '
      ],
      [
        'maxPrograms',
        'GLint '
      ],
      [
        'numPrograms',
        'GLint* '
      ]
    ],
    'binding_name' => 'glExtGetProgramsQCOM_c',
    'feature' => 'GL_QCOM_extended_get2',
    'glewImpl' => '__glewExtGetProgramsQCOM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint* programs, GLint maxPrograms, GLint* numPrograms'
  },
  'glExtGetRenderbuffersQCOM' => {
    'argdata' => [
      [
        'renderbuffers',
        'GLuint* '
      ],
      [
        'maxRenderbuffers',
        'GLint '
      ],
      [
        'numRenderbuffers',
        'GLint* '
      ]
    ],
    'binding_name' => 'glExtGetRenderbuffersQCOM_c',
    'feature' => 'GL_QCOM_extended_get',
    'glewImpl' => '__glewExtGetRenderbuffersQCOM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint* renderbuffers, GLint maxRenderbuffers, GLint* numRenderbuffers'
  },
  'glExtGetShadersQCOM' => {
    'argdata' => [
      [
        'shaders',
        'GLuint* '
      ],
      [
        'maxShaders',
        'GLint '
      ],
      [
        'numShaders',
        'GLint* '
      ]
    ],
    'binding_name' => 'glExtGetShadersQCOM_c',
    'feature' => 'GL_QCOM_extended_get2',
    'glewImpl' => '__glewExtGetShadersQCOM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint* shaders, GLint maxShaders, GLint* numShaders'
  },
  'glExtGetTexLevelParameterivQCOM' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'face',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glExtGetTexLevelParameterivQCOM_c',
    'feature' => 'GL_QCOM_extended_get',
    'glewImpl' => '__glewExtGetTexLevelParameterivQCOM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum face, GLint level, GLenum pname, GLint* params'
  },
  'glExtGetTexSubImageQCOM' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'texels',
        'void *'
      ]
    ],
    'binding_name' => 'glExtGetTexSubImageQCOM_c',
    'feature' => 'GL_QCOM_extended_get',
    'glewImpl' => '__glewExtGetTexSubImageQCOM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void *texels'
  },
  'glExtGetTexturesQCOM' => {
    'argdata' => [
      [
        'textures',
        'GLuint* '
      ],
      [
        'maxTextures',
        'GLint '
      ],
      [
        'numTextures',
        'GLint* '
      ]
    ],
    'binding_name' => 'glExtGetTexturesQCOM_c',
    'feature' => 'GL_QCOM_extended_get',
    'glewImpl' => '__glewExtGetTexturesQCOM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint* textures, GLint maxTextures, GLint* numTextures'
  },
  'glExtIsProgramBinaryQCOM' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ]
    ],
    'binding_name' => 'glExtIsProgramBinaryQCOM',
    'feature' => 'GL_QCOM_extended_get2',
    'glewImpl' => '__glewExtIsProgramBinaryQCOM',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint program'
  },
  'glExtTexObjectStateOverrideiQCOM' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glExtTexObjectStateOverrideiQCOM',
    'feature' => 'GL_QCOM_extended_get',
    'glewImpl' => '__glewExtTexObjectStateOverrideiQCOM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint param'
  },
  'glExtractComponentEXT' => {
    'argdata' => [
      [
        'res',
        'GLuint '
      ],
      [
        'src',
        'GLuint '
      ],
      [
        'num',
        'GLuint '
      ]
    ],
    'binding_name' => 'glExtractComponentEXT',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewExtractComponentEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint res, GLuint src, GLuint num'
  },
  'glFeedbackBuffer' => {
    'argdata' => [
      [
        'size',
        'GLsizei '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'buffer',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glFeedbackBuffer_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei size, GLenum type, GLfloat *buffer'
  },
  'glFenceSync' => {
    'argdata' => [
      [
        'condition',
        'GLenum '
      ],
      [
        'flags',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glFenceSync',
    'feature' => 'GL_ARB_sync',
    'glewImpl' => '__glewFenceSync',
    'glewtype' => 'fun',
    'restype' => 'GLsync',
    'signature' => 'GLenum condition,GLbitfield flags'
  },
  'glFenceSyncAPPLE' => {
    'argdata' => [
      [
        'condition',
        'GLenum '
      ],
      [
        'flags',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glFenceSyncAPPLE',
    'feature' => 'GL_APPLE_sync',
    'glewImpl' => '__glewFenceSyncAPPLE',
    'glewtype' => 'fun',
    'restype' => 'GLsync',
    'signature' => 'GLenum condition, GLbitfield flags'
  },
  'glFinalCombinerInputNV' => {
    'argdata' => [
      [
        'variable',
        'GLenum '
      ],
      [
        'input',
        'GLenum '
      ],
      [
        'mapping',
        'GLenum '
      ],
      [
        'componentUsage',
        'GLenum '
      ]
    ],
    'binding_name' => 'glFinalCombinerInputNV',
    'feature' => 'GL_NV_register_combiners',
    'glewImpl' => '__glewFinalCombinerInputNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage'
  },
  'glFinish' => {
    'binding_name' => 'glFinish',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glFinishAsyncSGIX' => {
    'argdata' => [
      [
        'markerp',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glFinishAsyncSGIX_c',
    'feature' => 'GL_SGIX_async',
    'glewImpl' => '__glewFinishAsyncSGIX',
    'glewtype' => 'fun',
    'restype' => 'GLint',
    'signature' => 'GLuint* markerp'
  },
  'glFinishFenceAPPLE' => {
    'argdata' => [
      [
        'fence',
        'GLuint '
      ]
    ],
    'binding_name' => 'glFinishFenceAPPLE',
    'feature' => 'GL_APPLE_fence',
    'glewImpl' => '__glewFinishFenceAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint fence'
  },
  'glFinishFenceNV' => {
    'argdata' => [
      [
        'fence',
        'GLuint '
      ]
    ],
    'binding_name' => 'glFinishFenceNV',
    'feature' => 'GL_NV_fence',
    'glewImpl' => '__glewFinishFenceNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint fence'
  },
  'glFinishObjectAPPLE' => {
    'argdata' => [
      [
        'object',
        'GLenum '
      ],
      [
        'name',
        'GLint '
      ]
    ],
    'binding_name' => 'glFinishObjectAPPLE',
    'feature' => 'GL_APPLE_fence',
    'glewImpl' => '__glewFinishObjectAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum object, GLint name'
  },
  'glFinishTextureSUNX' => {
    'binding_name' => 'glFinishTextureSUNX',
    'feature' => 'GL_SUNX_constant_data',
    'glewImpl' => '__glewFinishTextureSUNX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glFlush' => {
    'binding_name' => 'glFlush',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glFlushMappedBufferRange' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'length',
        'GLsizeiptr '
      ]
    ],
    'binding_name' => 'glFlushMappedBufferRange',
    'feature' => 'GL_ARB_map_buffer_range',
    'glewImpl' => '__glewFlushMappedBufferRange',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLintptr offset, GLsizeiptr length'
  },
  'glFlushMappedBufferRangeAPPLE' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ]
    ],
    'binding_name' => 'glFlushMappedBufferRangeAPPLE',
    'feature' => 'GL_APPLE_flush_buffer_range',
    'glewImpl' => '__glewFlushMappedBufferRangeAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLintptr offset, GLsizeiptr size'
  },
  'glFlushMappedBufferRangeEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'length',
        'GLsizeiptr '
      ]
    ],
    'binding_name' => 'glFlushMappedBufferRangeEXT',
    'feature' => 'GL_EXT_map_buffer_range',
    'glewImpl' => '__glewFlushMappedBufferRangeEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLintptr offset, GLsizeiptr length'
  },
  'glFlushMappedNamedBufferRange' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'length',
        'GLsizeiptr '
      ]
    ],
    'binding_name' => 'glFlushMappedNamedBufferRange',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewFlushMappedNamedBufferRange',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLintptr offset, GLsizeiptr length'
  },
  'glFlushMappedNamedBufferRangeEXT' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'length',
        'GLsizeiptr '
      ]
    ],
    'binding_name' => 'glFlushMappedNamedBufferRangeEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewFlushMappedNamedBufferRangeEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLintptr offset, GLsizeiptr length'
  },
  'glFlushPixelDataRangeNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glFlushPixelDataRangeNV',
    'feature' => 'GL_NV_pixel_data_range',
    'glewImpl' => '__glewFlushPixelDataRangeNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target'
  },
  'glFlushRasterSGIX' => {
    'binding_name' => 'glFlushRasterSGIX',
    'feature' => 'GL_SGIX_flush_raster',
    'glewImpl' => '__glewFlushRasterSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glFlushVertexArrayRangeAPPLE' => {
    'argdata' => [
      [
        'length',
        'GLsizei '
      ],
      [
        'pointer',
        'void *'
      ]
    ],
    'binding_name' => 'glFlushVertexArrayRangeAPPLE_c',
    'feature' => 'GL_APPLE_vertex_array_range',
    'glewImpl' => '__glewFlushVertexArrayRangeAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei length, void *pointer'
  },
  'glFlushVertexArrayRangeNV' => {
    'binding_name' => 'glFlushVertexArrayRangeNV',
    'feature' => 'GL_NV_vertex_array_range',
    'glewImpl' => '__glewFlushVertexArrayRangeNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glFogCoordFormatNV' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glFogCoordFormatNV',
    'feature' => 'GL_NV_vertex_buffer_unified_memory',
    'glewImpl' => '__glewFogCoordFormatNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLsizei stride'
  },
  'glFogCoordPointer' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'const void *'
      ]
    ],
    'binding_name' => 'glFogCoordPointer_c',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewFogCoordPointer',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLsizei stride, const void *pointer'
  },
  'glFogCoordPointerEXT' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'const void *'
      ]
    ],
    'binding_name' => 'glFogCoordPointerEXT_c',
    'feature' => 'GL_EXT_fog_coord',
    'glewImpl' => '__glewFogCoordPointerEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLsizei stride, const void *pointer'
  },
  'glFogCoordPointerListIBM' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLint '
      ],
      [
        'pointer',
        'const void** '
      ],
      [
        'ptrstride',
        'GLint '
      ]
    ],
    'binding_name' => 'glFogCoordPointerListIBM_c',
    'feature' => 'GL_IBM_vertex_array_lists',
    'glewImpl' => '__glewFogCoordPointerListIBM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLint stride, const void** pointer, GLint ptrstride'
  },
  'glFogCoordd' => {
    'argdata' => [
      [
        'coord',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glFogCoordd',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewFogCoordd',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble coord'
  },
  'glFogCoorddEXT' => {
    'argdata' => [
      [
        'coord',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glFogCoorddEXT',
    'feature' => 'GL_EXT_fog_coord',
    'glewImpl' => '__glewFogCoorddEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble coord'
  },
  'glFogCoorddv' => {
    'argdata' => [
      [
        'coord',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glFogCoorddv_c',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewFogCoorddv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble *coord'
  },
  'glFogCoorddvEXT' => {
    'argdata' => [
      [
        'coord',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glFogCoorddvEXT_c',
    'feature' => 'GL_EXT_fog_coord',
    'glewImpl' => '__glewFogCoorddvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble *coord'
  },
  'glFogCoordf' => {
    'argdata' => [
      [
        'coord',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glFogCoordf',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewFogCoordf',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat coord'
  },
  'glFogCoordfEXT' => {
    'argdata' => [
      [
        'coord',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glFogCoordfEXT',
    'feature' => 'GL_EXT_fog_coord',
    'glewImpl' => '__glewFogCoordfEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat coord'
  },
  'glFogCoordfv' => {
    'argdata' => [
      [
        'coord',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glFogCoordfv_c',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewFogCoordfv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat *coord'
  },
  'glFogCoordfvEXT' => {
    'argdata' => [
      [
        'coord',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glFogCoordfvEXT_c',
    'feature' => 'GL_EXT_fog_coord',
    'glewImpl' => '__glewFogCoordfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat *coord'
  },
  'glFogCoordhNV' => {
    'argdata' => [
      [
        'fog',
        'GLhalf '
      ]
    ],
    'binding_name' => 'glFogCoordhNV',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewFogCoordhNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhalf fog'
  },
  'glFogCoordhvNV' => {
    'argdata' => [
      [
        'fog',
        'const GLhalf* '
      ]
    ],
    'binding_name' => 'glFogCoordhvNV_c',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewFogCoordhvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLhalf* fog'
  },
  'glFogFuncSGIS' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'points',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glFogFuncSGIS_c',
    'feature' => 'GL_SGIS_fog_function',
    'glewImpl' => '__glewFogFuncSGIS',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLfloat* points'
  },
  'glFogLayersSGIX' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'points',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glFogLayersSGIX_c',
    'feature' => 'GL_SGIX_fog_layers',
    'glewImpl' => '__glewFogLayersSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLfloat* points'
  },
  'glFogf' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glFogf',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfloat param'
  },
  'glFogfv' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glFogfv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, const GLfloat *params'
  },
  'glFogi' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glFogi',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint param'
  },
  'glFogiv' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glFogiv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, const GLint *params'
  },
  'glFogx' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfixed '
      ]
    ],
    'binding_name' => 'glFogx',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewFogx',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfixed param'
  },
  'glFogxv' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfixed* '
      ]
    ],
    'binding_name' => 'glFogxv_c',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewFogxv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, const GLfixed* params'
  },
  'glFragmentColorMaterialEXT' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glFragmentColorMaterialEXT',
    'feature' => 'GL_EXT_fragment_lighting',
    'glewImpl' => '__glewFragmentColorMaterialEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum mode'
  },
  'glFragmentColorMaterialSGIX' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glFragmentColorMaterialSGIX',
    'feature' => 'GL_SGIX_fragment_specular_lighting',
    'glewImpl' => '__glewFragmentColorMaterialSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum mode'
  },
  'glFragmentCoverageColorNV' => {
    'argdata' => [
      [
        'color',
        'GLuint '
      ]
    ],
    'binding_name' => 'glFragmentCoverageColorNV',
    'feature' => 'GL_NV_fragment_coverage_to_color',
    'glewImpl' => '__glewFragmentCoverageColorNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint color'
  },
  'glFragmentLightModelfEXT' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glFragmentLightModelfEXT',
    'feature' => 'GL_EXT_fragment_lighting',
    'glewImpl' => '__glewFragmentLightModelfEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfloat param'
  },
  'glFragmentLightModelfSGIX' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glFragmentLightModelfSGIX',
    'feature' => 'GL_SGIX_fragment_specular_lighting',
    'glewImpl' => '__glewFragmentLightModelfSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfloat param'
  },
  'glFragmentLightModelfvEXT' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glFragmentLightModelfvEXT_c',
    'feature' => 'GL_EXT_fragment_lighting',
    'glewImpl' => '__glewFragmentLightModelfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfloat* params'
  },
  'glFragmentLightModelfvSGIX' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glFragmentLightModelfvSGIX_c',
    'feature' => 'GL_SGIX_fragment_specular_lighting',
    'glewImpl' => '__glewFragmentLightModelfvSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfloat* params'
  },
  'glFragmentLightModeliEXT' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glFragmentLightModeliEXT',
    'feature' => 'GL_EXT_fragment_lighting',
    'glewImpl' => '__glewFragmentLightModeliEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint param'
  },
  'glFragmentLightModeliSGIX' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glFragmentLightModeliSGIX',
    'feature' => 'GL_SGIX_fragment_specular_lighting',
    'glewImpl' => '__glewFragmentLightModeliSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint param'
  },
  'glFragmentLightModelivEXT' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glFragmentLightModelivEXT_c',
    'feature' => 'GL_EXT_fragment_lighting',
    'glewImpl' => '__glewFragmentLightModelivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint* params'
  },
  'glFragmentLightModelivSGIX' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glFragmentLightModelivSGIX_c',
    'feature' => 'GL_SGIX_fragment_specular_lighting',
    'glewImpl' => '__glewFragmentLightModelivSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint* params'
  },
  'glFragmentLightfEXT' => {
    'argdata' => [
      [
        'light',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glFragmentLightfEXT',
    'feature' => 'GL_EXT_fragment_lighting',
    'glewImpl' => '__glewFragmentLightfEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum light, GLenum pname, GLfloat param'
  },
  'glFragmentLightfSGIX' => {
    'argdata' => [
      [
        'light',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glFragmentLightfSGIX',
    'feature' => 'GL_SGIX_fragment_specular_lighting',
    'glewImpl' => '__glewFragmentLightfSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum light, GLenum pname, GLfloat param'
  },
  'glFragmentLightfvEXT' => {
    'argdata' => [
      [
        'light',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glFragmentLightfvEXT_c',
    'feature' => 'GL_EXT_fragment_lighting',
    'glewImpl' => '__glewFragmentLightfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum light, GLenum pname, GLfloat* params'
  },
  'glFragmentLightfvSGIX' => {
    'argdata' => [
      [
        'light',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glFragmentLightfvSGIX_c',
    'feature' => 'GL_SGIX_fragment_specular_lighting',
    'glewImpl' => '__glewFragmentLightfvSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum light, GLenum pname, GLfloat* params'
  },
  'glFragmentLightiEXT' => {
    'argdata' => [
      [
        'light',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glFragmentLightiEXT',
    'feature' => 'GL_EXT_fragment_lighting',
    'glewImpl' => '__glewFragmentLightiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum light, GLenum pname, GLint param'
  },
  'glFragmentLightiSGIX' => {
    'argdata' => [
      [
        'light',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glFragmentLightiSGIX',
    'feature' => 'GL_SGIX_fragment_specular_lighting',
    'glewImpl' => '__glewFragmentLightiSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum light, GLenum pname, GLint param'
  },
  'glFragmentLightivEXT' => {
    'argdata' => [
      [
        'light',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glFragmentLightivEXT_c',
    'feature' => 'GL_EXT_fragment_lighting',
    'glewImpl' => '__glewFragmentLightivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum light, GLenum pname, GLint* params'
  },
  'glFragmentLightivSGIX' => {
    'argdata' => [
      [
        'light',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glFragmentLightivSGIX_c',
    'feature' => 'GL_SGIX_fragment_specular_lighting',
    'glewImpl' => '__glewFragmentLightivSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum light, GLenum pname, GLint* params'
  },
  'glFragmentMaterialfEXT' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'const GLfloat '
      ]
    ],
    'binding_name' => 'glFragmentMaterialfEXT',
    'feature' => 'GL_EXT_fragment_lighting',
    'glewImpl' => '__glewFragmentMaterialfEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum pname, const GLfloat param'
  },
  'glFragmentMaterialfSGIX' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'const GLfloat '
      ]
    ],
    'binding_name' => 'glFragmentMaterialfSGIX',
    'feature' => 'GL_SGIX_fragment_specular_lighting',
    'glewImpl' => '__glewFragmentMaterialfSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum pname, const GLfloat param'
  },
  'glFragmentMaterialfvEXT' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glFragmentMaterialfvEXT_c',
    'feature' => 'GL_EXT_fragment_lighting',
    'glewImpl' => '__glewFragmentMaterialfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum pname, const GLfloat* params'
  },
  'glFragmentMaterialfvSGIX' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glFragmentMaterialfvSGIX_c',
    'feature' => 'GL_SGIX_fragment_specular_lighting',
    'glewImpl' => '__glewFragmentMaterialfvSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum pname, const GLfloat* params'
  },
  'glFragmentMaterialiEXT' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'const GLint '
      ]
    ],
    'binding_name' => 'glFragmentMaterialiEXT',
    'feature' => 'GL_EXT_fragment_lighting',
    'glewImpl' => '__glewFragmentMaterialiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum pname, const GLint param'
  },
  'glFragmentMaterialiSGIX' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'const GLint '
      ]
    ],
    'binding_name' => 'glFragmentMaterialiSGIX',
    'feature' => 'GL_SGIX_fragment_specular_lighting',
    'glewImpl' => '__glewFragmentMaterialiSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum pname, const GLint param'
  },
  'glFragmentMaterialivEXT' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glFragmentMaterialivEXT_c',
    'feature' => 'GL_EXT_fragment_lighting',
    'glewImpl' => '__glewFragmentMaterialivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum pname, const GLint* params'
  },
  'glFragmentMaterialivSGIX' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glFragmentMaterialivSGIX_c',
    'feature' => 'GL_SGIX_fragment_specular_lighting',
    'glewImpl' => '__glewFragmentMaterialivSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum pname, const GLint* params'
  },
  'glFrameTerminatorGREMEDY' => {
    'binding_name' => 'glFrameTerminatorGREMEDY',
    'feature' => 'GL_GREMEDY_frame_terminator',
    'glewImpl' => '__glewFrameTerminatorGREMEDY',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glFrameZoomSGIX' => {
    'argdata' => [
      [
        'factor',
        'GLint '
      ]
    ],
    'binding_name' => 'glFrameZoomSGIX',
    'feature' => 'GL_SGIX_framezoom',
    'glewImpl' => '__glewFrameZoomSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint factor'
  },
  'glFramebufferDrawBufferEXT' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glFramebufferDrawBufferEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewFramebufferDrawBufferEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum mode'
  },
  'glFramebufferDrawBuffersEXT' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'bufs',
        'const GLenum* '
      ]
    ],
    'binding_name' => 'glFramebufferDrawBuffersEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewFramebufferDrawBuffersEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLsizei n, const GLenum* bufs'
  },
  'glFramebufferFetchBarrierQCOM' => {
    'binding_name' => 'glFramebufferFetchBarrierQCOM',
    'feature' => 'GL_QCOM_shader_framebuffer_fetch_noncoherent',
    'glewImpl' => '__glewFramebufferFetchBarrierQCOM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glFramebufferFoveationConfigQCOM' => {
    'argdata' => [
      [
        'fbo',
        'GLuint '
      ],
      [
        'numLayers',
        'GLuint '
      ],
      [
        'focalPointsPerLayer',
        'GLuint '
      ],
      [
        'requestedFeatures',
        'GLuint '
      ],
      [
        'providedFeatures',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glFramebufferFoveationConfigQCOM_c',
    'feature' => 'GL_QCOM_framebuffer_foveated',
    'glewImpl' => '__glewFramebufferFoveationConfigQCOM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint fbo, GLuint numLayers, GLuint focalPointsPerLayer, GLuint requestedFeatures, GLuint* providedFeatures'
  },
  'glFramebufferFoveationParametersQCOM' => {
    'argdata' => [
      [
        'fbo',
        'GLuint '
      ],
      [
        'layer',
        'GLuint '
      ],
      [
        'focalPoint',
        'GLuint '
      ],
      [
        'focalX',
        'GLfloat '
      ],
      [
        'focalY',
        'GLfloat '
      ],
      [
        'gainX',
        'GLfloat '
      ],
      [
        'gainY',
        'GLfloat '
      ],
      [
        'foveaArea',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glFramebufferFoveationParametersQCOM',
    'feature' => 'GL_QCOM_framebuffer_foveated',
    'glewImpl' => '__glewFramebufferFoveationParametersQCOM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint fbo, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea'
  },
  'glFramebufferParameteri' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glFramebufferParameteri',
    'feature' => 'GL_ARB_framebuffer_no_attachments',
    'glewImpl' => '__glewFramebufferParameteri',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint param'
  },
  'glFramebufferPixelLocalStorageSizeEXT' => {
    'argdata' => [
      [
        'target',
        'GLuint '
      ],
      [
        'size',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glFramebufferPixelLocalStorageSizeEXT',
    'feature' => 'GL_EXT_shader_pixel_local_storage2',
    'glewImpl' => '__glewFramebufferPixelLocalStorageSizeEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint target, GLsizei size'
  },
  'glFramebufferReadBufferEXT' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glFramebufferReadBufferEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewFramebufferReadBufferEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum mode'
  },
  'glFramebufferRenderbuffer' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'renderbuffertarget',
        'GLenum '
      ],
      [
        'renderbuffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glFramebufferRenderbuffer',
    'feature' => 'GL_ARB_framebuffer_object',
    'glewImpl' => '__glewFramebufferRenderbuffer',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer'
  },
  'glFramebufferRenderbufferEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'renderbuffertarget',
        'GLenum '
      ],
      [
        'renderbuffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glFramebufferRenderbufferEXT',
    'feature' => 'GL_EXT_framebuffer_object',
    'glewImpl' => '__glewFramebufferRenderbufferEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer'
  },
  'glFramebufferSampleLocationsfvARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'start',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'v',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glFramebufferSampleLocationsfvARB_c',
    'feature' => 'GL_ARB_sample_locations',
    'glewImpl' => '__glewFramebufferSampleLocationsfvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint start, GLsizei count, const GLfloat* v'
  },
  'glFramebufferSampleLocationsfvNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'start',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'v',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glFramebufferSampleLocationsfvNV_c',
    'feature' => 'GL_NV_sample_locations',
    'glewImpl' => '__glewFramebufferSampleLocationsfvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint start, GLsizei count, const GLfloat* v'
  },
  'glFramebufferSamplePositionsfvAMD' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'numsamples',
        'GLuint '
      ],
      [
        'pixelindex',
        'GLuint '
      ],
      [
        'values',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glFramebufferSamplePositionsfvAMD_c',
    'feature' => 'GL_AMD_framebuffer_sample_positions',
    'glewImpl' => '__glewFramebufferSamplePositionsfvAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat* values'
  },
  'glFramebufferTexture' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ]
    ],
    'binding_name' => 'glFramebufferTexture',
    'feature' => 'GL_VERSION_3_2',
    'glewImpl' => '__glewFramebufferTexture',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum attachment, GLuint texture, GLint level'
  },
  'glFramebufferTexture1D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'textarget',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ]
    ],
    'binding_name' => 'glFramebufferTexture1D',
    'feature' => 'GL_ARB_framebuffer_object',
    'glewImpl' => '__glewFramebufferTexture1D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level'
  },
  'glFramebufferTexture1DEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'textarget',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ]
    ],
    'binding_name' => 'glFramebufferTexture1DEXT',
    'feature' => 'GL_EXT_framebuffer_object',
    'glewImpl' => '__glewFramebufferTexture1DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level'
  },
  'glFramebufferTexture2D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'textarget',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ]
    ],
    'binding_name' => 'glFramebufferTexture2D',
    'feature' => 'GL_ARB_framebuffer_object',
    'glewImpl' => '__glewFramebufferTexture2D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level'
  },
  'glFramebufferTexture2DEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'textarget',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ]
    ],
    'binding_name' => 'glFramebufferTexture2DEXT',
    'feature' => 'GL_EXT_framebuffer_object',
    'glewImpl' => '__glewFramebufferTexture2DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level'
  },
  'glFramebufferTexture2DMultisampleEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'textarget',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'samples',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glFramebufferTexture2DMultisampleEXT',
    'feature' => 'GL_EXT_multisampled_render_to_texture',
    'glewImpl' => '__glewFramebufferTexture2DMultisampleEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples'
  },
  'glFramebufferTexture3D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'textarget',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'layer',
        'GLint '
      ]
    ],
    'binding_name' => 'glFramebufferTexture3D',
    'feature' => 'GL_ARB_framebuffer_object',
    'glewImpl' => '__glewFramebufferTexture3D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer'
  },
  'glFramebufferTexture3DEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'textarget',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ]
    ],
    'binding_name' => 'glFramebufferTexture3DEXT',
    'feature' => 'GL_EXT_framebuffer_object',
    'glewImpl' => '__glewFramebufferTexture3DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset'
  },
  'glFramebufferTextureARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ]
    ],
    'binding_name' => 'glFramebufferTextureARB',
    'feature' => 'GL_ARB_geometry_shader4',
    'glewImpl' => '__glewFramebufferTextureARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum attachment, GLuint texture, GLint level'
  },
  'glFramebufferTextureEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ]
    ],
    'binding_name' => 'glFramebufferTextureEXT',
    'feature' => 'GL_EXT_geometry_shader4',
    'glewImpl' => '__glewFramebufferTextureEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum attachment, GLuint texture, GLint level'
  },
  'glFramebufferTextureFaceARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'face',
        'GLenum '
      ]
    ],
    'binding_name' => 'glFramebufferTextureFaceARB',
    'feature' => 'GL_ARB_geometry_shader4',
    'glewImpl' => '__glewFramebufferTextureFaceARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face'
  },
  'glFramebufferTextureFaceEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'face',
        'GLenum '
      ]
    ],
    'binding_name' => 'glFramebufferTextureFaceEXT',
    'feature' => 'GL_EXT_geometry_shader4',
    'glewImpl' => '__glewFramebufferTextureFaceEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face'
  },
  'glFramebufferTextureLayer' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'layer',
        'GLint '
      ]
    ],
    'binding_name' => 'glFramebufferTextureLayer',
    'feature' => 'GL_ARB_framebuffer_object',
    'glewImpl' => '__glewFramebufferTextureLayer',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target,GLenum attachment, GLuint texture,GLint level,GLint layer'
  },
  'glFramebufferTextureLayerARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'layer',
        'GLint '
      ]
    ],
    'binding_name' => 'glFramebufferTextureLayerARB',
    'feature' => 'GL_ARB_geometry_shader4',
    'glewImpl' => '__glewFramebufferTextureLayerARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer'
  },
  'glFramebufferTextureLayerEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'layer',
        'GLint '
      ]
    ],
    'binding_name' => 'glFramebufferTextureLayerEXT',
    'feature' => 'GL_EXT_texture_array',
    'glewImpl' => '__glewFramebufferTextureLayerEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer'
  },
  'glFramebufferTextureLayerNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'layer',
        'GLint '
      ]
    ],
    'binding_name' => 'glFramebufferTextureLayerNV',
    'feature' => 'GL_NV_texture_array',
    'glewImpl' => '__glewFramebufferTextureLayerNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer'
  },
  'glFramebufferTextureMultisampleMultiviewOVR' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'samples',
        'GLsizei '
      ],
      [
        'baseViewIndex',
        'GLint '
      ],
      [
        'numViews',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glFramebufferTextureMultisampleMultiviewOVR',
    'feature' => 'GL_OVR_multiview_multisampled_render_to_texture',
    'glewImpl' => '__glewFramebufferTextureMultisampleMultiviewOVR',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseViewIndex, GLsizei numViews'
  },
  'glFramebufferTextureMultiviewOVR' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'baseViewIndex',
        'GLint '
      ],
      [
        'numViews',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glFramebufferTextureMultiviewOVR',
    'feature' => 'GL_OVR_multiview',
    'glewImpl' => '__glewFramebufferTextureMultiviewOVR',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews'
  },
  'glFreeObjectBufferATI' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glFreeObjectBufferATI',
    'feature' => 'GL_ATI_vertex_array_object',
    'glewImpl' => '__glewFreeObjectBufferATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer'
  },
  'glFrontFace' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glFrontFace',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode'
  },
  'glFrustum' => {
    'argdata' => [
      [
        'left',
        'GLdouble '
      ],
      [
        'right',
        'GLdouble '
      ],
      [
        'bottom',
        'GLdouble '
      ],
      [
        'top',
        'GLdouble '
      ],
      [
        'zNear',
        'GLdouble '
      ],
      [
        'zFar',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glFrustum',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar'
  },
  'glFrustumf' => {
    'argdata' => [
      [
        'left',
        'GLfloat '
      ],
      [
        'right',
        'GLfloat '
      ],
      [
        'bottom',
        'GLfloat '
      ],
      [
        'top',
        'GLfloat '
      ],
      [
        'zNear',
        'GLfloat '
      ],
      [
        'zFar',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glFrustumf',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewFrustumf',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar'
  },
  'glFrustumx' => {
    'argdata' => [
      [
        'left',
        'GLfixed '
      ],
      [
        'right',
        'GLfixed '
      ],
      [
        'bottom',
        'GLfixed '
      ],
      [
        'top',
        'GLfixed '
      ],
      [
        'zNear',
        'GLfixed '
      ],
      [
        'zFar',
        'GLfixed '
      ]
    ],
    'binding_name' => 'glFrustumx',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewFrustumx',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar'
  },
  'glGenAsyncMarkersSGIX' => {
    'argdata' => [
      [
        'range',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glGenAsyncMarkersSGIX',
    'feature' => 'GL_SGIX_async',
    'glewImpl' => '__glewGenAsyncMarkersSGIX',
    'glewtype' => 'fun',
    'restype' => 'GLuint',
    'signature' => 'GLsizei range'
  },
  'glGenBuffers' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'buffers',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGenBuffers_c',
    'feature' => 'GL_VERSION_1_5',
    'glewImpl' => '__glewGenBuffers',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* buffers'
  },
  'glGenBuffersARB' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'buffers',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGenBuffersARB_c',
    'feature' => 'GL_ARB_vertex_buffer_object',
    'glewImpl' => '__glewGenBuffersARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* buffers'
  },
  'glGenFencesAPPLE' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'fences',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGenFencesAPPLE_c',
    'feature' => 'GL_APPLE_fence',
    'glewImpl' => '__glewGenFencesAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* fences'
  },
  'glGenFencesNV' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'fences',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGenFencesNV_c',
    'feature' => 'GL_NV_fence',
    'glewImpl' => '__glewGenFencesNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* fences'
  },
  'glGenFragmentShadersATI' => {
    'argdata' => [
      [
        'range',
        'GLuint '
      ]
    ],
    'binding_name' => 'glGenFragmentShadersATI',
    'feature' => 'GL_ATI_fragment_shader',
    'glewImpl' => '__glewGenFragmentShadersATI',
    'glewtype' => 'fun',
    'restype' => 'GLuint',
    'signature' => 'GLuint range'
  },
  'glGenFramebuffers' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'framebuffers',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGenFramebuffers_c',
    'feature' => 'GL_ARB_framebuffer_object',
    'glewImpl' => '__glewGenFramebuffers',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* framebuffers'
  },
  'glGenFramebuffersEXT' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'framebuffers',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGenFramebuffersEXT_c',
    'feature' => 'GL_EXT_framebuffer_object',
    'glewImpl' => '__glewGenFramebuffersEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* framebuffers'
  },
  'glGenLists' => {
    'argdata' => [
      [
        'range',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glGenLists',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'GLuint',
    'signature' => 'GLsizei range'
  },
  'glGenMPEGPredictorsSGIX' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'predictors',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGenMPEGPredictorsSGIX_c',
    'feature' => 'GL_SGIX_mpeg1',
    'glewImpl' => '__glewGenMPEGPredictorsSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* predictors'
  },
  'glGenNamesAMD' => {
    'argdata' => [
      [
        'identifier',
        'GLenum '
      ],
      [
        'num',
        'GLuint '
      ],
      [
        'names',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGenNamesAMD_c',
    'feature' => 'GL_AMD_name_gen_delete',
    'glewImpl' => '__glewGenNamesAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum identifier, GLuint num, GLuint* names'
  },
  'glGenOcclusionQueriesNV' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'ids',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGenOcclusionQueriesNV_c',
    'feature' => 'GL_NV_occlusion_query',
    'glewImpl' => '__glewGenOcclusionQueriesNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* ids'
  },
  'glGenPathsNV' => {
    'argdata' => [
      [
        'range',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glGenPathsNV',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewGenPathsNV',
    'glewtype' => 'fun',
    'restype' => 'GLuint',
    'signature' => 'GLsizei range'
  },
  'glGenPerfMonitorsAMD' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'monitors',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGenPerfMonitorsAMD_c',
    'feature' => 'GL_AMD_performance_monitor',
    'glewImpl' => '__glewGenPerfMonitorsAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* monitors'
  },
  'glGenProgramPipelines' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'pipelines',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGenProgramPipelines_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewGenProgramPipelines',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* pipelines'
  },
  'glGenProgramsARB' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'programs',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGenProgramsARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewGenProgramsARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* programs'
  },
  'glGenProgramsNV' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'ids',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGenProgramsNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewGenProgramsNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* ids'
  },
  'glGenQueries' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'ids',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGenQueries_c',
    'feature' => 'GL_VERSION_1_5',
    'glewImpl' => '__glewGenQueries',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* ids'
  },
  'glGenQueriesANGLE' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'ids',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGenQueriesANGLE_c',
    'feature' => 'GL_ANGLE_timer_query',
    'glewImpl' => '__glewGenQueriesANGLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* ids'
  },
  'glGenQueriesARB' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'ids',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGenQueriesARB_c',
    'feature' => 'GL_ARB_occlusion_query',
    'glewImpl' => '__glewGenQueriesARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* ids'
  },
  'glGenRenderbuffers' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'renderbuffers',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGenRenderbuffers_c',
    'feature' => 'GL_ARB_framebuffer_object',
    'glewImpl' => '__glewGenRenderbuffers',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* renderbuffers'
  },
  'glGenRenderbuffersEXT' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'renderbuffers',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGenRenderbuffersEXT_c',
    'feature' => 'GL_EXT_framebuffer_object',
    'glewImpl' => '__glewGenRenderbuffersEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* renderbuffers'
  },
  'glGenSamplers' => {
    'argdata' => [
      [
        'count',
        'GLsizei '
      ],
      [
        'samplers',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGenSamplers_c',
    'feature' => 'GL_ARB_sampler_objects',
    'glewImpl' => '__glewGenSamplers',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei count, GLuint* samplers'
  },
  'glGenSemaphoresEXT' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'semaphores',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGenSemaphoresEXT_c',
    'feature' => 'GL_EXT_semaphore',
    'glewImpl' => '__glewGenSemaphoresEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* semaphores'
  },
  'glGenSymbolsEXT' => {
    'argdata' => [
      [
        'dataType',
        'GLenum '
      ],
      [
        'storageType',
        'GLenum '
      ],
      [
        'range',
        'GLenum '
      ],
      [
        'components',
        'GLuint '
      ]
    ],
    'binding_name' => 'glGenSymbolsEXT',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewGenSymbolsEXT',
    'glewtype' => 'fun',
    'restype' => 'GLuint',
    'signature' => 'GLenum dataType, GLenum storageType, GLenum range, GLuint components'
  },
  'glGenTextures' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'textures',
        'GLuint *'
      ]
    ],
    'binding_name' => 'glGenTextures_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint *textures'
  },
  'glGenTexturesEXT' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'textures',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGenTexturesEXT_c',
    'feature' => 'GL_EXT_texture_object',
    'glewImpl' => '__glewGenTexturesEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* textures'
  },
  'glGenTransformFeedbacks' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'ids',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGenTransformFeedbacks_c',
    'feature' => 'GL_ARB_transform_feedback2',
    'glewImpl' => '__glewGenTransformFeedbacks',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* ids'
  },
  'glGenTransformFeedbacksNV' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'ids',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGenTransformFeedbacksNV_c',
    'feature' => 'GL_NV_transform_feedback2',
    'glewImpl' => '__glewGenTransformFeedbacksNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* ids'
  },
  'glGenVertexArrays' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'arrays',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGenVertexArrays_c',
    'feature' => 'GL_ARB_vertex_array_object',
    'glewImpl' => '__glewGenVertexArrays',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* arrays'
  },
  'glGenVertexArraysAPPLE' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'arrays',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glGenVertexArraysAPPLE_c',
    'feature' => 'GL_APPLE_vertex_array_object',
    'glewImpl' => '__glewGenVertexArraysAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* arrays'
  },
  'glGenVertexArraysSGIX' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'arrays',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGenVertexArraysSGIX_c',
    'feature' => 'GL_SGIX_vertex_array_object',
    'glewImpl' => '__glewGenVertexArraysSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* arrays'
  },
  'glGenVertexShadersEXT' => {
    'argdata' => [
      [
        'range',
        'GLuint '
      ]
    ],
    'binding_name' => 'glGenVertexShadersEXT',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewGenVertexShadersEXT',
    'glewtype' => 'fun',
    'restype' => 'GLuint',
    'signature' => 'GLuint range'
  },
  'glGenerateMipmap' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glGenerateMipmap',
    'feature' => 'GL_ARB_framebuffer_object',
    'glewImpl' => '__glewGenerateMipmap',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target'
  },
  'glGenerateMipmapEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glGenerateMipmapEXT',
    'feature' => 'GL_EXT_framebuffer_object',
    'glewImpl' => '__glewGenerateMipmapEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target'
  },
  'glGenerateMultiTexMipmapEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glGenerateMultiTexMipmapEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGenerateMultiTexMipmapEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target'
  },
  'glGenerateTextureMipmap' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ]
    ],
    'binding_name' => 'glGenerateTextureMipmap',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGenerateTextureMipmap',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture'
  },
  'glGenerateTextureMipmapEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glGenerateTextureMipmapEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGenerateTextureMipmapEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target'
  },
  'glGetActiveAtomicCounterBufferiv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'bufferIndex',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetActiveAtomicCounterBufferiv_c',
    'feature' => 'GL_ARB_shader_atomic_counters',
    'glewImpl' => '__glewGetActiveAtomicCounterBufferiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLuint bufferIndex, GLenum pname, GLint* params'
  },
  'glGetActiveAttrib' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'maxLength',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'size',
        'GLint* '
      ],
      [
        'type',
        'GLenum* '
      ],
      [
        'name',
        'GLchar* '
      ]
    ],
    'binding_name' => 'glGetActiveAttrib_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewGetActiveAttrib',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLchar* name'
  },
  'glGetActiveAttribARB' => {
    'argdata' => [
      [
        'programObj',
        'GLhandleARB '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'maxLength',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'size',
        'GLint *'
      ],
      [
        'type',
        'GLenum *'
      ],
      [
        'name',
        'GLcharARB *'
      ]
    ],
    'binding_name' => 'glGetActiveAttribARB_c',
    'feature' => 'GL_ARB_vertex_shader',
    'glewImpl' => '__glewGetActiveAttribARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint *size, GLenum *type, GLcharARB *name'
  },
  'glGetActiveSubroutineName' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'shadertype',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'bufsize',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'name',
        'GLchar *'
      ]
    ],
    'binding_name' => 'glGetActiveSubroutineName_c',
    'feature' => 'GL_ARB_shader_subroutine',
    'glewImpl' => '__glewGetActiveSubroutineName',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar *name'
  },
  'glGetActiveSubroutineUniformName' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'shadertype',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'bufsize',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'name',
        'GLchar *'
      ]
    ],
    'binding_name' => 'glGetActiveSubroutineUniformName_c',
    'feature' => 'GL_ARB_shader_subroutine',
    'glewImpl' => '__glewGetActiveSubroutineUniformName',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar *name'
  },
  'glGetActiveSubroutineUniformiv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'shadertype',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'values',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetActiveSubroutineUniformiv_c',
    'feature' => 'GL_ARB_shader_subroutine',
    'glewImpl' => '__glewGetActiveSubroutineUniformiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint* values'
  },
  'glGetActiveUniform' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'maxLength',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'size',
        'GLint* '
      ],
      [
        'type',
        'GLenum* '
      ],
      [
        'name',
        'GLchar* '
      ]
    ],
    'binding_name' => 'glGetActiveUniform_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewGetActiveUniform',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLchar* name'
  },
  'glGetActiveUniformARB' => {
    'argdata' => [
      [
        'programObj',
        'GLhandleARB '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'maxLength',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'size',
        'GLint *'
      ],
      [
        'type',
        'GLenum *'
      ],
      [
        'name',
        'GLcharARB *'
      ]
    ],
    'binding_name' => 'glGetActiveUniformARB_c',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewGetActiveUniformARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint *size, GLenum *type, GLcharARB *name'
  },
  'glGetActiveUniformBlockName' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'uniformBlockIndex',
        'GLuint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'uniformBlockName',
        'GLchar* '
      ]
    ],
    'binding_name' => 'glGetActiveUniformBlockName_c',
    'feature' => 'GL_ARB_uniform_buffer_object',
    'glewImpl' => '__glewGetActiveUniformBlockName',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName'
  },
  'glGetActiveUniformBlockiv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'uniformBlockIndex',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetActiveUniformBlockiv_c',
    'feature' => 'GL_ARB_uniform_buffer_object',
    'glewImpl' => '__glewGetActiveUniformBlockiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params'
  },
  'glGetActiveUniformName' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'uniformIndex',
        'GLuint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'uniformName',
        'GLchar* '
      ]
    ],
    'binding_name' => 'glGetActiveUniformName_c',
    'feature' => 'GL_ARB_uniform_buffer_object',
    'glewImpl' => '__glewGetActiveUniformName',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformName'
  },
  'glGetActiveUniformsiv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'uniformCount',
        'GLsizei '
      ],
      [
        'uniformIndices',
        'const GLuint* '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetActiveUniformsiv_c',
    'feature' => 'GL_ARB_uniform_buffer_object',
    'glewImpl' => '__glewGetActiveUniformsiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLsizei uniformCount, const GLuint* uniformIndices, GLenum pname, GLint* params'
  },
  'glGetActiveVaryingNV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei *'
      ],
      [
        'size',
        'GLsizei *'
      ],
      [
        'type',
        'GLenum *'
      ],
      [
        'name',
        'GLchar *'
      ]
    ],
    'binding_name' => 'glGetActiveVaryingNV_c',
    'feature' => 'GL_NV_transform_feedback',
    'glewImpl' => '__glewGetActiveVaryingNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name'
  },
  'glGetArrayObjectfvATI' => {
    'argdata' => [
      [
        'array',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetArrayObjectfvATI_c',
    'feature' => 'GL_ATI_vertex_array_object',
    'glewImpl' => '__glewGetArrayObjectfvATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum array, GLenum pname, GLfloat* params'
  },
  'glGetArrayObjectivATI' => {
    'argdata' => [
      [
        'array',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetArrayObjectivATI_c',
    'feature' => 'GL_ATI_vertex_array_object',
    'glewImpl' => '__glewGetArrayObjectivATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum array, GLenum pname, GLint* params'
  },
  'glGetAttachedObjectsARB' => {
    'argdata' => [
      [
        'containerObj',
        'GLhandleARB '
      ],
      [
        'maxCount',
        'GLsizei '
      ],
      [
        'count',
        'GLsizei* '
      ],
      [
        'obj',
        'GLhandleARB *'
      ]
    ],
    'binding_name' => 'glGetAttachedObjectsARB_c',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewGetAttachedObjectsARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhandleARB containerObj, GLsizei maxCount, GLsizei* count, GLhandleARB *obj'
  },
  'glGetAttachedShaders' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'maxCount',
        'GLsizei '
      ],
      [
        'count',
        'GLsizei* '
      ],
      [
        'shaders',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGetAttachedShaders_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewGetAttachedShaders',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders'
  },
  'glGetAttribLocation' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'name',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glGetAttribLocation_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewGetAttribLocation',
    'glewtype' => 'fun',
    'restype' => 'GLint',
    'signature' => 'GLuint program, const GLchar* name'
  },
  'glGetAttribLocationARB' => {
    'argdata' => [
      [
        'programObj',
        'GLhandleARB '
      ],
      [
        'name',
        'const GLcharARB* '
      ]
    ],
    'binding_name' => 'glGetAttribLocationARB_c',
    'feature' => 'GL_ARB_vertex_shader',
    'glewImpl' => '__glewGetAttribLocationARB',
    'glewtype' => 'fun',
    'restype' => 'GLint',
    'signature' => 'GLhandleARB programObj, const GLcharARB* name'
  },
  'glGetBooleanIndexedvEXT' => {
    'argdata' => [
      [
        'value',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'data',
        'GLboolean* '
      ]
    ],
    'binding_name' => 'glGetBooleanIndexedvEXT_c',
    'feature' => 'GL_EXT_draw_buffers2',
    'glewImpl' => '__glewGetBooleanIndexedvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum value, GLuint index, GLboolean* data'
  },
  'glGetBooleani_v' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'data',
        'GLboolean* '
      ]
    ],
    'binding_name' => 'glGetBooleani_v_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewGetBooleani_v',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLuint index, GLboolean* data'
  },
  'glGetBooleanv' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLboolean *'
      ]
    ],
    'binding_name' => 'glGetBooleanv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLboolean *params'
  },
  'glGetBufferParameteri64v' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'value',
        'GLenum '
      ],
      [
        'data',
        'GLint64 * '
      ]
    ],
    'binding_name' => 'glGetBufferParameteri64v_c',
    'feature' => 'GL_VERSION_3_2',
    'glewImpl' => '__glewGetBufferParameteri64v',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum value, GLint64 * data'
  },
  'glGetBufferParameteriv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetBufferParameteriv_c',
    'feature' => 'GL_VERSION_1_5',
    'glewImpl' => '__glewGetBufferParameteriv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint* params'
  },
  'glGetBufferParameterivARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetBufferParameterivARB_c',
    'feature' => 'GL_ARB_vertex_buffer_object',
    'glewImpl' => '__glewGetBufferParameterivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint* params'
  },
  'glGetBufferParameterui64vNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLuint64EXT* '
      ]
    ],
    'binding_name' => 'glGetBufferParameterui64vNV_c',
    'feature' => 'GL_NV_shader_buffer_load',
    'glewImpl' => '__glewGetBufferParameterui64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLuint64EXT* params'
  },
  'glGetBufferPointerv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'void** '
      ]
    ],
    'binding_name' => 'glGetBufferPointerv_c',
    'feature' => 'GL_VERSION_1_5',
    'glewImpl' => '__glewGetBufferPointerv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, void** params'
  },
  'glGetBufferPointervARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'void** '
      ]
    ],
    'binding_name' => 'glGetBufferPointervARB_c',
    'feature' => 'GL_ARB_vertex_buffer_object',
    'glewImpl' => '__glewGetBufferPointervARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, void** params'
  },
  'glGetBufferSubData' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ],
      [
        'data',
        'void* '
      ]
    ],
    'binding_name' => 'glGetBufferSubData_c',
    'feature' => 'GL_VERSION_1_5',
    'glewImpl' => '__glewGetBufferSubData',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLintptr offset, GLsizeiptr size, void* data'
  },
  'glGetBufferSubDataARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'offset',
        'GLintptrARB '
      ],
      [
        'size',
        'GLsizeiptrARB '
      ],
      [
        'data',
        'void *'
      ]
    ],
    'binding_name' => 'glGetBufferSubDataARB_c',
    'feature' => 'GL_ARB_vertex_buffer_object',
    'glewImpl' => '__glewGetBufferSubDataARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data'
  },
  'glGetClipPlane' => {
    'argdata' => [
      [
        'plane',
        'GLenum '
      ],
      [
        'equation',
        'GLdouble *'
      ]
    ],
    'binding_name' => 'glGetClipPlane_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum plane, GLdouble *equation'
  },
  'glGetClipPlanef' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'eqn',
        'GLfloat * '
      ]
    ],
    'binding_name' => 'glGetClipPlanef_c',
    'feature' => 'GL_REGAL_ES1_1_compatibility',
    'glewImpl' => '__glewGetClipPlanef',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfloat eqn[4]'
  },
  'glGetClipPlanex' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'eqn',
        'GLfixed * '
      ]
    ],
    'binding_name' => 'glGetClipPlanex_c',
    'feature' => 'GL_REGAL_ES1_1_compatibility',
    'glewImpl' => '__glewGetClipPlanex',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfixed eqn[4]'
  },
  'glGetColorTable' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'table',
        'void *'
      ]
    ],
    'binding_name' => 'glGetColorTable_c',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewGetColorTable',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum format, GLenum type, void *table'
  },
  'glGetColorTableEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'data',
        'void *'
      ]
    ],
    'binding_name' => 'glGetColorTableEXT_c',
    'feature' => 'GL_EXT_paletted_texture',
    'glewImpl' => '__glewGetColorTableEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum format, GLenum type, void *data'
  },
  'glGetColorTableParameterfv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glGetColorTableParameterfv_c',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewGetColorTableParameterfv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLfloat *params'
  },
  'glGetColorTableParameterfvEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetColorTableParameterfvEXT_c',
    'feature' => 'GL_EXT_paletted_texture',
    'glewImpl' => '__glewGetColorTableParameterfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLfloat* params'
  },
  'glGetColorTableParameterfvSGI' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetColorTableParameterfvSGI_c',
    'feature' => 'GL_SGI_color_table',
    'glewImpl' => '__glewGetColorTableParameterfvSGI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLfloat* params'
  },
  'glGetColorTableParameteriv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint *'
      ]
    ],
    'binding_name' => 'glGetColorTableParameteriv_c',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewGetColorTableParameteriv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint *params'
  },
  'glGetColorTableParameterivEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetColorTableParameterivEXT_c',
    'feature' => 'GL_EXT_paletted_texture',
    'glewImpl' => '__glewGetColorTableParameterivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint* params'
  },
  'glGetColorTableParameterivSGI' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetColorTableParameterivSGI_c',
    'feature' => 'GL_SGI_color_table',
    'glewImpl' => '__glewGetColorTableParameterivSGI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint* params'
  },
  'glGetColorTableSGI' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'table',
        'void *'
      ]
    ],
    'binding_name' => 'glGetColorTableSGI_c',
    'feature' => 'GL_SGI_color_table',
    'glewImpl' => '__glewGetColorTableSGI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum format, GLenum type, void *table'
  },
  'glGetCombinerInputParameterfvNV' => {
    'argdata' => [
      [
        'stage',
        'GLenum '
      ],
      [
        'portion',
        'GLenum '
      ],
      [
        'variable',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetCombinerInputParameterfvNV_c',
    'feature' => 'GL_NV_register_combiners',
    'glewImpl' => '__glewGetCombinerInputParameterfvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat* params'
  },
  'glGetCombinerInputParameterivNV' => {
    'argdata' => [
      [
        'stage',
        'GLenum '
      ],
      [
        'portion',
        'GLenum '
      ],
      [
        'variable',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetCombinerInputParameterivNV_c',
    'feature' => 'GL_NV_register_combiners',
    'glewImpl' => '__glewGetCombinerInputParameterivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint* params'
  },
  'glGetCombinerOutputParameterfvNV' => {
    'argdata' => [
      [
        'stage',
        'GLenum '
      ],
      [
        'portion',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetCombinerOutputParameterfvNV_c',
    'feature' => 'GL_NV_register_combiners',
    'glewImpl' => '__glewGetCombinerOutputParameterfvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stage, GLenum portion, GLenum pname, GLfloat* params'
  },
  'glGetCombinerOutputParameterivNV' => {
    'argdata' => [
      [
        'stage',
        'GLenum '
      ],
      [
        'portion',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetCombinerOutputParameterivNV_c',
    'feature' => 'GL_NV_register_combiners',
    'glewImpl' => '__glewGetCombinerOutputParameterivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stage, GLenum portion, GLenum pname, GLint* params'
  },
  'glGetCombinerStageParameterfvNV' => {
    'argdata' => [
      [
        'stage',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetCombinerStageParameterfvNV_c',
    'feature' => 'GL_NV_register_combiners2',
    'glewImpl' => '__glewGetCombinerStageParameterfvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stage, GLenum pname, GLfloat* params'
  },
  'glGetCommandHeaderNV' => {
    'argdata' => [
      [
        'tokenID',
        'GLenum '
      ],
      [
        'size',
        'GLuint '
      ]
    ],
    'binding_name' => 'glGetCommandHeaderNV',
    'feature' => 'GL_NV_command_list',
    'glewImpl' => '__glewGetCommandHeaderNV',
    'glewtype' => 'fun',
    'restype' => 'GLuint',
    'signature' => 'GLenum tokenID, GLuint size'
  },
  'glGetCompressedMultiTexImageEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'img',
        'void *'
      ]
    ],
    'binding_name' => 'glGetCompressedMultiTexImageEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetCompressedMultiTexImageEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLint level, void *img'
  },
  'glGetCompressedTexImage' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'lod',
        'GLint '
      ],
      [
        'img',
        'void *'
      ]
    ],
    'binding_name' => 'glGetCompressedTexImage_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewGetCompressedTexImage',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint lod, void *img'
  },
  'glGetCompressedTexImageARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'lod',
        'GLint '
      ],
      [
        'img',
        'void *'
      ]
    ],
    'binding_name' => 'glGetCompressedTexImageARB_c',
    'feature' => 'GL_ARB_texture_compression',
    'glewImpl' => '__glewGetCompressedTexImageARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint lod, void *img'
  },
  'glGetCompressedTextureImage' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'pixels',
        'void *'
      ]
    ],
    'binding_name' => 'glGetCompressedTextureImage_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGetCompressedTextureImage',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLint level, GLsizei bufSize, void *pixels'
  },
  'glGetCompressedTextureImageEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'img',
        'void *'
      ]
    ],
    'binding_name' => 'glGetCompressedTextureImageEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetCompressedTextureImageEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLint level, void *img'
  },
  'glGetCompressedTextureSubImage' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'pixels',
        'void *'
      ]
    ],
    'binding_name' => 'glGetCompressedTextureSubImage_c',
    'feature' => 'GL_ARB_get_texture_sub_image',
    'glewImpl' => '__glewGetCompressedTextureSubImage',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels'
  },
  'glGetConvolutionFilter' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'image',
        'void *'
      ]
    ],
    'binding_name' => 'glGetConvolutionFilter_c',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewGetConvolutionFilter',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum format, GLenum type, void *image'
  },
  'glGetConvolutionFilterEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'image',
        'void *'
      ]
    ],
    'binding_name' => 'glGetConvolutionFilterEXT_c',
    'feature' => 'GL_EXT_convolution',
    'glewImpl' => '__glewGetConvolutionFilterEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum format, GLenum type, void *image'
  },
  'glGetConvolutionParameterfv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glGetConvolutionParameterfv_c',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewGetConvolutionParameterfv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLfloat *params'
  },
  'glGetConvolutionParameterfvEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetConvolutionParameterfvEXT_c',
    'feature' => 'GL_EXT_convolution',
    'glewImpl' => '__glewGetConvolutionParameterfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLfloat* params'
  },
  'glGetConvolutionParameteriv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint *'
      ]
    ],
    'binding_name' => 'glGetConvolutionParameteriv_c',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewGetConvolutionParameteriv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint *params'
  },
  'glGetConvolutionParameterivEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetConvolutionParameterivEXT_c',
    'feature' => 'GL_EXT_convolution',
    'glewImpl' => '__glewGetConvolutionParameterivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint* params'
  },
  'glGetCoverageModulationTableNV' => {
    'argdata' => [
      [
        'bufsize',
        'GLsizei '
      ],
      [
        'v',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetCoverageModulationTableNV_c',
    'feature' => 'GL_EXT_raster_multisample',
    'glewImpl' => '__glewGetCoverageModulationTableNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei bufsize, GLfloat* v'
  },
  'glGetDebugMessageLog' => {
    'argdata' => [
      [
        'count',
        'GLuint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'sources',
        'GLenum* '
      ],
      [
        'types',
        'GLenum* '
      ],
      [
        'ids',
        'GLuint* '
      ],
      [
        'severities',
        'GLenum* '
      ],
      [
        'lengths',
        'GLsizei* '
      ],
      [
        'messageLog',
        'GLchar* '
      ]
    ],
    'binding_name' => 'glGetDebugMessageLog_c',
    'feature' => 'GL_KHR_debug',
    'glewImpl' => '__glewGetDebugMessageLog',
    'glewtype' => 'fun',
    'restype' => 'GLuint',
    'signature' => 'GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog'
  },
  'glGetDebugMessageLogAMD' => {
    'argdata' => [
      [
        'count',
        'GLuint '
      ],
      [
        'bufsize',
        'GLsizei '
      ],
      [
        'categories',
        'GLenum* '
      ],
      [
        'severities',
        'GLuint* '
      ],
      [
        'ids',
        'GLuint* '
      ],
      [
        'lengths',
        'GLsizei* '
      ],
      [
        'message',
        'GLchar* '
      ]
    ],
    'binding_name' => 'glGetDebugMessageLogAMD_c',
    'feature' => 'GL_AMD_debug_output',
    'glewImpl' => '__glewGetDebugMessageLogAMD',
    'glewtype' => 'fun',
    'restype' => 'GLuint',
    'signature' => 'GLuint count, GLsizei bufsize, GLenum* categories, GLuint* severities, GLuint* ids, GLsizei* lengths, GLchar* message'
  },
  'glGetDebugMessageLogARB' => {
    'argdata' => [
      [
        'count',
        'GLuint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'sources',
        'GLenum* '
      ],
      [
        'types',
        'GLenum* '
      ],
      [
        'ids',
        'GLuint* '
      ],
      [
        'severities',
        'GLenum* '
      ],
      [
        'lengths',
        'GLsizei* '
      ],
      [
        'messageLog',
        'GLchar* '
      ]
    ],
    'binding_name' => 'glGetDebugMessageLogARB_c',
    'feature' => 'GL_ARB_debug_output',
    'glewImpl' => '__glewGetDebugMessageLogARB',
    'glewtype' => 'fun',
    'restype' => 'GLuint',
    'signature' => 'GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog'
  },
  'glGetDetailTexFuncSGIS' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'points',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetDetailTexFuncSGIS_c',
    'feature' => 'GL_SGIS_detail_texture',
    'glewImpl' => '__glewGetDetailTexFuncSGIS',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLfloat* points'
  },
  'glGetDoubleIndexedvEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'GLdouble* '
      ]
    ],
    'binding_name' => 'glGetDoubleIndexedvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetDoubleIndexedvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLdouble* params'
  },
  'glGetDoublei_v' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'data',
        'GLdouble* '
      ]
    ],
    'binding_name' => 'glGetDoublei_v_c',
    'feature' => 'GL_ARB_viewport_array',
    'glewImpl' => '__glewGetDoublei_v',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLdouble* data'
  },
  'glGetDoublei_vEXT' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'GLdouble* '
      ]
    ],
    'binding_name' => 'glGetDoublei_vEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetDoublei_vEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLuint index, GLdouble* params'
  },
  'glGetDoublev' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLdouble *'
      ]
    ],
    'binding_name' => 'glGetDoublev_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLdouble *params'
  },
  'glGetDriverControlStringQCOM' => {
    'argdata' => [
      [
        'driverControl',
        'GLuint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'driverControlString',
        'GLchar *'
      ]
    ],
    'binding_name' => 'glGetDriverControlStringQCOM_c',
    'feature' => 'GL_QCOM_driver_control',
    'glewImpl' => '__glewGetDriverControlStringQCOM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint driverControl, GLsizei bufSize, GLsizei* length, GLchar *driverControlString'
  },
  'glGetDriverControlsQCOM' => {
    'argdata' => [
      [
        'num',
        'GLint* '
      ],
      [
        'size',
        'GLsizei '
      ],
      [
        'driverControls',
        'GLuint *'
      ]
    ],
    'binding_name' => 'glGetDriverControlsQCOM_c',
    'feature' => 'GL_QCOM_driver_control',
    'glewImpl' => '__glewGetDriverControlsQCOM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint* num, GLsizei size, GLuint *driverControls'
  },
  'glGetError' => {
    'binding_name' => 'glGetError',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'GLenum',
    'signature' => 'void'
  },
  'glGetExtensionREGAL' => {
    'argdata' => [
      [
        'ext',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glGetExtensionREGAL_c',
    'feature' => 'GL_REGAL_extension_query',
    'glewImpl' => '__glewGetExtensionREGAL',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'const GLchar* ext'
  },
  'glGetFenceivNV' => {
    'argdata' => [
      [
        'fence',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetFenceivNV_c',
    'feature' => 'GL_NV_fence',
    'glewImpl' => '__glewGetFenceivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint fence, GLenum pname, GLint* params'
  },
  'glGetFinalCombinerInputParameterfvNV' => {
    'argdata' => [
      [
        'variable',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetFinalCombinerInputParameterfvNV_c',
    'feature' => 'GL_NV_register_combiners',
    'glewImpl' => '__glewGetFinalCombinerInputParameterfvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum variable, GLenum pname, GLfloat* params'
  },
  'glGetFinalCombinerInputParameterivNV' => {
    'argdata' => [
      [
        'variable',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetFinalCombinerInputParameterivNV_c',
    'feature' => 'GL_NV_register_combiners',
    'glewImpl' => '__glewGetFinalCombinerInputParameterivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum variable, GLenum pname, GLint* params'
  },
  'glGetFirstPerfQueryIdINTEL' => {
    'argdata' => [
      [
        'queryId',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGetFirstPerfQueryIdINTEL_c',
    'feature' => 'GL_INTEL_performance_query',
    'glewImpl' => '__glewGetFirstPerfQueryIdINTEL',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint* queryId'
  },
  'glGetFixedv' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfixed* '
      ]
    ],
    'binding_name' => 'glGetFixedv_c',
    'feature' => 'GL_REGAL_ES1_1_compatibility',
    'glewImpl' => '__glewGetFixedv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfixed* params'
  },
  'glGetFloatIndexedvEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetFloatIndexedvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetFloatIndexedvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLfloat* params'
  },
  'glGetFloati_v' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'data',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetFloati_v_c',
    'feature' => 'GL_ARB_viewport_array',
    'glewImpl' => '__glewGetFloati_v',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLfloat* data'
  },
  'glGetFloati_vEXT' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetFloati_vEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetFloati_vEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLuint index, GLfloat* params'
  },
  'glGetFloati_vNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'data',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetFloati_vNV_c',
    'feature' => 'GL_NV_viewport_array',
    'glewImpl' => '__glewGetFloati_vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLfloat* data'
  },
  'glGetFloatv' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glGetFloatv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfloat *params'
  },
  'glGetFogFuncSGIS' => {
    'argdata' => [
      [
        'points',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetFogFuncSGIS_c',
    'feature' => 'GL_SGIS_fog_function',
    'glewImpl' => '__glewGetFogFuncSGIS',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat* points'
  },
  'glGetFogLayersSGIX' => {
    'argdata' => [
      [
        'points',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetFogLayersSGIX_c',
    'feature' => 'GL_SGIX_fog_layers',
    'glewImpl' => '__glewGetFogLayersSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat* points'
  },
  'glGetFragDataIndex' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'name',
        'const GLchar * '
      ]
    ],
    'binding_name' => 'glGetFragDataIndex_c',
    'feature' => 'GL_ARB_blend_func_extended',
    'glewImpl' => '__glewGetFragDataIndex',
    'glewtype' => 'fun',
    'restype' => 'GLint',
    'signature' => 'GLuint program, const GLchar * name'
  },
  'glGetFragDataIndexEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'name',
        'const GLchar * '
      ]
    ],
    'binding_name' => 'glGetFragDataIndexEXT_c',
    'feature' => 'GL_EXT_blend_func_extended',
    'glewImpl' => '__glewGetFragDataIndexEXT',
    'glewtype' => 'fun',
    'restype' => 'GLint',
    'signature' => 'GLuint program, const GLchar * name'
  },
  'glGetFragDataLocation' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'name',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glGetFragDataLocation_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewGetFragDataLocation',
    'glewtype' => 'fun',
    'restype' => 'GLint',
    'signature' => 'GLuint program, const GLchar* name'
  },
  'glGetFragDataLocationEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'name',
        'const GLchar *'
      ]
    ],
    'binding_name' => 'glGetFragDataLocationEXT_c',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewGetFragDataLocationEXT',
    'glewtype' => 'fun',
    'restype' => 'GLint',
    'signature' => 'GLuint program, const GLchar *name'
  },
  'glGetFragmentLightfvEXT' => {
    'argdata' => [
      [
        'light',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetFragmentLightfvEXT_c',
    'feature' => 'GL_EXT_fragment_lighting',
    'glewImpl' => '__glewGetFragmentLightfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum light, GLenum pname, GLfloat* params'
  },
  'glGetFragmentLightfvSGIX' => {
    'argdata' => [
      [
        'light',
        'GLenum '
      ],
      [
        'value',
        'GLenum '
      ],
      [
        'data',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetFragmentLightfvSGIX_c',
    'feature' => 'GL_SGIX_fragment_specular_lighting',
    'glewImpl' => '__glewGetFragmentLightfvSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum light, GLenum value, GLfloat* data'
  },
  'glGetFragmentLightivEXT' => {
    'argdata' => [
      [
        'light',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetFragmentLightivEXT_c',
    'feature' => 'GL_EXT_fragment_lighting',
    'glewImpl' => '__glewGetFragmentLightivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum light, GLenum pname, GLint* params'
  },
  'glGetFragmentLightivSGIX' => {
    'argdata' => [
      [
        'light',
        'GLenum '
      ],
      [
        'value',
        'GLenum '
      ],
      [
        'data',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetFragmentLightivSGIX_c',
    'feature' => 'GL_SGIX_fragment_specular_lighting',
    'glewImpl' => '__glewGetFragmentLightivSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum light, GLenum value, GLint* data'
  },
  'glGetFragmentMaterialfvEXT' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glGetFragmentMaterialfvEXT_c',
    'feature' => 'GL_EXT_fragment_lighting',
    'glewImpl' => '__glewGetFragmentMaterialfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum pname, const GLfloat* params'
  },
  'glGetFragmentMaterialfvSGIX' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'data',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glGetFragmentMaterialfvSGIX_c',
    'feature' => 'GL_SGIX_fragment_specular_lighting',
    'glewImpl' => '__glewGetFragmentMaterialfvSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum pname, const GLfloat* data'
  },
  'glGetFragmentMaterialivEXT' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glGetFragmentMaterialivEXT_c',
    'feature' => 'GL_EXT_fragment_lighting',
    'glewImpl' => '__glewGetFragmentMaterialivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum pname, const GLint* params'
  },
  'glGetFragmentMaterialivSGIX' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'data',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glGetFragmentMaterialivSGIX_c',
    'feature' => 'GL_SGIX_fragment_specular_lighting',
    'glewImpl' => '__glewGetFragmentMaterialivSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum pname, const GLint* data'
  },
  'glGetFramebufferAttachmentParameteriv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetFramebufferAttachmentParameteriv_c',
    'feature' => 'GL_ARB_framebuffer_object',
    'glewImpl' => '__glewGetFramebufferAttachmentParameteriv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum attachment, GLenum pname, GLint* params'
  },
  'glGetFramebufferAttachmentParameterivEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetFramebufferAttachmentParameterivEXT_c',
    'feature' => 'GL_EXT_framebuffer_object',
    'glewImpl' => '__glewGetFramebufferAttachmentParameterivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum attachment, GLenum pname, GLint* params'
  },
  'glGetFramebufferParameterfvAMD' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'numsamples',
        'GLuint '
      ],
      [
        'pixelindex',
        'GLuint '
      ],
      [
        'size',
        'GLsizei '
      ],
      [
        'values',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetFramebufferParameterfvAMD_c',
    'feature' => 'GL_AMD_framebuffer_sample_positions',
    'glewImpl' => '__glewGetFramebufferParameterfvAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat* values'
  },
  'glGetFramebufferParameteriv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetFramebufferParameteriv_c',
    'feature' => 'GL_ARB_framebuffer_no_attachments',
    'glewImpl' => '__glewGetFramebufferParameteriv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint* params'
  },
  'glGetFramebufferParameterivEXT' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetFramebufferParameterivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetFramebufferParameterivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum pname, GLint* param'
  },
  'glGetFramebufferPixelLocalStorageSizeEXT' => {
    'argdata' => [
      [
        'target',
        'GLuint '
      ]
    ],
    'binding_name' => 'glGetFramebufferPixelLocalStorageSizeEXT',
    'feature' => 'GL_EXT_shader_pixel_local_storage2',
    'glewImpl' => '__glewGetFramebufferPixelLocalStorageSizeEXT',
    'glewtype' => 'fun',
    'restype' => 'GLsizei',
    'signature' => 'GLuint target'
  },
  'glGetGraphicsResetStatus' => {
    'binding_name' => 'glGetGraphicsResetStatus',
    'feature' => 'GL_VERSION_4_5',
    'glewImpl' => '__glewGetGraphicsResetStatus',
    'glewtype' => 'fun',
    'restype' => 'GLenum',
    'signature' => 'void'
  },
  'glGetGraphicsResetStatusARB' => {
    'binding_name' => 'glGetGraphicsResetStatusARB',
    'feature' => 'GL_ARB_robustness',
    'glewImpl' => '__glewGetGraphicsResetStatusARB',
    'glewtype' => 'fun',
    'restype' => 'GLenum',
    'signature' => 'void'
  },
  'glGetHandleARB' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ]
    ],
    'binding_name' => 'glGetHandleARB',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewGetHandleARB',
    'glewtype' => 'fun',
    'restype' => 'GLhandleARB',
    'signature' => 'GLenum pname'
  },
  'glGetHistogram' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'reset',
        'GLboolean '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'values',
        'void *'
      ]
    ],
    'binding_name' => 'glGetHistogram_c',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewGetHistogram',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLboolean reset, GLenum format, GLenum type, void *values'
  },
  'glGetHistogramEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'reset',
        'GLboolean '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'values',
        'void *'
      ]
    ],
    'binding_name' => 'glGetHistogramEXT_c',
    'feature' => 'GL_EXT_histogram',
    'glewImpl' => '__glewGetHistogramEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLboolean reset, GLenum format, GLenum type, void *values'
  },
  'glGetHistogramParameterfv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glGetHistogramParameterfv_c',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewGetHistogramParameterfv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLfloat *params'
  },
  'glGetHistogramParameterfvEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetHistogramParameterfvEXT_c',
    'feature' => 'GL_EXT_histogram',
    'glewImpl' => '__glewGetHistogramParameterfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLfloat* params'
  },
  'glGetHistogramParameteriv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint *'
      ]
    ],
    'binding_name' => 'glGetHistogramParameteriv_c',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewGetHistogramParameteriv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint *params'
  },
  'glGetHistogramParameterivEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetHistogramParameterivEXT_c',
    'feature' => 'GL_EXT_histogram',
    'glewImpl' => '__glewGetHistogramParameterivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint* params'
  },
  'glGetImageHandleARB' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'layered',
        'GLboolean '
      ],
      [
        'layer',
        'GLint '
      ],
      [
        'format',
        'GLenum '
      ]
    ],
    'binding_name' => 'glGetImageHandleARB',
    'feature' => 'GL_ARB_bindless_texture',
    'glewImpl' => '__glewGetImageHandleARB',
    'glewtype' => 'fun',
    'restype' => 'GLuint64',
    'signature' => 'GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format'
  },
  'glGetImageHandleNV' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'layered',
        'GLboolean '
      ],
      [
        'layer',
        'GLint '
      ],
      [
        'format',
        'GLenum '
      ]
    ],
    'binding_name' => 'glGetImageHandleNV',
    'feature' => 'GL_NV_bindless_texture',
    'glewImpl' => '__glewGetImageHandleNV',
    'glewtype' => 'fun',
    'restype' => 'GLuint64',
    'signature' => 'GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format'
  },
  'glGetImageTransformParameterfvHP' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glGetImageTransformParameterfvHP_c',
    'feature' => 'GL_HP_image_transform',
    'glewImpl' => '__glewGetImageTransformParameterfvHP',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLfloat* params'
  },
  'glGetImageTransformParameterivHP' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glGetImageTransformParameterivHP_c',
    'feature' => 'GL_HP_image_transform',
    'glewImpl' => '__glewGetImageTransformParameterivHP',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLint* params'
  },
  'glGetInfoLogARB' => {
    'argdata' => [
      [
        'obj',
        'GLhandleARB '
      ],
      [
        'maxLength',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'infoLog',
        'GLcharARB *'
      ]
    ],
    'binding_name' => 'glGetInfoLogARB_c',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewGetInfoLogARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB *infoLog'
  },
  'glGetInteger64i_v' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'data',
        'GLint64 * '
      ]
    ],
    'binding_name' => 'glGetInteger64i_v_c',
    'feature' => 'GL_VERSION_3_2',
    'glewImpl' => '__glewGetInteger64i_v',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLuint index, GLint64 * data'
  },
  'glGetInteger64v' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint64* '
      ]
    ],
    'binding_name' => 'glGetInteger64v_c',
    'feature' => 'GL_ARB_sync',
    'glewImpl' => '__glewGetInteger64v',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint64* params'
  },
  'glGetInteger64vAPPLE' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint64* '
      ]
    ],
    'binding_name' => 'glGetInteger64vAPPLE_c',
    'feature' => 'GL_APPLE_sync',
    'glewImpl' => '__glewGetInteger64vAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint64* params'
  },
  'glGetIntegerIndexedvEXT' => {
    'argdata' => [
      [
        'value',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'data',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetIntegerIndexedvEXT_c',
    'feature' => 'GL_EXT_draw_buffers2',
    'glewImpl' => '__glewGetIntegerIndexedvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum value, GLuint index, GLint* data'
  },
  'glGetIntegeri_v' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'data',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetIntegeri_v_c',
    'feature' => 'GL_ARB_uniform_buffer_object',
    'glewImpl' => '__glewGetIntegeri_v',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLint* data'
  },
  'glGetIntegeri_vEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'data',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetIntegeri_vEXT_c',
    'feature' => 'GL_EXT_multiview_draw_buffers',
    'glewImpl' => '__glewGetIntegeri_vEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLint* data'
  },
  'glGetIntegerui64i_vNV' => {
    'argdata' => [
      [
        'value',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'result',
        'GLuint64EXT * '
      ]
    ],
    'binding_name' => 'glGetIntegerui64i_vNV_c',
    'feature' => 'GL_NV_vertex_buffer_unified_memory',
    'glewImpl' => '__glewGetIntegerui64i_vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum value, GLuint index, GLuint64EXT result[]'
  },
  'glGetIntegerui64vNV' => {
    'argdata' => [
      [
        'value',
        'GLenum '
      ],
      [
        'result',
        'GLuint64EXT* '
      ]
    ],
    'binding_name' => 'glGetIntegerui64vNV_c',
    'feature' => 'GL_NV_shader_buffer_load',
    'glewImpl' => '__glewGetIntegerui64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum value, GLuint64EXT* result'
  },
  'glGetIntegerv' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint *'
      ]
    ],
    'binding_name' => 'glGetIntegerv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint *params'
  },
  'glGetInternalformatSampleivNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'samples',
        'GLsizei '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetInternalformatSampleivNV_c',
    'feature' => 'GL_NV_internalformat_sample_query',
    'glewImpl' => '__glewGetInternalformatSampleivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint* params'
  },
  'glGetInternalformati64v' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'params',
        'GLint64* '
      ]
    ],
    'binding_name' => 'glGetInternalformati64v_c',
    'feature' => 'GL_ARB_internalformat_query2',
    'glewImpl' => '__glewGetInternalformati64v',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64* params'
  },
  'glGetInternalformativ' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetInternalformativ_c',
    'feature' => 'GL_ARB_internalformat_query',
    'glewImpl' => '__glewGetInternalformativ',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint* params'
  },
  'glGetInvariantBooleanvEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'value',
        'GLenum '
      ],
      [
        'data',
        'GLboolean *'
      ]
    ],
    'binding_name' => 'glGetInvariantBooleanvEXT_c',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewGetInvariantBooleanvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum value, GLboolean *data'
  },
  'glGetInvariantFloatvEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'value',
        'GLenum '
      ],
      [
        'data',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glGetInvariantFloatvEXT_c',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewGetInvariantFloatvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum value, GLfloat *data'
  },
  'glGetInvariantIntegervEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'value',
        'GLenum '
      ],
      [
        'data',
        'GLint *'
      ]
    ],
    'binding_name' => 'glGetInvariantIntegervEXT_c',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewGetInvariantIntegervEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum value, GLint *data'
  },
  'glGetLightfv' => {
    'argdata' => [
      [
        'light',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glGetLightfv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum light, GLenum pname, GLfloat *params'
  },
  'glGetLightiv' => {
    'argdata' => [
      [
        'light',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint *'
      ]
    ],
    'binding_name' => 'glGetLightiv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum light, GLenum pname, GLint *params'
  },
  'glGetLightxv' => {
    'argdata' => [
      [
        'light',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfixed* '
      ]
    ],
    'binding_name' => 'glGetLightxv_c',
    'feature' => 'GL_REGAL_ES1_1_compatibility',
    'glewImpl' => '__glewGetLightxv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum light, GLenum pname, GLfixed* params'
  },
  'glGetLocalConstantBooleanvEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'value',
        'GLenum '
      ],
      [
        'data',
        'GLboolean *'
      ]
    ],
    'binding_name' => 'glGetLocalConstantBooleanvEXT_c',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewGetLocalConstantBooleanvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum value, GLboolean *data'
  },
  'glGetLocalConstantFloatvEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'value',
        'GLenum '
      ],
      [
        'data',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glGetLocalConstantFloatvEXT_c',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewGetLocalConstantFloatvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum value, GLfloat *data'
  },
  'glGetLocalConstantIntegervEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'value',
        'GLenum '
      ],
      [
        'data',
        'GLint *'
      ]
    ],
    'binding_name' => 'glGetLocalConstantIntegervEXT_c',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewGetLocalConstantIntegervEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum value, GLint *data'
  },
  'glGetMPEGParameterfvSGIX' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetMPEGParameterfvSGIX_c',
    'feature' => 'GL_SGIX_mpeg1',
    'glewImpl' => '__glewGetMPEGParameterfvSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLfloat* params'
  },
  'glGetMPEGParameterivSGIX' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetMPEGParameterivSGIX_c',
    'feature' => 'GL_SGIX_mpeg1',
    'glewImpl' => '__glewGetMPEGParameterivSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint* params'
  },
  'glGetMPEGPredictorSGIX' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'void *'
      ]
    ],
    'binding_name' => 'glGetMPEGPredictorSGIX_c',
    'feature' => 'GL_SGIX_mpeg1',
    'glewImpl' => '__glewGetMPEGPredictorSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum format, GLenum type, void *pixels'
  },
  'glGetMPEGQuantTableubv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'values',
        'GLubyte* '
      ]
    ],
    'binding_name' => 'glGetMPEGQuantTableubv_c',
    'feature' => 'GL_SGIX_mpeg1',
    'glewImpl' => '__glewGetMPEGQuantTableubv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLubyte* values'
  },
  'glGetMapAttribParameterfvNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetMapAttribParameterfvNV_c',
    'feature' => 'GL_NV_evaluators',
    'glewImpl' => '__glewGetMapAttribParameterfvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLenum pname, GLfloat* params'
  },
  'glGetMapAttribParameterivNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetMapAttribParameterivNV_c',
    'feature' => 'GL_NV_evaluators',
    'glewImpl' => '__glewGetMapAttribParameterivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLenum pname, GLint* params'
  },
  'glGetMapControlPointsNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'ustride',
        'GLsizei '
      ],
      [
        'vstride',
        'GLsizei '
      ],
      [
        'packed',
        'GLboolean '
      ],
      [
        'points',
        'void *'
      ]
    ],
    'binding_name' => 'glGetMapControlPointsNV_c',
    'feature' => 'GL_NV_evaluators',
    'glewImpl' => '__glewGetMapControlPointsNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points'
  },
  'glGetMapParameterfvNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetMapParameterfvNV_c',
    'feature' => 'GL_NV_evaluators',
    'glewImpl' => '__glewGetMapParameterfvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLfloat* params'
  },
  'glGetMapParameterivNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetMapParameterivNV_c',
    'feature' => 'GL_NV_evaluators',
    'glewImpl' => '__glewGetMapParameterivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint* params'
  },
  'glGetMapdv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'query',
        'GLenum '
      ],
      [
        'v',
        'GLdouble *'
      ]
    ],
    'binding_name' => 'glGetMapdv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum query, GLdouble *v'
  },
  'glGetMapfv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'query',
        'GLenum '
      ],
      [
        'v',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glGetMapfv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum query, GLfloat *v'
  },
  'glGetMapiv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'query',
        'GLenum '
      ],
      [
        'v',
        'GLint *'
      ]
    ],
    'binding_name' => 'glGetMapiv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum query, GLint *v'
  },
  'glGetMaterialfv' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glGetMaterialfv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum pname, GLfloat *params'
  },
  'glGetMaterialiv' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint *'
      ]
    ],
    'binding_name' => 'glGetMaterialiv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum pname, GLint *params'
  },
  'glGetMaterialxv' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfixed* '
      ]
    ],
    'binding_name' => 'glGetMaterialxv_c',
    'feature' => 'GL_REGAL_ES1_1_compatibility',
    'glewImpl' => '__glewGetMaterialxv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum pname, GLfixed* params'
  },
  'glGetMemoryObjectParameterivEXT' => {
    'argdata' => [
      [
        'memoryObject',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetMemoryObjectParameterivEXT_c',
    'feature' => 'GL_EXT_memory_object',
    'glewImpl' => '__glewGetMemoryObjectParameterivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint memoryObject, GLenum pname, GLint* params'
  },
  'glGetMinmax' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'reset',
        'GLboolean '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'types',
        'GLenum '
      ],
      [
        'values',
        'void *'
      ]
    ],
    'binding_name' => 'glGetMinmax_c',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewGetMinmax',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLboolean reset, GLenum format, GLenum types, void *values'
  },
  'glGetMinmaxEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'reset',
        'GLboolean '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'values',
        'void *'
      ]
    ],
    'binding_name' => 'glGetMinmaxEXT_c',
    'feature' => 'GL_EXT_histogram',
    'glewImpl' => '__glewGetMinmaxEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLboolean reset, GLenum format, GLenum type, void *values'
  },
  'glGetMinmaxParameterfv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glGetMinmaxParameterfv_c',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewGetMinmaxParameterfv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLfloat *params'
  },
  'glGetMinmaxParameterfvEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetMinmaxParameterfvEXT_c',
    'feature' => 'GL_EXT_histogram',
    'glewImpl' => '__glewGetMinmaxParameterfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLfloat* params'
  },
  'glGetMinmaxParameteriv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint *'
      ]
    ],
    'binding_name' => 'glGetMinmaxParameteriv_c',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewGetMinmaxParameteriv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint *params'
  },
  'glGetMinmaxParameterivEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetMinmaxParameterivEXT_c',
    'feature' => 'GL_EXT_histogram',
    'glewImpl' => '__glewGetMinmaxParameterivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint* params'
  },
  'glGetMultiTexEnvfvEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetMultiTexEnvfvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetMultiTexEnvfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLenum pname, GLfloat* params'
  },
  'glGetMultiTexEnvivEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetMultiTexEnvivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetMultiTexEnvivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLenum pname, GLint* params'
  },
  'glGetMultiTexGendvEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'coord',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLdouble* '
      ]
    ],
    'binding_name' => 'glGetMultiTexGendvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetMultiTexGendvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum coord, GLenum pname, GLdouble* params'
  },
  'glGetMultiTexGenfvEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'coord',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetMultiTexGenfvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetMultiTexGenfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum coord, GLenum pname, GLfloat* params'
  },
  'glGetMultiTexGenivEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'coord',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetMultiTexGenivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetMultiTexGenivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum coord, GLenum pname, GLint* params'
  },
  'glGetMultiTexImageEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'void *'
      ]
    ],
    'binding_name' => 'glGetMultiTexImageEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetMultiTexImageEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels'
  },
  'glGetMultiTexLevelParameterfvEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetMultiTexLevelParameterfvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetMultiTexLevelParameterfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat* params'
  },
  'glGetMultiTexLevelParameterivEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetMultiTexLevelParameterivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetMultiTexLevelParameterivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLint level, GLenum pname, GLint* params'
  },
  'glGetMultiTexParameterIivEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetMultiTexParameterIivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetMultiTexParameterIivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLenum pname, GLint* params'
  },
  'glGetMultiTexParameterIuivEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGetMultiTexParameterIuivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetMultiTexParameterIuivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLenum pname, GLuint* params'
  },
  'glGetMultiTexParameterfvEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetMultiTexParameterfvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetMultiTexParameterfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLenum pname, GLfloat* params'
  },
  'glGetMultiTexParameterivEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetMultiTexParameterivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetMultiTexParameterivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLenum pname, GLint* params'
  },
  'glGetMultisamplefv' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'val',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetMultisamplefv_c',
    'feature' => 'GL_ARB_texture_multisample',
    'glewImpl' => '__glewGetMultisamplefv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLuint index, GLfloat* val'
  },
  'glGetMultisamplefvNV' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'val',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetMultisamplefvNV_c',
    'feature' => 'GL_NV_explicit_multisample',
    'glewImpl' => '__glewGetMultisamplefvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLuint index, GLfloat* val'
  },
  'glGetNamedBufferParameteri64v' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint64* '
      ]
    ],
    'binding_name' => 'glGetNamedBufferParameteri64v_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGetNamedBufferParameteri64v',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLenum pname, GLint64* params'
  },
  'glGetNamedBufferParameteriv' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetNamedBufferParameteriv_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGetNamedBufferParameteriv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLenum pname, GLint* params'
  },
  'glGetNamedBufferParameterivEXT' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetNamedBufferParameterivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetNamedBufferParameterivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLenum pname, GLint* params'
  },
  'glGetNamedBufferParameterui64vNV' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLuint64EXT* '
      ]
    ],
    'binding_name' => 'glGetNamedBufferParameterui64vNV_c',
    'feature' => 'GL_NV_shader_buffer_load',
    'glewImpl' => '__glewGetNamedBufferParameterui64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLenum pname, GLuint64EXT* params'
  },
  'glGetNamedBufferPointerv' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'void** '
      ]
    ],
    'binding_name' => 'glGetNamedBufferPointerv_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGetNamedBufferPointerv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLenum pname, void** params'
  },
  'glGetNamedBufferPointervEXT' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'void** '
      ]
    ],
    'binding_name' => 'glGetNamedBufferPointervEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetNamedBufferPointervEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLenum pname, void** params'
  },
  'glGetNamedBufferSubData' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ],
      [
        'data',
        'void *'
      ]
    ],
    'binding_name' => 'glGetNamedBufferSubData_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGetNamedBufferSubData',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLintptr offset, GLsizeiptr size, void *data'
  },
  'glGetNamedBufferSubDataEXT' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ],
      [
        'data',
        'void *'
      ]
    ],
    'binding_name' => 'glGetNamedBufferSubDataEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetNamedBufferSubDataEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLintptr offset, GLsizeiptr size, void *data'
  },
  'glGetNamedFramebufferAttachmentParameteriv' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetNamedFramebufferAttachmentParameteriv_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGetNamedFramebufferAttachmentParameteriv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params'
  },
  'glGetNamedFramebufferAttachmentParameterivEXT' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetNamedFramebufferAttachmentParameterivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetNamedFramebufferAttachmentParameterivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params'
  },
  'glGetNamedFramebufferParameterfvAMD' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'numsamples',
        'GLuint '
      ],
      [
        'pixelindex',
        'GLuint '
      ],
      [
        'size',
        'GLsizei '
      ],
      [
        'values',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetNamedFramebufferParameterfvAMD_c',
    'feature' => 'GL_AMD_framebuffer_sample_positions',
    'glewImpl' => '__glewGetNamedFramebufferParameterfvAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat* values'
  },
  'glGetNamedFramebufferParameteriv' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetNamedFramebufferParameteriv_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGetNamedFramebufferParameteriv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum pname, GLint* param'
  },
  'glGetNamedFramebufferParameterivEXT' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetNamedFramebufferParameterivEXT_c',
    'feature' => 'GL_ARB_framebuffer_no_attachments',
    'glewImpl' => '__glewGetNamedFramebufferParameterivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum pname, GLint* params'
  },
  'glGetNamedProgramLocalParameterIivEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetNamedProgramLocalParameterIivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetNamedProgramLocalParameterIivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum target, GLuint index, GLint* params'
  },
  'glGetNamedProgramLocalParameterIuivEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGetNamedProgramLocalParameterIuivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetNamedProgramLocalParameterIuivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum target, GLuint index, GLuint* params'
  },
  'glGetNamedProgramLocalParameterdvEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'GLdouble* '
      ]
    ],
    'binding_name' => 'glGetNamedProgramLocalParameterdvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetNamedProgramLocalParameterdvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum target, GLuint index, GLdouble* params'
  },
  'glGetNamedProgramLocalParameterfvEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetNamedProgramLocalParameterfvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetNamedProgramLocalParameterfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum target, GLuint index, GLfloat* params'
  },
  'glGetNamedProgramStringEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'string',
        'void *'
      ]
    ],
    'binding_name' => 'glGetNamedProgramStringEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetNamedProgramStringEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum target, GLenum pname, void *string'
  },
  'glGetNamedProgramivEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetNamedProgramivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetNamedProgramivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum target, GLenum pname, GLint* params'
  },
  'glGetNamedRenderbufferParameteriv' => {
    'argdata' => [
      [
        'renderbuffer',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetNamedRenderbufferParameteriv_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGetNamedRenderbufferParameteriv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint renderbuffer, GLenum pname, GLint* params'
  },
  'glGetNamedRenderbufferParameterivEXT' => {
    'argdata' => [
      [
        'renderbuffer',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetNamedRenderbufferParameterivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetNamedRenderbufferParameterivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint renderbuffer, GLenum pname, GLint* params'
  },
  'glGetNamedStringARB' => {
    'argdata' => [
      [
        'namelen',
        'GLint '
      ],
      [
        'name',
        'const GLchar* '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'stringlen',
        'GLint *'
      ],
      [
        'string',
        'GLchar *'
      ]
    ],
    'binding_name' => 'glGetNamedStringARB_c',
    'feature' => 'GL_ARB_shading_language_include',
    'glewImpl' => '__glewGetNamedStringARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint namelen, const GLchar* name, GLsizei bufSize, GLint *stringlen, GLchar *string'
  },
  'glGetNamedStringivARB' => {
    'argdata' => [
      [
        'namelen',
        'GLint '
      ],
      [
        'name',
        'const GLchar* '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint *'
      ]
    ],
    'binding_name' => 'glGetNamedStringivARB_c',
    'feature' => 'GL_ARB_shading_language_include',
    'glewImpl' => '__glewGetNamedStringivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint namelen, const GLchar* name, GLenum pname, GLint *params'
  },
  'glGetNextPerfQueryIdINTEL' => {
    'argdata' => [
      [
        'queryId',
        'GLuint '
      ],
      [
        'nextQueryId',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGetNextPerfQueryIdINTEL_c',
    'feature' => 'GL_INTEL_performance_query',
    'glewImpl' => '__glewGetNextPerfQueryIdINTEL',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint queryId, GLuint* nextQueryId'
  },
  'glGetNonlinLightfvSGIX' => {
    'argdata' => [
      [
        'light',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'terms',
        'GLint* '
      ],
      [
        'data',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glGetNonlinLightfvSGIX_c',
    'feature' => 'GL_SGIX_nonlinear_lighting_pervertex',
    'glewImpl' => '__glewGetNonlinLightfvSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum light, GLenum pname, GLint* terms, GLfloat *data'
  },
  'glGetNonlinMaterialfvSGIX' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'terms',
        'GLint* '
      ],
      [
        'data',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glGetNonlinMaterialfvSGIX_c',
    'feature' => 'GL_SGIX_nonlinear_lighting_pervertex',
    'glewImpl' => '__glewGetNonlinMaterialfvSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum pname, GLint* terms, const GLfloat *data'
  },
  'glGetObjectBufferfvATI' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetObjectBufferfvATI_c',
    'feature' => 'GL_ATI_vertex_array_object',
    'glewImpl' => '__glewGetObjectBufferfvATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLenum pname, GLfloat* params'
  },
  'glGetObjectBufferivATI' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetObjectBufferivATI_c',
    'feature' => 'GL_ATI_vertex_array_object',
    'glewImpl' => '__glewGetObjectBufferivATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLenum pname, GLint* params'
  },
  'glGetObjectLabel' => {
    'argdata' => [
      [
        'identifier',
        'GLenum '
      ],
      [
        'name',
        'GLuint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'label',
        'GLchar *'
      ]
    ],
    'binding_name' => 'glGetObjectLabel_c',
    'feature' => 'GL_KHR_debug',
    'glewImpl' => '__glewGetObjectLabel',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum identifier, GLuint name, GLsizei bufSize, GLsizei* length, GLchar *label'
  },
  'glGetObjectLabelEXT' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'object',
        'GLuint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'label',
        'GLchar *'
      ]
    ],
    'binding_name' => 'glGetObjectLabelEXT_c',
    'feature' => 'GL_EXT_debug_label',
    'glewImpl' => '__glewGetObjectLabelEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLuint object, GLsizei bufSize, GLsizei* length, GLchar *label'
  },
  'glGetObjectParameterfvARB' => {
    'argdata' => [
      [
        'obj',
        'GLhandleARB '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetObjectParameterfvARB_c',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewGetObjectParameterfvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhandleARB obj, GLenum pname, GLfloat* params'
  },
  'glGetObjectParameterivAPPLE' => {
    'argdata' => [
      [
        'objectType',
        'GLenum '
      ],
      [
        'name',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetObjectParameterivAPPLE_c',
    'feature' => 'GL_APPLE_object_purgeable',
    'glewImpl' => '__glewGetObjectParameterivAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum objectType, GLuint name, GLenum pname, GLint* params'
  },
  'glGetObjectParameterivARB' => {
    'argdata' => [
      [
        'obj',
        'GLhandleARB '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetObjectParameterivARB_c',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewGetObjectParameterivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhandleARB obj, GLenum pname, GLint* params'
  },
  'glGetObjectPtrLabel' => {
    'argdata' => [
      [
        'ptr',
        'void* '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'label',
        'GLchar *'
      ]
    ],
    'binding_name' => 'glGetObjectPtrLabel_c',
    'feature' => 'GL_KHR_debug',
    'glewImpl' => '__glewGetObjectPtrLabel',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void* ptr, GLsizei bufSize, GLsizei* length, GLchar *label'
  },
  'glGetOcclusionQueryivNV' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetOcclusionQueryivNV_c',
    'feature' => 'GL_NV_occlusion_query',
    'glewImpl' => '__glewGetOcclusionQueryivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum pname, GLint* params'
  },
  'glGetOcclusionQueryuivNV' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGetOcclusionQueryuivNV_c',
    'feature' => 'GL_NV_occlusion_query',
    'glewImpl' => '__glewGetOcclusionQueryuivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum pname, GLuint* params'
  },
  'glGetPathColorGenfvNV' => {
    'argdata' => [
      [
        'color',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'value',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetPathColorGenfvNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewGetPathColorGenfvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum color, GLenum pname, GLfloat* value'
  },
  'glGetPathColorGenivNV' => {
    'argdata' => [
      [
        'color',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'value',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetPathColorGenivNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewGetPathColorGenivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum color, GLenum pname, GLint* value'
  },
  'glGetPathCommandsNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'commands',
        'GLubyte* '
      ]
    ],
    'binding_name' => 'glGetPathCommandsNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewGetPathCommandsNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint path, GLubyte* commands'
  },
  'glGetPathCoordsNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'coords',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetPathCoordsNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewGetPathCoordsNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint path, GLfloat* coords'
  },
  'glGetPathDashArrayNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'dashArray',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetPathDashArrayNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewGetPathDashArrayNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint path, GLfloat* dashArray'
  },
  'glGetPathLengthNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'startSegment',
        'GLsizei '
      ],
      [
        'numSegments',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glGetPathLengthNV',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewGetPathLengthNV',
    'glewtype' => 'fun',
    'restype' => 'GLfloat',
    'signature' => 'GLuint path, GLsizei startSegment, GLsizei numSegments'
  },
  'glGetPathMetricRangeNV' => {
    'argdata' => [
      [
        'metricQueryMask',
        'GLbitfield '
      ],
      [
        'firstPathName',
        'GLuint '
      ],
      [
        'numPaths',
        'GLsizei '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'metrics',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetPathMetricRangeNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewGetPathMetricRangeNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat* metrics'
  },
  'glGetPathMetricsNV' => {
    'argdata' => [
      [
        'metricQueryMask',
        'GLbitfield '
      ],
      [
        'numPaths',
        'GLsizei '
      ],
      [
        'pathNameType',
        'GLenum '
      ],
      [
        'paths',
        'const void *'
      ],
      [
        'pathBase',
        'GLuint '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'metrics',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glGetPathMetricsNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewGetPathMetricsNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics'
  },
  'glGetPathParameterfvNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'value',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetPathParameterfvNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewGetPathParameterfvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint path, GLenum pname, GLfloat* value'
  },
  'glGetPathParameterivNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'value',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetPathParameterivNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewGetPathParameterivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint path, GLenum pname, GLint* value'
  },
  'glGetPathSpacingNV' => {
    'argdata' => [
      [
        'pathListMode',
        'GLenum '
      ],
      [
        'numPaths',
        'GLsizei '
      ],
      [
        'pathNameType',
        'GLenum '
      ],
      [
        'paths',
        'const void *'
      ],
      [
        'pathBase',
        'GLuint '
      ],
      [
        'advanceScale',
        'GLfloat '
      ],
      [
        'kerningScale',
        'GLfloat '
      ],
      [
        'transformType',
        'GLenum '
      ],
      [
        'returnedSpacing',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glGetPathSpacingNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewGetPathSpacingNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing'
  },
  'glGetPathTexGenfvNV' => {
    'argdata' => [
      [
        'texCoordSet',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'value',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetPathTexGenfvNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewGetPathTexGenfvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texCoordSet, GLenum pname, GLfloat* value'
  },
  'glGetPathTexGenivNV' => {
    'argdata' => [
      [
        'texCoordSet',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'value',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetPathTexGenivNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewGetPathTexGenivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texCoordSet, GLenum pname, GLint* value'
  },
  'glGetPerfCounterInfoINTEL' => {
    'argdata' => [
      [
        'queryId',
        'GLuint '
      ],
      [
        'counterId',
        'GLuint '
      ],
      [
        'counterNameLength',
        'GLuint '
      ],
      [
        'counterName',
        'GLchar* '
      ],
      [
        'counterDescLength',
        'GLuint '
      ],
      [
        'counterDesc',
        'GLchar *'
      ],
      [
        'counterOffset',
        'GLuint *'
      ],
      [
        'counterDataSize',
        'GLuint *'
      ],
      [
        'counterTypeEnum',
        'GLuint *'
      ],
      [
        'counterDataTypeEnum',
        'GLuint *'
      ],
      [
        'rawCounterMaxValue',
        'GLuint64 *'
      ]
    ],
    'binding_name' => 'glGetPerfCounterInfoINTEL_c',
    'feature' => 'GL_INTEL_performance_query',
    'glewImpl' => '__glewGetPerfCounterInfoINTEL',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar* counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue'
  },
  'glGetPerfMonitorCounterDataAMD' => {
    'argdata' => [
      [
        'monitor',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'dataSize',
        'GLsizei '
      ],
      [
        'data',
        'GLuint* '
      ],
      [
        'bytesWritten',
        'GLint *'
      ]
    ],
    'binding_name' => 'glGetPerfMonitorCounterDataAMD_c',
    'feature' => 'GL_AMD_performance_monitor',
    'glewImpl' => '__glewGetPerfMonitorCounterDataAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint monitor, GLenum pname, GLsizei dataSize, GLuint* data, GLint *bytesWritten'
  },
  'glGetPerfMonitorCounterInfoAMD' => {
    'argdata' => [
      [
        'group',
        'GLuint '
      ],
      [
        'counter',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'data',
        'void *'
      ]
    ],
    'binding_name' => 'glGetPerfMonitorCounterInfoAMD_c',
    'feature' => 'GL_AMD_performance_monitor',
    'glewImpl' => '__glewGetPerfMonitorCounterInfoAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint group, GLuint counter, GLenum pname, void *data'
  },
  'glGetPerfMonitorCounterStringAMD' => {
    'argdata' => [
      [
        'group',
        'GLuint '
      ],
      [
        'counter',
        'GLuint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'counterString',
        'GLchar *'
      ]
    ],
    'binding_name' => 'glGetPerfMonitorCounterStringAMD_c',
    'feature' => 'GL_AMD_performance_monitor',
    'glewImpl' => '__glewGetPerfMonitorCounterStringAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint group, GLuint counter, GLsizei bufSize, GLsizei* length, GLchar *counterString'
  },
  'glGetPerfMonitorCountersAMD' => {
    'argdata' => [
      [
        'group',
        'GLuint '
      ],
      [
        'numCounters',
        'GLint* '
      ],
      [
        'maxActiveCounters',
        'GLint *'
      ],
      [
        'countersSize',
        'GLsizei '
      ],
      [
        'counters',
        'GLuint *'
      ]
    ],
    'binding_name' => 'glGetPerfMonitorCountersAMD_c',
    'feature' => 'GL_AMD_performance_monitor',
    'glewImpl' => '__glewGetPerfMonitorCountersAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint group, GLint* numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters'
  },
  'glGetPerfMonitorGroupStringAMD' => {
    'argdata' => [
      [
        'group',
        'GLuint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'groupString',
        'GLchar *'
      ]
    ],
    'binding_name' => 'glGetPerfMonitorGroupStringAMD_c',
    'feature' => 'GL_AMD_performance_monitor',
    'glewImpl' => '__glewGetPerfMonitorGroupStringAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint group, GLsizei bufSize, GLsizei* length, GLchar *groupString'
  },
  'glGetPerfMonitorGroupsAMD' => {
    'argdata' => [
      [
        'numGroups',
        'GLint* '
      ],
      [
        'groupsSize',
        'GLsizei '
      ],
      [
        'groups',
        'GLuint *'
      ]
    ],
    'binding_name' => 'glGetPerfMonitorGroupsAMD_c',
    'feature' => 'GL_AMD_performance_monitor',
    'glewImpl' => '__glewGetPerfMonitorGroupsAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint* numGroups, GLsizei groupsSize, GLuint *groups'
  },
  'glGetPerfQueryDataINTEL' => {
    'argdata' => [
      [
        'queryHandle',
        'GLuint '
      ],
      [
        'flags',
        'GLuint '
      ],
      [
        'dataSize',
        'GLsizei '
      ],
      [
        'data',
        'void *'
      ],
      [
        'bytesWritten',
        'GLuint *'
      ]
    ],
    'binding_name' => 'glGetPerfQueryDataINTEL_c',
    'feature' => 'GL_INTEL_performance_query',
    'glewImpl' => '__glewGetPerfQueryDataINTEL',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten'
  },
  'glGetPerfQueryIdByNameINTEL' => {
    'argdata' => [
      [
        'queryName',
        'GLchar* '
      ],
      [
        'queryId',
        'GLuint *'
      ]
    ],
    'binding_name' => 'glGetPerfQueryIdByNameINTEL_c',
    'feature' => 'GL_INTEL_performance_query',
    'glewImpl' => '__glewGetPerfQueryIdByNameINTEL',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLchar* queryName, GLuint *queryId'
  },
  'glGetPerfQueryInfoINTEL' => {
    'argdata' => [
      [
        'queryId',
        'GLuint '
      ],
      [
        'queryNameLength',
        'GLuint '
      ],
      [
        'queryName',
        'GLchar* '
      ],
      [
        'dataSize',
        'GLuint *'
      ],
      [
        'noCounters',
        'GLuint *'
      ],
      [
        'noInstances',
        'GLuint *'
      ],
      [
        'capsMask',
        'GLuint *'
      ]
    ],
    'binding_name' => 'glGetPerfQueryInfoINTEL_c',
    'feature' => 'GL_INTEL_performance_query',
    'glewImpl' => '__glewGetPerfQueryInfoINTEL',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint queryId, GLuint queryNameLength, GLchar* queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask'
  },
  'glGetPixelMapfv' => {
    'argdata' => [
      [
        'map',
        'GLenum '
      ],
      [
        'values',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glGetPixelMapfv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum map, GLfloat *values'
  },
  'glGetPixelMapuiv' => {
    'argdata' => [
      [
        'map',
        'GLenum '
      ],
      [
        'values',
        'GLuint *'
      ]
    ],
    'binding_name' => 'glGetPixelMapuiv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum map, GLuint *values'
  },
  'glGetPixelMapusv' => {
    'argdata' => [
      [
        'map',
        'GLenum '
      ],
      [
        'values',
        'GLushort *'
      ]
    ],
    'binding_name' => 'glGetPixelMapusv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum map, GLushort *values'
  },
  'glGetPixelTransformParameterfvEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glGetPixelTransformParameterfvEXT_c',
    'feature' => 'GL_EXT_pixel_transform',
    'glewImpl' => '__glewGetPixelTransformParameterfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLfloat* params'
  },
  'glGetPixelTransformParameterfvSGI' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetPixelTransformParameterfvSGI_c',
    'feature' => 'GL_SGI_fft',
    'glewImpl' => '__glewGetPixelTransformParameterfvSGI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLfloat* params'
  },
  'glGetPixelTransformParameterivEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glGetPixelTransformParameterivEXT_c',
    'feature' => 'GL_EXT_pixel_transform',
    'glewImpl' => '__glewGetPixelTransformParameterivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLint* params'
  },
  'glGetPixelTransformParameterivSGI' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetPixelTransformParameterivSGI_c',
    'feature' => 'GL_SGI_fft',
    'glewImpl' => '__glewGetPixelTransformParameterivSGI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint* params'
  },
  'glGetPointerIndexedvEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'void** '
      ]
    ],
    'binding_name' => 'glGetPointerIndexedvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetPointerIndexedvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, void** params'
  },
  'glGetPointeri_vEXT' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'void** '
      ]
    ],
    'binding_name' => 'glGetPointeri_vEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetPointeri_vEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLuint index, void** params'
  },
  'glGetPointerv' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'void* *'
      ]
    ],
    'binding_name' => 'glGetPointerv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, void* *params'
  },
  'glGetPolygonStipple' => {
    'argdata' => [
      [
        'mask',
        'GLubyte *'
      ]
    ],
    'binding_name' => 'glGetPolygonStipple_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLubyte *mask'
  },
  'glGetProcAddressREGAL' => {
    'argdata' => [
      [
        'name',
        'const GLchar *'
      ]
    ],
    'binding_name' => 'glGetProcAddressREGAL_c',
    'feature' => 'GL_REGAL_proc_address',
    'glewImpl' => '__glewGetProcAddressREGAL',
    'glewtype' => 'fun',
    'restype' => 'void *',
    'signature' => 'const GLchar *name'
  },
  'glGetProgramBinary' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'binaryFormat',
        'GLenum *'
      ],
      [
        'binary',
        'void*'
      ]
    ],
    'binding_name' => 'glGetProgramBinary_c',
    'feature' => 'GL_ARB_get_program_binary',
    'glewImpl' => '__glewGetProgramBinary',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLsizei bufSize, GLsizei* length, GLenum *binaryFormat, void*binary'
  },
  'glGetProgramEnvParameterdvARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'GLdouble* '
      ]
    ],
    'binding_name' => 'glGetProgramEnvParameterdvARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewGetProgramEnvParameterdvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLdouble* params'
  },
  'glGetProgramEnvParameterfvARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetProgramEnvParameterfvARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewGetProgramEnvParameterfvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLfloat* params'
  },
  'glGetProgramInfoLog' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'infoLog',
        'GLchar* '
      ]
    ],
    'binding_name' => 'glGetProgramInfoLog_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewGetProgramInfoLog',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog'
  },
  'glGetProgramInterfaceiv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'programInterface',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetProgramInterfaceiv_c',
    'feature' => 'GL_ARB_program_interface_query',
    'glewImpl' => '__glewGetProgramInterfaceiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum programInterface, GLenum pname, GLint* params'
  },
  'glGetProgramLocalParameterdvARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'GLdouble* '
      ]
    ],
    'binding_name' => 'glGetProgramLocalParameterdvARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewGetProgramLocalParameterdvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLdouble* params'
  },
  'glGetProgramLocalParameterfvARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetProgramLocalParameterfvARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewGetProgramLocalParameterfvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLfloat* params'
  },
  'glGetProgramNamedParameterdvNV' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'len',
        'GLsizei '
      ],
      [
        'name',
        'const GLubyte* '
      ],
      [
        'params',
        'GLdouble *'
      ]
    ],
    'binding_name' => 'glGetProgramNamedParameterdvNV_c',
    'feature' => 'GL_NV_fragment_program',
    'glewImpl' => '__glewGetProgramNamedParameterdvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLsizei len, const GLubyte* name, GLdouble *params'
  },
  'glGetProgramNamedParameterfvNV' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'len',
        'GLsizei '
      ],
      [
        'name',
        'const GLubyte* '
      ],
      [
        'params',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glGetProgramNamedParameterfvNV_c',
    'feature' => 'GL_NV_fragment_program',
    'glewImpl' => '__glewGetProgramNamedParameterfvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLsizei len, const GLubyte* name, GLfloat *params'
  },
  'glGetProgramParameterdvNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLdouble* '
      ]
    ],
    'binding_name' => 'glGetProgramParameterdvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewGetProgramParameterdvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLenum pname, GLdouble* params'
  },
  'glGetProgramParameterfvNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetProgramParameterfvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewGetProgramParameterfvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLenum pname, GLfloat* params'
  },
  'glGetProgramPipelineInfoLog' => {
    'argdata' => [
      [
        'pipeline',
        'GLuint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'infoLog',
        'GLchar *'
      ]
    ],
    'binding_name' => 'glGetProgramPipelineInfoLog_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewGetProgramPipelineInfoLog',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar *infoLog'
  },
  'glGetProgramPipelineiv' => {
    'argdata' => [
      [
        'pipeline',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetProgramPipelineiv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewGetProgramPipelineiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint pipeline, GLenum pname, GLint* params'
  },
  'glGetProgramResourceIndex' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'programInterface',
        'GLenum '
      ],
      [
        'name',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glGetProgramResourceIndex_c',
    'feature' => 'GL_ARB_program_interface_query',
    'glewImpl' => '__glewGetProgramResourceIndex',
    'glewtype' => 'fun',
    'restype' => 'GLuint',
    'signature' => 'GLuint program, GLenum programInterface, const GLchar* name'
  },
  'glGetProgramResourceLocation' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'programInterface',
        'GLenum '
      ],
      [
        'name',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glGetProgramResourceLocation_c',
    'feature' => 'GL_ARB_program_interface_query',
    'glewImpl' => '__glewGetProgramResourceLocation',
    'glewtype' => 'fun',
    'restype' => 'GLint',
    'signature' => 'GLuint program, GLenum programInterface, const GLchar* name'
  },
  'glGetProgramResourceLocationIndex' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'programInterface',
        'GLenum '
      ],
      [
        'name',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glGetProgramResourceLocationIndex_c',
    'feature' => 'GL_ARB_program_interface_query',
    'glewImpl' => '__glewGetProgramResourceLocationIndex',
    'glewtype' => 'fun',
    'restype' => 'GLint',
    'signature' => 'GLuint program, GLenum programInterface, const GLchar* name'
  },
  'glGetProgramResourceLocationIndexEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'programInterface',
        'GLenum '
      ],
      [
        'name',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glGetProgramResourceLocationIndexEXT_c',
    'feature' => 'GL_EXT_blend_func_extended',
    'glewImpl' => '__glewGetProgramResourceLocationIndexEXT',
    'glewtype' => 'fun',
    'restype' => 'GLint',
    'signature' => 'GLuint program, GLenum programInterface, const GLchar* name'
  },
  'glGetProgramResourceName' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'programInterface',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'name',
        'GLchar *'
      ]
    ],
    'binding_name' => 'glGetProgramResourceName_c',
    'feature' => 'GL_ARB_program_interface_query',
    'glewImpl' => '__glewGetProgramResourceName',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, GLchar *name'
  },
  'glGetProgramResourcefvNV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'programInterface',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'propCount',
        'GLsizei '
      ],
      [
        'props',
        'const GLenum* '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei *'
      ],
      [
        'params',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glGetProgramResourcefvNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewGetProgramResourcefvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei *length, GLfloat *params'
  },
  'glGetProgramResourceiv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'programInterface',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'propCount',
        'GLsizei '
      ],
      [
        'props',
        'const GLenum* '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei *'
      ],
      [
        'params',
        'GLint *'
      ]
    ],
    'binding_name' => 'glGetProgramResourceiv_c',
    'feature' => 'GL_ARB_program_interface_query',
    'glewImpl' => '__glewGetProgramResourceiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei *length, GLint *params'
  },
  'glGetProgramStageiv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'shadertype',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'values',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetProgramStageiv_c',
    'feature' => 'GL_ARB_shader_subroutine',
    'glewImpl' => '__glewGetProgramStageiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum shadertype, GLenum pname, GLint* values'
  },
  'glGetProgramStringARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'string',
        'void *'
      ]
    ],
    'binding_name' => 'glGetProgramStringARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewGetProgramStringARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, void *string'
  },
  'glGetProgramStringNV' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'program',
        'GLubyte* '
      ]
    ],
    'binding_name' => 'glGetProgramStringNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewGetProgramStringNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum pname, GLubyte* program'
  },
  'glGetProgramiv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetProgramiv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewGetProgramiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum pname, GLint* param'
  },
  'glGetProgramivARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetProgramivARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewGetProgramivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint* params'
  },
  'glGetProgramivNV' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetProgramivNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewGetProgramivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum pname, GLint* params'
  },
  'glGetQueryBufferObjecti64v' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'offset',
        'GLintptr '
      ]
    ],
    'binding_name' => 'glGetQueryBufferObjecti64v',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGetQueryBufferObjecti64v',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLuint buffer, GLenum pname, GLintptr offset'
  },
  'glGetQueryBufferObjectiv' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'offset',
        'GLintptr '
      ]
    ],
    'binding_name' => 'glGetQueryBufferObjectiv',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGetQueryBufferObjectiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLuint buffer, GLenum pname, GLintptr offset'
  },
  'glGetQueryBufferObjectui64v' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'offset',
        'GLintptr '
      ]
    ],
    'binding_name' => 'glGetQueryBufferObjectui64v',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGetQueryBufferObjectui64v',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLuint buffer, GLenum pname, GLintptr offset'
  },
  'glGetQueryBufferObjectuiv' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'offset',
        'GLintptr '
      ]
    ],
    'binding_name' => 'glGetQueryBufferObjectuiv',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGetQueryBufferObjectuiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLuint buffer, GLenum pname, GLintptr offset'
  },
  'glGetQueryIndexediv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetQueryIndexediv_c',
    'feature' => 'GL_ARB_transform_feedback3',
    'glewImpl' => '__glewGetQueryIndexediv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLenum pname, GLint* params'
  },
  'glGetQueryObjecti64v' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint64* '
      ]
    ],
    'binding_name' => 'glGetQueryObjecti64v_c',
    'feature' => 'GL_ARB_timer_query',
    'glewImpl' => '__glewGetQueryObjecti64v',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum pname, GLint64* params'
  },
  'glGetQueryObjecti64vANGLE' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint64* '
      ]
    ],
    'binding_name' => 'glGetQueryObjecti64vANGLE_c',
    'feature' => 'GL_ANGLE_timer_query',
    'glewImpl' => '__glewGetQueryObjecti64vANGLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum pname, GLint64* params'
  },
  'glGetQueryObjecti64vEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint64EXT *'
      ]
    ],
    'binding_name' => 'glGetQueryObjecti64vEXT_c',
    'feature' => 'GL_EXT_timer_query',
    'glewImpl' => '__glewGetQueryObjecti64vEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum pname, GLint64EXT *params'
  },
  'glGetQueryObjectiv' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetQueryObjectiv_c',
    'feature' => 'GL_VERSION_1_5',
    'glewImpl' => '__glewGetQueryObjectiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum pname, GLint* params'
  },
  'glGetQueryObjectivANGLE' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetQueryObjectivANGLE_c',
    'feature' => 'GL_ANGLE_timer_query',
    'glewImpl' => '__glewGetQueryObjectivANGLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum pname, GLint* params'
  },
  'glGetQueryObjectivARB' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetQueryObjectivARB_c',
    'feature' => 'GL_ARB_occlusion_query',
    'glewImpl' => '__glewGetQueryObjectivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum pname, GLint* params'
  },
  'glGetQueryObjectui64v' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLuint64* '
      ]
    ],
    'binding_name' => 'glGetQueryObjectui64v_c',
    'feature' => 'GL_ARB_timer_query',
    'glewImpl' => '__glewGetQueryObjectui64v',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum pname, GLuint64* params'
  },
  'glGetQueryObjectui64vANGLE' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLuint64* '
      ]
    ],
    'binding_name' => 'glGetQueryObjectui64vANGLE_c',
    'feature' => 'GL_ANGLE_timer_query',
    'glewImpl' => '__glewGetQueryObjectui64vANGLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum pname, GLuint64* params'
  },
  'glGetQueryObjectui64vEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLuint64EXT *'
      ]
    ],
    'binding_name' => 'glGetQueryObjectui64vEXT_c',
    'feature' => 'GL_EXT_timer_query',
    'glewImpl' => '__glewGetQueryObjectui64vEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum pname, GLuint64EXT *params'
  },
  'glGetQueryObjectuiv' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGetQueryObjectuiv_c',
    'feature' => 'GL_VERSION_1_5',
    'glewImpl' => '__glewGetQueryObjectuiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum pname, GLuint* params'
  },
  'glGetQueryObjectuivANGLE' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGetQueryObjectuivANGLE_c',
    'feature' => 'GL_ANGLE_timer_query',
    'glewImpl' => '__glewGetQueryObjectuivANGLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum pname, GLuint* params'
  },
  'glGetQueryObjectuivARB' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGetQueryObjectuivARB_c',
    'feature' => 'GL_ARB_occlusion_query',
    'glewImpl' => '__glewGetQueryObjectuivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum pname, GLuint* params'
  },
  'glGetQueryiv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetQueryiv_c',
    'feature' => 'GL_VERSION_1_5',
    'glewImpl' => '__glewGetQueryiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint* params'
  },
  'glGetQueryivANGLE' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetQueryivANGLE_c',
    'feature' => 'GL_ANGLE_timer_query',
    'glewImpl' => '__glewGetQueryivANGLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint* params'
  },
  'glGetQueryivARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetQueryivARB_c',
    'feature' => 'GL_ARB_occlusion_query',
    'glewImpl' => '__glewGetQueryivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint* params'
  },
  'glGetRenderbufferParameteriv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetRenderbufferParameteriv_c',
    'feature' => 'GL_ARB_framebuffer_object',
    'glewImpl' => '__glewGetRenderbufferParameteriv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint* params'
  },
  'glGetRenderbufferParameterivEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetRenderbufferParameterivEXT_c',
    'feature' => 'GL_EXT_framebuffer_object',
    'glewImpl' => '__glewGetRenderbufferParameterivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint* params'
  },
  'glGetSamplerParameterIiv' => {
    'argdata' => [
      [
        'sampler',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetSamplerParameterIiv_c',
    'feature' => 'GL_ARB_sampler_objects',
    'glewImpl' => '__glewGetSamplerParameterIiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint sampler, GLenum pname, GLint* params'
  },
  'glGetSamplerParameterIuiv' => {
    'argdata' => [
      [
        'sampler',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGetSamplerParameterIuiv_c',
    'feature' => 'GL_ARB_sampler_objects',
    'glewImpl' => '__glewGetSamplerParameterIuiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint sampler, GLenum pname, GLuint* params'
  },
  'glGetSamplerParameterfv' => {
    'argdata' => [
      [
        'sampler',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetSamplerParameterfv_c',
    'feature' => 'GL_ARB_sampler_objects',
    'glewImpl' => '__glewGetSamplerParameterfv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint sampler, GLenum pname, GLfloat* params'
  },
  'glGetSamplerParameteriv' => {
    'argdata' => [
      [
        'sampler',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetSamplerParameteriv_c',
    'feature' => 'GL_ARB_sampler_objects',
    'glewImpl' => '__glewGetSamplerParameteriv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint sampler, GLenum pname, GLint* params'
  },
  'glGetSemaphoreParameterui64vEXT' => {
    'argdata' => [
      [
        'semaphore',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLuint64* '
      ]
    ],
    'binding_name' => 'glGetSemaphoreParameterui64vEXT_c',
    'feature' => 'GL_EXT_semaphore',
    'glewImpl' => '__glewGetSemaphoreParameterui64vEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint semaphore, GLenum pname, GLuint64* params'
  },
  'glGetSeparableFilter' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'row',
        'void *'
      ],
      [
        'column',
        'void *'
      ],
      [
        'span',
        'void *'
      ]
    ],
    'binding_name' => 'glGetSeparableFilter_c',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewGetSeparableFilter',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum format, GLenum type, void *row, void *column, void *span'
  },
  'glGetSeparableFilterEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'row',
        'void *'
      ],
      [
        'column',
        'void *'
      ],
      [
        'span',
        'void *'
      ]
    ],
    'binding_name' => 'glGetSeparableFilterEXT_c',
    'feature' => 'GL_EXT_convolution',
    'glewImpl' => '__glewGetSeparableFilterEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum format, GLenum type, void *row, void *column, void *span'
  },
  'glGetShaderInfoLog' => {
    'argdata' => [
      [
        'shader',
        'GLuint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'infoLog',
        'GLchar* '
      ]
    ],
    'binding_name' => 'glGetShaderInfoLog_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewGetShaderInfoLog',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog'
  },
  'glGetShaderPrecisionFormat' => {
    'argdata' => [
      [
        'shadertype',
        'GLenum '
      ],
      [
        'precisiontype',
        'GLenum '
      ],
      [
        'range',
        'GLint* '
      ],
      [
        'precision',
        'GLint *'
      ]
    ],
    'binding_name' => 'glGetShaderPrecisionFormat_c',
    'feature' => 'GL_ARB_ES2_compatibility',
    'glewImpl' => '__glewGetShaderPrecisionFormat',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum shadertype, GLenum precisiontype, GLint* range, GLint *precision'
  },
  'glGetShaderSource' => {
    'argdata' => [
      [
        'obj',
        'GLuint '
      ],
      [
        'maxLength',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'source',
        'GLchar* '
      ]
    ],
    'binding_name' => 'glGetShaderSource_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewGetShaderSource',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint obj, GLsizei maxLength, GLsizei* length, GLchar* source'
  },
  'glGetShaderSourceARB' => {
    'argdata' => [
      [
        'obj',
        'GLhandleARB '
      ],
      [
        'maxLength',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'source',
        'GLcharARB *'
      ]
    ],
    'binding_name' => 'glGetShaderSourceARB_c',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewGetShaderSourceARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB *source'
  },
  'glGetShaderiv' => {
    'argdata' => [
      [
        'shader',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetShaderiv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewGetShaderiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint shader, GLenum pname, GLint* param'
  },
  'glGetSharpenTexFuncSGIS' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'points',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetSharpenTexFuncSGIS_c',
    'feature' => 'GL_SGIS_sharpen_texture',
    'glewImpl' => '__glewGetSharpenTexFuncSGIS',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLfloat* points'
  },
  'glGetStageIndexNV' => {
    'argdata' => [
      [
        'shadertype',
        'GLenum '
      ]
    ],
    'binding_name' => 'glGetStageIndexNV',
    'feature' => 'GL_NV_command_list',
    'glewImpl' => '__glewGetStageIndexNV',
    'glewtype' => 'fun',
    'restype' => 'GLushort',
    'signature' => 'GLenum shadertype'
  },
  'glGetString' => {
    'feature' => 'GL_VERSION_1_1',
    'glewtype' => 'fun',
    'restype' => 'const GLubyte *',
    'signature' => 'GLenum name'
  },
  'glGetSubroutineIndex' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'shadertype',
        'GLenum '
      ],
      [
        'name',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glGetSubroutineIndex_c',
    'feature' => 'GL_ARB_shader_subroutine',
    'glewImpl' => '__glewGetSubroutineIndex',
    'glewtype' => 'fun',
    'restype' => 'GLuint',
    'signature' => 'GLuint program, GLenum shadertype, const GLchar* name'
  },
  'glGetSubroutineUniformLocation' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'shadertype',
        'GLenum '
      ],
      [
        'name',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glGetSubroutineUniformLocation_c',
    'feature' => 'GL_ARB_shader_subroutine',
    'glewImpl' => '__glewGetSubroutineUniformLocation',
    'glewtype' => 'fun',
    'restype' => 'GLint',
    'signature' => 'GLuint program, GLenum shadertype, const GLchar* name'
  },
  'glGetSynciv' => {
    'argdata' => [
      [
        'myGLsync',
        'GLsync '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'values',
        'GLint *'
      ]
    ],
    'binding_name' => 'glGetSynciv_c',
    'feature' => 'GL_ARB_sync',
    'glewImpl' => '__glewGetSynciv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsync GLsync,GLenum pname,GLsizei bufSize,GLsizei* length, GLint *values'
  },
  'glGetSyncivAPPLE' => {
    'argdata' => [
      [
        'myGLsync',
        'GLsync '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'values',
        'GLint *'
      ]
    ],
    'binding_name' => 'glGetSyncivAPPLE_c',
    'feature' => 'GL_APPLE_sync',
    'glewImpl' => '__glewGetSyncivAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsync GLsync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint *values'
  },
  'glGetTexBumpParameterfvATI' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glGetTexBumpParameterfvATI_c',
    'feature' => 'GL_ATI_envmap_bumpmap',
    'glewImpl' => '__glewGetTexBumpParameterfvATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfloat *param'
  },
  'glGetTexBumpParameterivATI' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint *'
      ]
    ],
    'binding_name' => 'glGetTexBumpParameterivATI_c',
    'feature' => 'GL_ATI_envmap_bumpmap',
    'glewImpl' => '__glewGetTexBumpParameterivATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint *param'
  },
  'glGetTexEnvfv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glGetTexEnvfv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLfloat *params'
  },
  'glGetTexEnviv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint *'
      ]
    ],
    'binding_name' => 'glGetTexEnviv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint *params'
  },
  'glGetTexEnvxv' => {
    'argdata' => [
      [
        'env',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfixed* '
      ]
    ],
    'binding_name' => 'glGetTexEnvxv_c',
    'feature' => 'GL_REGAL_ES1_1_compatibility',
    'glewImpl' => '__glewGetTexEnvxv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum env, GLenum pname, GLfixed* params'
  },
  'glGetTexFilterFuncSGIS' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'filter',
        'GLenum '
      ],
      [
        'weights',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetTexFilterFuncSGIS_c',
    'feature' => 'GL_SGIS_texture_filter4',
    'glewImpl' => '__glewGetTexFilterFuncSGIS',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum filter, GLfloat* weights'
  },
  'glGetTexGendv' => {
    'argdata' => [
      [
        'coord',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLdouble *'
      ]
    ],
    'binding_name' => 'glGetTexGendv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum coord, GLenum pname, GLdouble *params'
  },
  'glGetTexGenfv' => {
    'argdata' => [
      [
        'coord',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glGetTexGenfv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum coord, GLenum pname, GLfloat *params'
  },
  'glGetTexGeniv' => {
    'argdata' => [
      [
        'coord',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint *'
      ]
    ],
    'binding_name' => 'glGetTexGeniv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum coord, GLenum pname, GLint *params'
  },
  'glGetTexImage' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'void *'
      ]
    ],
    'binding_name' => 'glGetTexImage_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLenum format, GLenum type, void *pixels'
  },
  'glGetTexLevelParameterfv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glGetTexLevelParameterfv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLenum pname, GLfloat *params'
  },
  'glGetTexLevelParameteriv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint *'
      ]
    ],
    'binding_name' => 'glGetTexLevelParameteriv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLenum pname, GLint *params'
  },
  'glGetTexParameterIiv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetTexParameterIiv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewGetTexParameterIiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint* params'
  },
  'glGetTexParameterIivEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint *'
      ]
    ],
    'binding_name' => 'glGetTexParameterIivEXT_c',
    'feature' => 'GL_EXT_texture_integer',
    'glewImpl' => '__glewGetTexParameterIivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint *params'
  },
  'glGetTexParameterIuiv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGetTexParameterIuiv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewGetTexParameterIuiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLuint* params'
  },
  'glGetTexParameterIuivEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLuint *'
      ]
    ],
    'binding_name' => 'glGetTexParameterIuivEXT_c',
    'feature' => 'GL_EXT_texture_integer',
    'glewImpl' => '__glewGetTexParameterIuivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLuint *params'
  },
  'glGetTexParameterPointervAPPLE' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'void **'
      ]
    ],
    'binding_name' => 'glGetTexParameterPointervAPPLE_c',
    'feature' => 'GL_APPLE_texture_range',
    'glewImpl' => '__glewGetTexParameterPointervAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, void **params'
  },
  'glGetTexParameterfv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glGetTexParameterfv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLfloat *params'
  },
  'glGetTexParameteriv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint *'
      ]
    ],
    'binding_name' => 'glGetTexParameteriv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint *params'
  },
  'glGetTexParameterxv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfixed* '
      ]
    ],
    'binding_name' => 'glGetTexParameterxv_c',
    'feature' => 'GL_REGAL_ES1_1_compatibility',
    'glewImpl' => '__glewGetTexParameterxv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLfixed* params'
  },
  'glGetTextureHandleARB' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ]
    ],
    'binding_name' => 'glGetTextureHandleARB',
    'feature' => 'GL_ARB_bindless_texture',
    'glewImpl' => '__glewGetTextureHandleARB',
    'glewtype' => 'fun',
    'restype' => 'GLuint64',
    'signature' => 'GLuint texture'
  },
  'glGetTextureHandleNV' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ]
    ],
    'binding_name' => 'glGetTextureHandleNV',
    'feature' => 'GL_NV_bindless_texture',
    'glewImpl' => '__glewGetTextureHandleNV',
    'glewtype' => 'fun',
    'restype' => 'GLuint64',
    'signature' => 'GLuint texture'
  },
  'glGetTextureImage' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'pixels',
        'void *'
      ]
    ],
    'binding_name' => 'glGetTextureImage_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGetTextureImage',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels'
  },
  'glGetTextureImageEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'void *'
      ]
    ],
    'binding_name' => 'glGetTextureImageEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetTextureImageEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels'
  },
  'glGetTextureLevelParameterfv' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetTextureLevelParameterfv_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGetTextureLevelParameterfv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLint level, GLenum pname, GLfloat* params'
  },
  'glGetTextureLevelParameterfvEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetTextureLevelParameterfvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetTextureLevelParameterfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat* params'
  },
  'glGetTextureLevelParameteriv' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetTextureLevelParameteriv_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGetTextureLevelParameteriv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLint level, GLenum pname, GLint* params'
  },
  'glGetTextureLevelParameterivEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetTextureLevelParameterivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetTextureLevelParameterivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLint level, GLenum pname, GLint* params'
  },
  'glGetTextureParameterIiv' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetTextureParameterIiv_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGetTextureParameterIiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum pname, GLint* params'
  },
  'glGetTextureParameterIivEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetTextureParameterIivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetTextureParameterIivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLenum pname, GLint* params'
  },
  'glGetTextureParameterIuiv' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGetTextureParameterIuiv_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGetTextureParameterIuiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum pname, GLuint* params'
  },
  'glGetTextureParameterIuivEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGetTextureParameterIuivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetTextureParameterIuivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLenum pname, GLuint* params'
  },
  'glGetTextureParameterfv' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetTextureParameterfv_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGetTextureParameterfv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum pname, GLfloat* params'
  },
  'glGetTextureParameterfvEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetTextureParameterfvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetTextureParameterfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLenum pname, GLfloat* params'
  },
  'glGetTextureParameteriv' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetTextureParameteriv_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGetTextureParameteriv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum pname, GLint* params'
  },
  'glGetTextureParameterivEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetTextureParameterivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetTextureParameterivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLenum pname, GLint* params'
  },
  'glGetTextureSamplerHandleARB' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'sampler',
        'GLuint '
      ]
    ],
    'binding_name' => 'glGetTextureSamplerHandleARB',
    'feature' => 'GL_ARB_bindless_texture',
    'glewImpl' => '__glewGetTextureSamplerHandleARB',
    'glewtype' => 'fun',
    'restype' => 'GLuint64',
    'signature' => 'GLuint texture, GLuint sampler'
  },
  'glGetTextureSamplerHandleNV' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'sampler',
        'GLuint '
      ]
    ],
    'binding_name' => 'glGetTextureSamplerHandleNV',
    'feature' => 'GL_NV_bindless_texture',
    'glewImpl' => '__glewGetTextureSamplerHandleNV',
    'glewtype' => 'fun',
    'restype' => 'GLuint64',
    'signature' => 'GLuint texture, GLuint sampler'
  },
  'glGetTextureSubImage' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'pixels',
        'void *'
      ]
    ],
    'binding_name' => 'glGetTextureSubImage_c',
    'feature' => 'GL_ARB_get_texture_sub_image',
    'glewImpl' => '__glewGetTextureSubImage',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels'
  },
  'glGetTrackMatrixivNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'address',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetTrackMatrixivNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewGetTrackMatrixivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint address, GLenum pname, GLint* params'
  },
  'glGetTransformFeedbackVarying' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei * '
      ],
      [
        'size',
        'GLsizei * '
      ],
      [
        'type',
        'GLenum * '
      ],
      [
        'name',
        'GLchar * '
      ]
    ],
    'binding_name' => 'glGetTransformFeedbackVarying_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewGetTransformFeedbackVarying',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name'
  },
  'glGetTransformFeedbackVaryingEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'size',
        'GLsizei *'
      ],
      [
        'type',
        'GLenum *'
      ],
      [
        'name',
        'GLchar *'
      ]
    ],
    'binding_name' => 'glGetTransformFeedbackVaryingEXT_c',
    'feature' => 'GL_EXT_transform_feedback',
    'glewImpl' => '__glewGetTransformFeedbackVaryingEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei *size, GLenum *type, GLchar *name'
  },
  'glGetTransformFeedbackVaryingNV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'location',
        'GLint *'
      ]
    ],
    'binding_name' => 'glGetTransformFeedbackVaryingNV_c',
    'feature' => 'GL_NV_transform_feedback',
    'glewImpl' => '__glewGetTransformFeedbackVaryingNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLuint index, GLint *location'
  },
  'glGetTransformFeedbacki64_v' => {
    'argdata' => [
      [
        'xfb',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'param',
        'GLint64* '
      ]
    ],
    'binding_name' => 'glGetTransformFeedbacki64_v_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGetTransformFeedbacki64_v',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint xfb, GLenum pname, GLuint index, GLint64* param'
  },
  'glGetTransformFeedbacki_v' => {
    'argdata' => [
      [
        'xfb',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'param',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetTransformFeedbacki_v_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGetTransformFeedbacki_v',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint xfb, GLenum pname, GLuint index, GLint* param'
  },
  'glGetTransformFeedbackiv' => {
    'argdata' => [
      [
        'xfb',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetTransformFeedbackiv_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGetTransformFeedbackiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint xfb, GLenum pname, GLint* param'
  },
  'glGetTranslatedShaderSourceANGLE' => {
    'argdata' => [
      [
        'shader',
        'GLuint '
      ],
      [
        'bufsize',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'source',
        'GLchar* '
      ]
    ],
    'binding_name' => 'glGetTranslatedShaderSourceANGLE_c',
    'feature' => 'GL_ANGLE_translated_shader_source',
    'glewImpl' => '__glewGetTranslatedShaderSourceANGLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint shader, GLsizei bufsize, GLsizei* length, GLchar* source'
  },
  'glGetUniformBlockIndex' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'uniformBlockName',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glGetUniformBlockIndex_c',
    'feature' => 'GL_ARB_uniform_buffer_object',
    'glewImpl' => '__glewGetUniformBlockIndex',
    'glewtype' => 'fun',
    'restype' => 'GLuint',
    'signature' => 'GLuint program, const GLchar* uniformBlockName'
  },
  'glGetUniformBufferSizeEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ]
    ],
    'binding_name' => 'glGetUniformBufferSizeEXT',
    'feature' => 'GL_EXT_bindable_uniform',
    'glewImpl' => '__glewGetUniformBufferSizeEXT',
    'glewtype' => 'fun',
    'restype' => 'GLint',
    'signature' => 'GLuint program, GLint location'
  },
  'glGetUniformIndices' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'uniformCount',
        'GLsizei '
      ],
      [
        'uniformNames',
        'const GLchar* const * '
      ],
      [
        'uniformIndices',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGetUniformIndices_c',
    'feature' => 'GL_ARB_uniform_buffer_object',
    'glewImpl' => '__glewGetUniformIndices',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLsizei uniformCount, const GLchar* const * uniformNames, GLuint* uniformIndices'
  },
  'glGetUniformLocation' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'name',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glGetUniformLocation_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewGetUniformLocation',
    'glewtype' => 'fun',
    'restype' => 'GLint',
    'signature' => 'GLuint program, const GLchar* name'
  },
  'glGetUniformLocationARB' => {
    'argdata' => [
      [
        'programObj',
        'GLhandleARB '
      ],
      [
        'name',
        'const GLcharARB* '
      ]
    ],
    'binding_name' => 'glGetUniformLocationARB_c',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewGetUniformLocationARB',
    'glewtype' => 'fun',
    'restype' => 'GLint',
    'signature' => 'GLhandleARB programObj, const GLcharARB* name'
  },
  'glGetUniformOffsetEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ]
    ],
    'binding_name' => 'glGetUniformOffsetEXT',
    'feature' => 'GL_EXT_bindable_uniform',
    'glewImpl' => '__glewGetUniformOffsetEXT',
    'glewtype' => 'fun',
    'restype' => 'GLintptr',
    'signature' => 'GLuint program, GLint location'
  },
  'glGetUniformSubroutineuiv' => {
    'argdata' => [
      [
        'shadertype',
        'GLenum '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'params',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGetUniformSubroutineuiv_c',
    'feature' => 'GL_ARB_shader_subroutine',
    'glewImpl' => '__glewGetUniformSubroutineuiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum shadertype, GLint location, GLuint* params'
  },
  'glGetUniformdv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'params',
        'GLdouble* '
      ]
    ],
    'binding_name' => 'glGetUniformdv_c',
    'feature' => 'GL_ARB_gpu_shader_fp64',
    'glewImpl' => '__glewGetUniformdv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLdouble* params'
  },
  'glGetUniformfv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetUniformfv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewGetUniformfv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLfloat* params'
  },
  'glGetUniformfvARB' => {
    'argdata' => [
      [
        'programObj',
        'GLhandleARB '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetUniformfvARB_c',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewGetUniformfvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhandleARB programObj, GLint location, GLfloat* params'
  },
  'glGetUniformi64vARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'params',
        'GLint64* '
      ]
    ],
    'binding_name' => 'glGetUniformi64vARB_c',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewGetUniformi64vARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLint64* params'
  },
  'glGetUniformi64vNV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'params',
        'GLint64EXT* '
      ]
    ],
    'binding_name' => 'glGetUniformi64vNV_c',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewGetUniformi64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLint64EXT* params'
  },
  'glGetUniformiv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetUniformiv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewGetUniformiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLint* params'
  },
  'glGetUniformivARB' => {
    'argdata' => [
      [
        'programObj',
        'GLhandleARB '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetUniformivARB_c',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewGetUniformivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhandleARB programObj, GLint location, GLint* params'
  },
  'glGetUniformui64vARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'params',
        'GLuint64* '
      ]
    ],
    'binding_name' => 'glGetUniformui64vARB_c',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewGetUniformui64vARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLuint64* params'
  },
  'glGetUniformui64vNV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'params',
        'GLuint64EXT* '
      ]
    ],
    'binding_name' => 'glGetUniformui64vNV_c',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewGetUniformui64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLuint64EXT* params'
  },
  'glGetUniformuiv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'params',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGetUniformuiv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewGetUniformuiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLuint* params'
  },
  'glGetUniformuivEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'params',
        'GLuint *'
      ]
    ],
    'binding_name' => 'glGetUniformuivEXT_c',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewGetUniformuivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLuint *params'
  },
  'glGetUnsignedBytei_vEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'data',
        'GLubyte* '
      ]
    ],
    'binding_name' => 'glGetUnsignedBytei_vEXT_c',
    'feature' => 'GL_EXT_memory_object',
    'glewImpl' => '__glewGetUnsignedBytei_vEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLubyte* data'
  },
  'glGetUnsignedBytevEXT' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'data',
        'GLubyte* '
      ]
    ],
    'binding_name' => 'glGetUnsignedBytevEXT_c',
    'feature' => 'GL_EXT_memory_object',
    'glewImpl' => '__glewGetUnsignedBytevEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLubyte* data'
  },
  'glGetVariantArrayObjectfvATI' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetVariantArrayObjectfvATI_c',
    'feature' => 'GL_ATI_vertex_array_object',
    'glewImpl' => '__glewGetVariantArrayObjectfvATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum pname, GLfloat* params'
  },
  'glGetVariantArrayObjectivATI' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetVariantArrayObjectivATI_c',
    'feature' => 'GL_ATI_vertex_array_object',
    'glewImpl' => '__glewGetVariantArrayObjectivATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum pname, GLint* params'
  },
  'glGetVariantBooleanvEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'value',
        'GLenum '
      ],
      [
        'data',
        'GLboolean *'
      ]
    ],
    'binding_name' => 'glGetVariantBooleanvEXT_c',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewGetVariantBooleanvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum value, GLboolean *data'
  },
  'glGetVariantFloatvEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'value',
        'GLenum '
      ],
      [
        'data',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glGetVariantFloatvEXT_c',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewGetVariantFloatvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum value, GLfloat *data'
  },
  'glGetVariantIntegervEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'value',
        'GLenum '
      ],
      [
        'data',
        'GLint *'
      ]
    ],
    'binding_name' => 'glGetVariantIntegervEXT_c',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewGetVariantIntegervEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum value, GLint *data'
  },
  'glGetVariantPointervEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'value',
        'GLenum '
      ],
      [
        'data',
        'void **'
      ]
    ],
    'binding_name' => 'glGetVariantPointervEXT_c',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewGetVariantPointervEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum value, void **data'
  },
  'glGetVaryingLocationNV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'name',
        'const GLchar *'
      ]
    ],
    'binding_name' => 'glGetVaryingLocationNV_c',
    'feature' => 'GL_NV_transform_feedback',
    'glewImpl' => '__glewGetVaryingLocationNV',
    'glewtype' => 'fun',
    'restype' => 'GLint',
    'signature' => 'GLuint program, const GLchar *name'
  },
  'glGetVectorOperationSGIX' => {
    'argdata' => [
      [
        'operation',
        'GLenum '
      ]
    ],
    'binding_name' => 'glGetVectorOperationSGIX',
    'feature' => 'GL_SGIX_vector_ops',
    'glewImpl' => '__glewGetVectorOperationSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum operation'
  },
  'glGetVertexArrayIndexed64iv' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint64* '
      ]
    ],
    'binding_name' => 'glGetVertexArrayIndexed64iv_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGetVertexArrayIndexed64iv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint index, GLenum pname, GLint64* param'
  },
  'glGetVertexArrayIndexediv' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetVertexArrayIndexediv_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGetVertexArrayIndexediv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint index, GLenum pname, GLint* param'
  },
  'glGetVertexArrayIntegeri_vEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetVertexArrayIntegeri_vEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetVertexArrayIntegeri_vEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint index, GLenum pname, GLint* param'
  },
  'glGetVertexArrayIntegervEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetVertexArrayIntegervEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetVertexArrayIntegervEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLenum pname, GLint* param'
  },
  'glGetVertexArrayPointeri_vEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'void** '
      ]
    ],
    'binding_name' => 'glGetVertexArrayPointeri_vEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetVertexArrayPointeri_vEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint index, GLenum pname, void** param'
  },
  'glGetVertexArrayPointervEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'void** '
      ]
    ],
    'binding_name' => 'glGetVertexArrayPointervEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewGetVertexArrayPointervEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLenum pname, void** param'
  },
  'glGetVertexArrayiv' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetVertexArrayiv_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewGetVertexArrayiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLenum pname, GLint* param'
  },
  'glGetVertexAttribArrayObjectfvATI' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetVertexAttribArrayObjectfvATI_c',
    'feature' => 'GL_ATI_vertex_attrib_array_object',
    'glewImpl' => '__glewGetVertexAttribArrayObjectfvATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname, GLfloat* params'
  },
  'glGetVertexAttribArrayObjectivATI' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetVertexAttribArrayObjectivATI_c',
    'feature' => 'GL_ATI_vertex_attrib_array_object',
    'glewImpl' => '__glewGetVertexAttribArrayObjectivATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname, GLint* params'
  },
  'glGetVertexAttribIiv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetVertexAttribIiv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewGetVertexAttribIiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname, GLint* params'
  },
  'glGetVertexAttribIivEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint *'
      ]
    ],
    'binding_name' => 'glGetVertexAttribIivEXT_c',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewGetVertexAttribIivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname, GLint *params'
  },
  'glGetVertexAttribIuiv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGetVertexAttribIuiv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewGetVertexAttribIuiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname, GLuint* params'
  },
  'glGetVertexAttribIuivEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLuint *'
      ]
    ],
    'binding_name' => 'glGetVertexAttribIuivEXT_c',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewGetVertexAttribIuivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname, GLuint *params'
  },
  'glGetVertexAttribLdv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLdouble* '
      ]
    ],
    'binding_name' => 'glGetVertexAttribLdv_c',
    'feature' => 'GL_ARB_vertex_attrib_64bit',
    'glewImpl' => '__glewGetVertexAttribLdv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname, GLdouble* params'
  },
  'glGetVertexAttribLdvEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLdouble* '
      ]
    ],
    'binding_name' => 'glGetVertexAttribLdvEXT_c',
    'feature' => 'GL_EXT_vertex_attrib_64bit',
    'glewImpl' => '__glewGetVertexAttribLdvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname, GLdouble* params'
  },
  'glGetVertexAttribLi64vNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint64EXT* '
      ]
    ],
    'binding_name' => 'glGetVertexAttribLi64vNV_c',
    'feature' => 'GL_NV_vertex_attrib_integer_64bit',
    'glewImpl' => '__glewGetVertexAttribLi64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname, GLint64EXT* params'
  },
  'glGetVertexAttribLui64vARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLuint64EXT* '
      ]
    ],
    'binding_name' => 'glGetVertexAttribLui64vARB_c',
    'feature' => 'GL_ARB_bindless_texture',
    'glewImpl' => '__glewGetVertexAttribLui64vARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname, GLuint64EXT* params'
  },
  'glGetVertexAttribLui64vNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLuint64EXT* '
      ]
    ],
    'binding_name' => 'glGetVertexAttribLui64vNV_c',
    'feature' => 'GL_NV_vertex_attrib_integer_64bit',
    'glewImpl' => '__glewGetVertexAttribLui64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname, GLuint64EXT* params'
  },
  'glGetVertexAttribPointerv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'pointer',
        'void** '
      ]
    ],
    'binding_name' => 'glGetVertexAttribPointerv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewGetVertexAttribPointerv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname, void** pointer'
  },
  'glGetVertexAttribPointervARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'pointer',
        'void** '
      ]
    ],
    'binding_name' => 'glGetVertexAttribPointervARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewGetVertexAttribPointervARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname, void** pointer'
  },
  'glGetVertexAttribPointervNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'pointer',
        'void** '
      ]
    ],
    'binding_name' => 'glGetVertexAttribPointervNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewGetVertexAttribPointervNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname, void** pointer'
  },
  'glGetVertexAttribdv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLdouble* '
      ]
    ],
    'binding_name' => 'glGetVertexAttribdv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewGetVertexAttribdv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname, GLdouble* params'
  },
  'glGetVertexAttribdvARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLdouble* '
      ]
    ],
    'binding_name' => 'glGetVertexAttribdvARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewGetVertexAttribdvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname, GLdouble* params'
  },
  'glGetVertexAttribdvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLdouble* '
      ]
    ],
    'binding_name' => 'glGetVertexAttribdvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewGetVertexAttribdvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname, GLdouble* params'
  },
  'glGetVertexAttribfv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetVertexAttribfv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewGetVertexAttribfv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname, GLfloat* params'
  },
  'glGetVertexAttribfvARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetVertexAttribfvARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewGetVertexAttribfvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname, GLfloat* params'
  },
  'glGetVertexAttribfvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetVertexAttribfvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewGetVertexAttribfvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname, GLfloat* params'
  },
  'glGetVertexAttribiv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetVertexAttribiv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewGetVertexAttribiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname, GLint* params'
  },
  'glGetVertexAttribivARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetVertexAttribivARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewGetVertexAttribivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname, GLint* params'
  },
  'glGetVertexAttribivNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetVertexAttribivNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewGetVertexAttribivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname, GLint* params'
  },
  'glGetVideoCaptureStreamdvNV' => {
    'argdata' => [
      [
        'video_capture_slot',
        'GLuint '
      ],
      [
        'stream',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLdouble* '
      ]
    ],
    'binding_name' => 'glGetVideoCaptureStreamdvNV_c',
    'feature' => 'GL_NV_video_capture',
    'glewImpl' => '__glewGetVideoCaptureStreamdvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble* params'
  },
  'glGetVideoCaptureStreamfvNV' => {
    'argdata' => [
      [
        'video_capture_slot',
        'GLuint '
      ],
      [
        'stream',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetVideoCaptureStreamfvNV_c',
    'feature' => 'GL_NV_video_capture',
    'glewImpl' => '__glewGetVideoCaptureStreamfvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat* params'
  },
  'glGetVideoCaptureStreamivNV' => {
    'argdata' => [
      [
        'video_capture_slot',
        'GLuint '
      ],
      [
        'stream',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetVideoCaptureStreamivNV_c',
    'feature' => 'GL_NV_video_capture',
    'glewImpl' => '__glewGetVideoCaptureStreamivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint video_capture_slot, GLuint stream, GLenum pname, GLint* params'
  },
  'glGetVideoCaptureivNV' => {
    'argdata' => [
      [
        'video_capture_slot',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetVideoCaptureivNV_c',
    'feature' => 'GL_NV_video_capture',
    'glewImpl' => '__glewGetVideoCaptureivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint video_capture_slot, GLenum pname, GLint* params'
  },
  'glGetVideoi64vNV' => {
    'argdata' => [
      [
        'video_slot',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint64EXT* '
      ]
    ],
    'binding_name' => 'glGetVideoi64vNV_c',
    'feature' => 'GL_NV_present_video',
    'glewImpl' => '__glewGetVideoi64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint video_slot, GLenum pname, GLint64EXT* params'
  },
  'glGetVideoivNV' => {
    'argdata' => [
      [
        'video_slot',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetVideoivNV_c',
    'feature' => 'GL_NV_present_video',
    'glewImpl' => '__glewGetVideoivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint video_slot, GLenum pname, GLint* params'
  },
  'glGetVideoui64vNV' => {
    'argdata' => [
      [
        'video_slot',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLuint64EXT* '
      ]
    ],
    'binding_name' => 'glGetVideoui64vNV_c',
    'feature' => 'GL_NV_present_video',
    'glewImpl' => '__glewGetVideoui64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint video_slot, GLenum pname, GLuint64EXT* params'
  },
  'glGetVideouivNV' => {
    'argdata' => [
      [
        'video_slot',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGetVideouivNV_c',
    'feature' => 'GL_NV_present_video',
    'glewImpl' => '__glewGetVideouivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint video_slot, GLenum pname, GLuint* params'
  },
  'glGetVkProcAddrNV' => {
    'argdata' => [
      [
        'name',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glGetVkProcAddrNV_c',
    'feature' => 'GL_NV_draw_vulkan_image',
    'glewImpl' => '__glewGetVkProcAddrNV',
    'glewtype' => 'fun',
    'restype' => 'GLVULKANPROCNV',
    'signature' => 'const GLchar* name'
  },
  'glGetnColorTableARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'table',
        'void* '
      ]
    ],
    'binding_name' => 'glGetnColorTableARB_c',
    'feature' => 'GL_ARB_robustness',
    'glewImpl' => '__glewGetnColorTableARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table'
  },
  'glGetnCompressedTexImage' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'lod',
        'GLint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'pixels',
        'GLvoid *'
      ]
    ],
    'binding_name' => 'glGetnCompressedTexImage_c',
    'feature' => 'GL_VERSION_4_5',
    'glewImpl' => '__glewGetnCompressedTexImage',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint lod, GLsizei bufSize, GLvoid *pixels'
  },
  'glGetnCompressedTexImageARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'lod',
        'GLint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'img',
        'void* '
      ]
    ],
    'binding_name' => 'glGetnCompressedTexImageARB_c',
    'feature' => 'GL_ARB_robustness',
    'glewImpl' => '__glewGetnCompressedTexImageARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint lod, GLsizei bufSize, void* img'
  },
  'glGetnConvolutionFilterARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'image',
        'void* '
      ]
    ],
    'binding_name' => 'glGetnConvolutionFilterARB_c',
    'feature' => 'GL_ARB_robustness',
    'glewImpl' => '__glewGetnConvolutionFilterARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image'
  },
  'glGetnHistogramARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'reset',
        'GLboolean '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'values',
        'void* '
      ]
    ],
    'binding_name' => 'glGetnHistogramARB_c',
    'feature' => 'GL_ARB_robustness',
    'glewImpl' => '__glewGetnHistogramARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values'
  },
  'glGetnMapdvARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'query',
        'GLenum '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'v',
        'GLdouble* '
      ]
    ],
    'binding_name' => 'glGetnMapdvARB_c',
    'feature' => 'GL_ARB_robustness',
    'glewImpl' => '__glewGetnMapdvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum query, GLsizei bufSize, GLdouble* v'
  },
  'glGetnMapfvARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'query',
        'GLenum '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'v',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetnMapfvARB_c',
    'feature' => 'GL_ARB_robustness',
    'glewImpl' => '__glewGetnMapfvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum query, GLsizei bufSize, GLfloat* v'
  },
  'glGetnMapivARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'query',
        'GLenum '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'v',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetnMapivARB_c',
    'feature' => 'GL_ARB_robustness',
    'glewImpl' => '__glewGetnMapivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum query, GLsizei bufSize, GLint* v'
  },
  'glGetnMinmaxARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'reset',
        'GLboolean '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'values',
        'void* '
      ]
    ],
    'binding_name' => 'glGetnMinmaxARB_c',
    'feature' => 'GL_ARB_robustness',
    'glewImpl' => '__glewGetnMinmaxARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values'
  },
  'glGetnPixelMapfvARB' => {
    'argdata' => [
      [
        'map',
        'GLenum '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'values',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetnPixelMapfvARB_c',
    'feature' => 'GL_ARB_robustness',
    'glewImpl' => '__glewGetnPixelMapfvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum map, GLsizei bufSize, GLfloat* values'
  },
  'glGetnPixelMapuivARB' => {
    'argdata' => [
      [
        'map',
        'GLenum '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'values',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGetnPixelMapuivARB_c',
    'feature' => 'GL_ARB_robustness',
    'glewImpl' => '__glewGetnPixelMapuivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum map, GLsizei bufSize, GLuint* values'
  },
  'glGetnPixelMapusvARB' => {
    'argdata' => [
      [
        'map',
        'GLenum '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'values',
        'GLushort* '
      ]
    ],
    'binding_name' => 'glGetnPixelMapusvARB_c',
    'feature' => 'GL_ARB_robustness',
    'glewImpl' => '__glewGetnPixelMapusvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum map, GLsizei bufSize, GLushort* values'
  },
  'glGetnPolygonStippleARB' => {
    'argdata' => [
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'pattern',
        'GLubyte* '
      ]
    ],
    'binding_name' => 'glGetnPolygonStippleARB_c',
    'feature' => 'GL_ARB_robustness',
    'glewImpl' => '__glewGetnPolygonStippleARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei bufSize, GLubyte* pattern'
  },
  'glGetnSeparableFilterARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'rowBufSize',
        'GLsizei '
      ],
      [
        'row',
        'void* '
      ],
      [
        'columnBufSize',
        'GLsizei '
      ],
      [
        'column',
        'void*'
      ],
      [
        'span',
        'void*'
      ]
    ],
    'binding_name' => 'glGetnSeparableFilterARB_c',
    'feature' => 'GL_ARB_robustness',
    'glewImpl' => '__glewGetnSeparableFilterARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void*column, void*span'
  },
  'glGetnTexImage' => {
    'argdata' => [
      [
        'tex',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'pixels',
        'GLvoid *'
      ]
    ],
    'binding_name' => 'glGetnTexImage_c',
    'feature' => 'GL_VERSION_4_5',
    'glewImpl' => '__glewGetnTexImage',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum tex, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *pixels'
  },
  'glGetnTexImageARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'img',
        'void* '
      ]
    ],
    'binding_name' => 'glGetnTexImageARB_c',
    'feature' => 'GL_ARB_robustness',
    'glewImpl' => '__glewGetnTexImageARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* img'
  },
  'glGetnUniformdv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'params',
        'GLdouble *'
      ]
    ],
    'binding_name' => 'glGetnUniformdv_c',
    'feature' => 'GL_VERSION_4_5',
    'glewImpl' => '__glewGetnUniformdv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei bufSize, GLdouble *params'
  },
  'glGetnUniformdvARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'params',
        'GLdouble* '
      ]
    ],
    'binding_name' => 'glGetnUniformdvARB_c',
    'feature' => 'GL_ARB_robustness',
    'glewImpl' => '__glewGetnUniformdvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei bufSize, GLdouble* params'
  },
  'glGetnUniformfv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetnUniformfv_c',
    'feature' => 'GL_KHR_robustness',
    'glewImpl' => '__glewGetnUniformfv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei bufSize, GLfloat* params'
  },
  'glGetnUniformfvARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glGetnUniformfvARB_c',
    'feature' => 'GL_ARB_robustness',
    'glewImpl' => '__glewGetnUniformfvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei bufSize, GLfloat* params'
  },
  'glGetnUniformi64vARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'params',
        'GLint64* '
      ]
    ],
    'binding_name' => 'glGetnUniformi64vARB_c',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewGetnUniformi64vARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei bufSize, GLint64* params'
  },
  'glGetnUniformiv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetnUniformiv_c',
    'feature' => 'GL_KHR_robustness',
    'glewImpl' => '__glewGetnUniformiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei bufSize, GLint* params'
  },
  'glGetnUniformivARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glGetnUniformivARB_c',
    'feature' => 'GL_ARB_robustness',
    'glewImpl' => '__glewGetnUniformivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei bufSize, GLint* params'
  },
  'glGetnUniformui64vARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'params',
        'GLuint64* '
      ]
    ],
    'binding_name' => 'glGetnUniformui64vARB_c',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewGetnUniformui64vARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei bufSize, GLuint64* params'
  },
  'glGetnUniformuiv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'params',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGetnUniformuiv_c',
    'feature' => 'GL_KHR_robustness',
    'glewImpl' => '__glewGetnUniformuiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei bufSize, GLuint* params'
  },
  'glGetnUniformuivARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'params',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glGetnUniformuivARB_c',
    'feature' => 'GL_ARB_robustness',
    'glewImpl' => '__glewGetnUniformuivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei bufSize, GLuint* params'
  },
  'glGlobalAlphaFactorbSUN' => {
    'argdata' => [
      [
        'factor',
        'GLbyte '
      ]
    ],
    'binding_name' => 'glGlobalAlphaFactorbSUN',
    'feature' => 'GL_SUN_global_alpha',
    'glewImpl' => '__glewGlobalAlphaFactorbSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLbyte factor'
  },
  'glGlobalAlphaFactordSUN' => {
    'argdata' => [
      [
        'factor',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glGlobalAlphaFactordSUN',
    'feature' => 'GL_SUN_global_alpha',
    'glewImpl' => '__glewGlobalAlphaFactordSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble factor'
  },
  'glGlobalAlphaFactorfSUN' => {
    'argdata' => [
      [
        'factor',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glGlobalAlphaFactorfSUN',
    'feature' => 'GL_SUN_global_alpha',
    'glewImpl' => '__glewGlobalAlphaFactorfSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat factor'
  },
  'glGlobalAlphaFactoriSUN' => {
    'argdata' => [
      [
        'factor',
        'GLint '
      ]
    ],
    'binding_name' => 'glGlobalAlphaFactoriSUN',
    'feature' => 'GL_SUN_global_alpha',
    'glewImpl' => '__glewGlobalAlphaFactoriSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint factor'
  },
  'glGlobalAlphaFactorsSUN' => {
    'argdata' => [
      [
        'factor',
        'GLshort '
      ]
    ],
    'binding_name' => 'glGlobalAlphaFactorsSUN',
    'feature' => 'GL_SUN_global_alpha',
    'glewImpl' => '__glewGlobalAlphaFactorsSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLshort factor'
  },
  'glGlobalAlphaFactorubSUN' => {
    'argdata' => [
      [
        'factor',
        'GLubyte '
      ]
    ],
    'binding_name' => 'glGlobalAlphaFactorubSUN',
    'feature' => 'GL_SUN_global_alpha',
    'glewImpl' => '__glewGlobalAlphaFactorubSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLubyte factor'
  },
  'glGlobalAlphaFactoruiSUN' => {
    'argdata' => [
      [
        'factor',
        'GLuint '
      ]
    ],
    'binding_name' => 'glGlobalAlphaFactoruiSUN',
    'feature' => 'GL_SUN_global_alpha',
    'glewImpl' => '__glewGlobalAlphaFactoruiSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint factor'
  },
  'glGlobalAlphaFactorusSUN' => {
    'argdata' => [
      [
        'factor',
        'GLushort '
      ]
    ],
    'binding_name' => 'glGlobalAlphaFactorusSUN',
    'feature' => 'GL_SUN_global_alpha',
    'glewImpl' => '__glewGlobalAlphaFactorusSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLushort factor'
  },
  'glHint' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glHint',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum mode'
  },
  'glHistogram' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'sink',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glHistogram',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewHistogram',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei width, GLenum internalformat, GLboolean sink'
  },
  'glHistogramEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'sink',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glHistogramEXT',
    'feature' => 'GL_EXT_histogram',
    'glewImpl' => '__glewHistogramEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei width, GLenum internalformat, GLboolean sink'
  },
  'glIglooInterfaceSGIX' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'void *'
      ]
    ],
    'binding_name' => 'glIglooInterfaceSGIX_c',
    'feature' => 'GL_SGIX_igloo_interface',
    'glewImpl' => '__glewIglooInterfaceSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, void *param'
  },
  'glImageTransformParameterfHP' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'const GLfloat '
      ]
    ],
    'binding_name' => 'glImageTransformParameterfHP',
    'feature' => 'GL_HP_image_transform',
    'glewImpl' => '__glewImageTransformParameterfHP',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLfloat param'
  },
  'glImageTransformParameterfvHP' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glImageTransformParameterfvHP_c',
    'feature' => 'GL_HP_image_transform',
    'glewImpl' => '__glewImageTransformParameterfvHP',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLfloat* params'
  },
  'glImageTransformParameteriHP' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'const GLint '
      ]
    ],
    'binding_name' => 'glImageTransformParameteriHP',
    'feature' => 'GL_HP_image_transform',
    'glewImpl' => '__glewImageTransformParameteriHP',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLint param'
  },
  'glImageTransformParameterivHP' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glImageTransformParameterivHP_c',
    'feature' => 'GL_HP_image_transform',
    'glewImpl' => '__glewImageTransformParameterivHP',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLint* params'
  },
  'glImportMemoryFdEXT' => {
    'argdata' => [
      [
        'memory',
        'GLuint '
      ],
      [
        'size',
        'GLuint64 '
      ],
      [
        'handleType',
        'GLenum '
      ],
      [
        'fd',
        'GLint '
      ]
    ],
    'binding_name' => 'glImportMemoryFdEXT',
    'feature' => 'GL_EXT_memory_object_fd',
    'glewImpl' => '__glewImportMemoryFdEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint memory, GLuint64 size, GLenum handleType, GLint fd'
  },
  'glImportMemoryWin32HandleEXT' => {
    'argdata' => [
      [
        'memory',
        'GLuint '
      ],
      [
        'size',
        'GLuint64 '
      ],
      [
        'handleType',
        'GLenum '
      ],
      [
        'handle',
        'void *'
      ]
    ],
    'binding_name' => 'glImportMemoryWin32HandleEXT_c',
    'feature' => 'GL_EXT_memory_object_win32',
    'glewImpl' => '__glewImportMemoryWin32HandleEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint memory, GLuint64 size, GLenum handleType, void *handle'
  },
  'glImportMemoryWin32NameEXT' => {
    'argdata' => [
      [
        'memory',
        'GLuint '
      ],
      [
        'size',
        'GLuint64 '
      ],
      [
        'handleType',
        'GLenum '
      ],
      [
        'name',
        'const void *'
      ]
    ],
    'binding_name' => 'glImportMemoryWin32NameEXT_c',
    'feature' => 'GL_EXT_memory_object_win32',
    'glewImpl' => '__glewImportMemoryWin32NameEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint memory, GLuint64 size, GLenum handleType, const void *name'
  },
  'glImportSemaphoreFdEXT' => {
    'argdata' => [
      [
        'semaphore',
        'GLuint '
      ],
      [
        'handleType',
        'GLenum '
      ],
      [
        'fd',
        'GLint '
      ]
    ],
    'binding_name' => 'glImportSemaphoreFdEXT',
    'feature' => 'GL_EXT_semaphore_fd',
    'glewImpl' => '__glewImportSemaphoreFdEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint semaphore, GLenum handleType, GLint fd'
  },
  'glImportSemaphoreWin32HandleEXT' => {
    'argdata' => [
      [
        'semaphore',
        'GLuint '
      ],
      [
        'handleType',
        'GLenum '
      ],
      [
        'handle',
        'void *'
      ]
    ],
    'binding_name' => 'glImportSemaphoreWin32HandleEXT_c',
    'feature' => 'GL_EXT_semaphore_win32',
    'glewImpl' => '__glewImportSemaphoreWin32HandleEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint semaphore, GLenum handleType, void *handle'
  },
  'glImportSemaphoreWin32NameEXT' => {
    'argdata' => [
      [
        'semaphore',
        'GLuint '
      ],
      [
        'handleType',
        'GLenum '
      ],
      [
        'name',
        'const void *'
      ]
    ],
    'binding_name' => 'glImportSemaphoreWin32NameEXT_c',
    'feature' => 'GL_EXT_semaphore_win32',
    'glewImpl' => '__glewImportSemaphoreWin32NameEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint semaphore, GLenum handleType, const void *name'
  },
  'glImportSyncEXT' => {
    'argdata' => [
      [
        'external_sync_type',
        'GLenum '
      ],
      [
        'external_sync',
        'GLintptr '
      ],
      [
        'flags',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glImportSyncEXT',
    'feature' => 'GL_EXT_x11_sync_object',
    'glewImpl' => '__glewImportSyncEXT',
    'glewtype' => 'fun',
    'restype' => 'GLsync',
    'signature' => 'GLenum external_sync_type, GLintptr external_sync, GLbitfield flags'
  },
  'glIndexFormatNV' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glIndexFormatNV',
    'feature' => 'GL_NV_vertex_buffer_unified_memory',
    'glewImpl' => '__glewIndexFormatNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLsizei stride'
  },
  'glIndexFuncEXT' => {
    'argdata' => [
      [
        'func',
        'GLenum '
      ],
      [
        'ref',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glIndexFuncEXT',
    'feature' => 'GL_EXT_index_func',
    'glewImpl' => '__glewIndexFuncEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum func, GLfloat ref'
  },
  'glIndexMask' => {
    'argdata' => [
      [
        'mask',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIndexMask',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint mask'
  },
  'glIndexMaterialEXT' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glIndexMaterialEXT',
    'feature' => 'GL_EXT_index_material',
    'glewImpl' => '__glewIndexMaterialEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum mode'
  },
  'glIndexPointer' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'const void *'
      ]
    ],
    'binding_name' => 'glIndexPointer_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLsizei stride, const void *pointer'
  },
  'glIndexPointerEXT' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'pointer',
        'const void *'
      ]
    ],
    'binding_name' => 'glIndexPointerEXT_c',
    'feature' => 'GL_EXT_vertex_array',
    'glewImpl' => '__glewIndexPointerEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLsizei stride, GLsizei count, const void *pointer'
  },
  'glIndexPointerListIBM' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLint '
      ],
      [
        'pointer',
        'const void** '
      ],
      [
        'ptrstride',
        'GLint '
      ]
    ],
    'binding_name' => 'glIndexPointerListIBM_c',
    'feature' => 'GL_IBM_vertex_array_lists',
    'glewImpl' => '__glewIndexPointerListIBM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLint stride, const void** pointer, GLint ptrstride'
  },
  'glIndexd' => {
    'argdata' => [
      [
        'c',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glIndexd',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble c'
  },
  'glIndexdv' => {
    'argdata' => [
      [
        'c',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glIndexdv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble *c'
  },
  'glIndexf' => {
    'argdata' => [
      [
        'c',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glIndexf',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat c'
  },
  'glIndexfv' => {
    'argdata' => [
      [
        'c',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glIndexfv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat *c'
  },
  'glIndexi' => {
    'argdata' => [
      [
        'c',
        'GLint '
      ]
    ],
    'binding_name' => 'glIndexi',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint c'
  },
  'glIndexiv' => {
    'argdata' => [
      [
        'c',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glIndexiv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLint *c'
  },
  'glIndexs' => {
    'argdata' => [
      [
        'c',
        'GLshort '
      ]
    ],
    'binding_name' => 'glIndexs',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLshort c'
  },
  'glIndexsv' => {
    'argdata' => [
      [
        'c',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glIndexsv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLshort *c'
  },
  'glIndexub' => {
    'argdata' => [
      [
        'c',
        'GLubyte '
      ]
    ],
    'binding_name' => 'glIndexub',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLubyte c'
  },
  'glIndexubv' => {
    'argdata' => [
      [
        'c',
        'const GLubyte *'
      ]
    ],
    'binding_name' => 'glIndexubv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLubyte *c'
  },
  'glInitNames' => {
    'binding_name' => 'glInitNames',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glInsertComponentEXT' => {
    'argdata' => [
      [
        'res',
        'GLuint '
      ],
      [
        'src',
        'GLuint '
      ],
      [
        'num',
        'GLuint '
      ]
    ],
    'binding_name' => 'glInsertComponentEXT',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewInsertComponentEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint res, GLuint src, GLuint num'
  },
  'glInsertEventMarkerEXT' => {
    'argdata' => [
      [
        'length',
        'GLsizei '
      ],
      [
        'marker',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glInsertEventMarkerEXT_c',
    'feature' => 'GL_EXT_debug_marker',
    'glewImpl' => '__glewInsertEventMarkerEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei length, const GLchar* marker'
  },
  'glInterleavedArrays' => {
    'argdata' => [
      [
        'format',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'const void *'
      ]
    ],
    'binding_name' => 'glInterleavedArrays_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum format, GLsizei stride, const void *pointer'
  },
  'glInterleavedTextureCoordSetsSGIS' => {
    'argdata' => [
      [
        'factor',
        'GLint '
      ]
    ],
    'binding_name' => 'glInterleavedTextureCoordSetsSGIS',
    'feature' => 'GL_SGIS_multitexture',
    'glewImpl' => '__glewInterleavedTextureCoordSetsSGIS',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint factor'
  },
  'glInterpolatePathsNV' => {
    'argdata' => [
      [
        'resultPath',
        'GLuint '
      ],
      [
        'pathA',
        'GLuint '
      ],
      [
        'pathB',
        'GLuint '
      ],
      [
        'weight',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glInterpolatePathsNV',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewInterpolatePathsNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight'
  },
  'glInvalidateBufferData' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glInvalidateBufferData',
    'feature' => 'GL_ARB_invalidate_subdata',
    'glewImpl' => '__glewInvalidateBufferData',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer'
  },
  'glInvalidateBufferSubData' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'length',
        'GLsizeiptr '
      ]
    ],
    'binding_name' => 'glInvalidateBufferSubData',
    'feature' => 'GL_ARB_invalidate_subdata',
    'glewImpl' => '__glewInvalidateBufferSubData',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLintptr offset, GLsizeiptr length'
  },
  'glInvalidateFramebuffer' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'numAttachments',
        'GLsizei '
      ],
      [
        'attachments',
        'const GLenum* '
      ]
    ],
    'binding_name' => 'glInvalidateFramebuffer_c',
    'feature' => 'GL_ARB_invalidate_subdata',
    'glewImpl' => '__glewInvalidateFramebuffer',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei numAttachments, const GLenum* attachments'
  },
  'glInvalidateNamedFramebufferData' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'numAttachments',
        'GLsizei '
      ],
      [
        'attachments',
        'const GLenum* '
      ]
    ],
    'binding_name' => 'glInvalidateNamedFramebufferData_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewInvalidateNamedFramebufferData',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments'
  },
  'glInvalidateNamedFramebufferSubData' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'numAttachments',
        'GLsizei '
      ],
      [
        'attachments',
        'const GLenum* '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glInvalidateNamedFramebufferSubData_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewInvalidateNamedFramebufferSubData',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height'
  },
  'glInvalidateSubFramebuffer' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'numAttachments',
        'GLsizei '
      ],
      [
        'attachments',
        'const GLenum* '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glInvalidateSubFramebuffer_c',
    'feature' => 'GL_ARB_invalidate_subdata',
    'glewImpl' => '__glewInvalidateSubFramebuffer',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height'
  },
  'glInvalidateTexImage' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ]
    ],
    'binding_name' => 'glInvalidateTexImage',
    'feature' => 'GL_ARB_invalidate_subdata',
    'glewImpl' => '__glewInvalidateTexImage',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLint level'
  },
  'glInvalidateTexSubImage' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glInvalidateTexSubImage',
    'feature' => 'GL_ARB_invalidate_subdata',
    'glewImpl' => '__glewInvalidateTexSubImage',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth'
  },
  'glIsAsyncMarkerSGIX' => {
    'argdata' => [
      [
        'marker',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsAsyncMarkerSGIX',
    'feature' => 'GL_SGIX_async',
    'glewImpl' => '__glewIsAsyncMarkerSGIX',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint marker'
  },
  'glIsBuffer' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsBuffer',
    'feature' => 'GL_VERSION_1_5',
    'glewImpl' => '__glewIsBuffer',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint buffer'
  },
  'glIsBufferARB' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsBufferARB',
    'feature' => 'GL_ARB_vertex_buffer_object',
    'glewImpl' => '__glewIsBufferARB',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint buffer'
  },
  'glIsBufferResidentNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glIsBufferResidentNV',
    'feature' => 'GL_NV_shader_buffer_load',
    'glewImpl' => '__glewIsBufferResidentNV',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLenum target'
  },
  'glIsCommandListNV' => {
    'argdata' => [
      [
        'list',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsCommandListNV',
    'feature' => 'GL_NV_command_list',
    'glewImpl' => '__glewIsCommandListNV',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint list'
  },
  'glIsEnabled' => {
    'argdata' => [
      [
        'cap',
        'GLenum '
      ]
    ],
    'binding_name' => 'glIsEnabled',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLenum cap'
  },
  'glIsEnabledIndexedEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsEnabledIndexedEXT',
    'feature' => 'GL_EXT_draw_buffers2',
    'glewImpl' => '__glewIsEnabledIndexedEXT',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLenum target, GLuint index'
  },
  'glIsEnabledi' => {
    'argdata' => [
      [
        'cap',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsEnabledi',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewIsEnabledi',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLenum cap, GLuint index'
  },
  'glIsEnablediEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsEnablediEXT',
    'feature' => 'GL_EXT_draw_buffers_indexed',
    'glewImpl' => '__glewIsEnablediEXT',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLenum target, GLuint index'
  },
  'glIsEnablediNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsEnablediNV',
    'feature' => 'GL_NV_viewport_array',
    'glewImpl' => '__glewIsEnablediNV',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLenum target, GLuint index'
  },
  'glIsFenceAPPLE' => {
    'argdata' => [
      [
        'fence',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsFenceAPPLE',
    'feature' => 'GL_APPLE_fence',
    'glewImpl' => '__glewIsFenceAPPLE',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint fence'
  },
  'glIsFenceNV' => {
    'argdata' => [
      [
        'fence',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsFenceNV',
    'feature' => 'GL_NV_fence',
    'glewImpl' => '__glewIsFenceNV',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint fence'
  },
  'glIsFramebuffer' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsFramebuffer',
    'feature' => 'GL_ARB_framebuffer_object',
    'glewImpl' => '__glewIsFramebuffer',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint framebuffer'
  },
  'glIsFramebufferEXT' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsFramebufferEXT',
    'feature' => 'GL_EXT_framebuffer_object',
    'glewImpl' => '__glewIsFramebufferEXT',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint framebuffer'
  },
  'glIsImageHandleResidentARB' => {
    'argdata' => [
      [
        'handle',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glIsImageHandleResidentARB',
    'feature' => 'GL_ARB_bindless_texture',
    'glewImpl' => '__glewIsImageHandleResidentARB',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint64 handle'
  },
  'glIsImageHandleResidentNV' => {
    'argdata' => [
      [
        'handle',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glIsImageHandleResidentNV',
    'feature' => 'GL_NV_bindless_texture',
    'glewImpl' => '__glewIsImageHandleResidentNV',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint64 handle'
  },
  'glIsList' => {
    'argdata' => [
      [
        'list',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsList',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint list'
  },
  'glIsMPEGPredictorSGIX' => {
    'argdata' => [
      [
        'predictor',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsMPEGPredictorSGIX',
    'feature' => 'GL_SGIX_mpeg1',
    'glewImpl' => '__glewIsMPEGPredictorSGIX',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint predictor'
  },
  'glIsMemoryObjectEXT' => {
    'argdata' => [
      [
        'memoryObject',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsMemoryObjectEXT',
    'feature' => 'GL_EXT_memory_object',
    'glewImpl' => '__glewIsMemoryObjectEXT',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint memoryObject'
  },
  'glIsNameAMD' => {
    'argdata' => [
      [
        'identifier',
        'GLenum '
      ],
      [
        'name',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsNameAMD',
    'feature' => 'GL_AMD_name_gen_delete',
    'glewImpl' => '__glewIsNameAMD',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLenum identifier, GLuint name'
  },
  'glIsNamedBufferResidentNV' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsNamedBufferResidentNV',
    'feature' => 'GL_NV_shader_buffer_load',
    'glewImpl' => '__glewIsNamedBufferResidentNV',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint buffer'
  },
  'glIsNamedStringARB' => {
    'argdata' => [
      [
        'namelen',
        'GLint '
      ],
      [
        'name',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glIsNamedStringARB_c',
    'feature' => 'GL_ARB_shading_language_include',
    'glewImpl' => '__glewIsNamedStringARB',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLint namelen, const GLchar* name'
  },
  'glIsObjectBufferATI' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsObjectBufferATI',
    'feature' => 'GL_ATI_vertex_array_object',
    'glewImpl' => '__glewIsObjectBufferATI',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint buffer'
  },
  'glIsOcclusionQueryNV' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsOcclusionQueryNV',
    'feature' => 'GL_NV_occlusion_query',
    'glewImpl' => '__glewIsOcclusionQueryNV',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint id'
  },
  'glIsPathNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsPathNV',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewIsPathNV',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint path'
  },
  'glIsPointInFillPathNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'mask',
        'GLuint '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glIsPointInFillPathNV',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewIsPointInFillPathNV',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint path, GLuint mask, GLfloat x, GLfloat y'
  },
  'glIsPointInStrokePathNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glIsPointInStrokePathNV',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewIsPointInStrokePathNV',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint path, GLfloat x, GLfloat y'
  },
  'glIsProgram' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsProgram',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewIsProgram',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint program'
  },
  'glIsProgramARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsProgramARB',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewIsProgramARB',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint program'
  },
  'glIsProgramNV' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsProgramNV',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewIsProgramNV',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint id'
  },
  'glIsProgramPipeline' => {
    'argdata' => [
      [
        'pipeline',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsProgramPipeline',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewIsProgramPipeline',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint pipeline'
  },
  'glIsQuery' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsQuery',
    'feature' => 'GL_VERSION_1_5',
    'glewImpl' => '__glewIsQuery',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint id'
  },
  'glIsQueryANGLE' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsQueryANGLE',
    'feature' => 'GL_ANGLE_timer_query',
    'glewImpl' => '__glewIsQueryANGLE',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint id'
  },
  'glIsQueryARB' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsQueryARB',
    'feature' => 'GL_ARB_occlusion_query',
    'glewImpl' => '__glewIsQueryARB',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint id'
  },
  'glIsRenderbuffer' => {
    'argdata' => [
      [
        'renderbuffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsRenderbuffer',
    'feature' => 'GL_ARB_framebuffer_object',
    'glewImpl' => '__glewIsRenderbuffer',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint renderbuffer'
  },
  'glIsRenderbufferEXT' => {
    'argdata' => [
      [
        'renderbuffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsRenderbufferEXT',
    'feature' => 'GL_EXT_framebuffer_object',
    'glewImpl' => '__glewIsRenderbufferEXT',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint renderbuffer'
  },
  'glIsSampler' => {
    'argdata' => [
      [
        'sampler',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsSampler',
    'feature' => 'GL_ARB_sampler_objects',
    'glewImpl' => '__glewIsSampler',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint sampler'
  },
  'glIsSemaphoreEXT' => {
    'argdata' => [
      [
        'semaphore',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsSemaphoreEXT',
    'feature' => 'GL_EXT_semaphore',
    'glewImpl' => '__glewIsSemaphoreEXT',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint semaphore'
  },
  'glIsShader' => {
    'argdata' => [
      [
        'shader',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsShader',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewIsShader',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint shader'
  },
  'glIsStateNV' => {
    'argdata' => [
      [
        'state',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsStateNV',
    'feature' => 'GL_NV_command_list',
    'glewImpl' => '__glewIsStateNV',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint state'
  },
  'glIsSupportedREGAL' => {
    'argdata' => [
      [
        'ext',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glIsSupportedREGAL_c',
    'feature' => 'GL_REGAL_extension_query',
    'glewImpl' => '__glewIsSupportedREGAL',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'const GLchar* ext'
  },
  'glIsSync' => {
    'argdata' => [
      [
        'myGLsync',
        'GLsync '
      ]
    ],
    'binding_name' => 'glIsSync',
    'feature' => 'GL_ARB_sync',
    'glewImpl' => '__glewIsSync',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLsync GLsync'
  },
  'glIsSyncAPPLE' => {
    'argdata' => [
      [
        'myGLsync',
        'GLsync '
      ]
    ],
    'binding_name' => 'glIsSyncAPPLE',
    'feature' => 'GL_APPLE_sync',
    'glewImpl' => '__glewIsSyncAPPLE',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLsync GLsync'
  },
  'glIsTexture' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsTexture',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint texture'
  },
  'glIsTextureEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsTextureEXT',
    'feature' => 'GL_EXT_texture_object',
    'glewImpl' => '__glewIsTextureEXT',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint texture'
  },
  'glIsTextureHandleResidentARB' => {
    'argdata' => [
      [
        'handle',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glIsTextureHandleResidentARB',
    'feature' => 'GL_ARB_bindless_texture',
    'glewImpl' => '__glewIsTextureHandleResidentARB',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint64 handle'
  },
  'glIsTextureHandleResidentNV' => {
    'argdata' => [
      [
        'handle',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glIsTextureHandleResidentNV',
    'feature' => 'GL_NV_bindless_texture',
    'glewImpl' => '__glewIsTextureHandleResidentNV',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint64 handle'
  },
  'glIsTransformFeedback' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsTransformFeedback',
    'feature' => 'GL_ARB_transform_feedback2',
    'glewImpl' => '__glewIsTransformFeedback',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint id'
  },
  'glIsTransformFeedbackNV' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsTransformFeedbackNV',
    'feature' => 'GL_NV_transform_feedback2',
    'glewImpl' => '__glewIsTransformFeedbackNV',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint id'
  },
  'glIsVariantEnabledEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'cap',
        'GLenum '
      ]
    ],
    'binding_name' => 'glIsVariantEnabledEXT',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewIsVariantEnabledEXT',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint id, GLenum cap'
  },
  'glIsVertexArray' => {
    'argdata' => [
      [
        'array',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsVertexArray',
    'feature' => 'GL_ARB_vertex_array_object',
    'glewImpl' => '__glewIsVertexArray',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint array'
  },
  'glIsVertexArrayAPPLE' => {
    'argdata' => [
      [
        'array',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsVertexArrayAPPLE',
    'feature' => 'GL_APPLE_vertex_array_object',
    'glewImpl' => '__glewIsVertexArrayAPPLE',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint array'
  },
  'glIsVertexArraySGIX' => {
    'argdata' => [
      [
        'array',
        'GLuint '
      ]
    ],
    'binding_name' => 'glIsVertexArraySGIX',
    'feature' => 'GL_SGIX_vertex_array_object',
    'glewImpl' => '__glewIsVertexArraySGIX',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint array'
  },
  'glIsVertexAttribEnabledAPPLE' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ]
    ],
    'binding_name' => 'glIsVertexAttribEnabledAPPLE',
    'feature' => 'GL_APPLE_vertex_program_evaluators',
    'glewImpl' => '__glewIsVertexAttribEnabledAPPLE',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint index, GLenum pname'
  },
  'glLGPUCopyImageSubDataNVX' => {
    'argdata' => [
      [
        'sourceGpu',
        'GLuint '
      ],
      [
        'destinationGpuMask',
        'GLbitfield '
      ],
      [
        'srcName',
        'GLuint '
      ],
      [
        'srcTarget',
        'GLenum '
      ],
      [
        'srcLevel',
        'GLint '
      ],
      [
        'srcX',
        'GLint '
      ],
      [
        'srxY',
        'GLint '
      ],
      [
        'srcZ',
        'GLint '
      ],
      [
        'dstName',
        'GLuint '
      ],
      [
        'dstTarget',
        'GLenum '
      ],
      [
        'dstLevel',
        'GLint '
      ],
      [
        'dstX',
        'GLint '
      ],
      [
        'dstY',
        'GLint '
      ],
      [
        'dstZ',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glLGPUCopyImageSubDataNVX',
    'feature' => 'GL_NVX_linked_gpu_multicast',
    'glewImpl' => '__glewLGPUCopyImageSubDataNVX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth'
  },
  'glLGPUInterlockNVX' => {
    'binding_name' => 'glLGPUInterlockNVX',
    'feature' => 'GL_NVX_linked_gpu_multicast',
    'glewImpl' => '__glewLGPUInterlockNVX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glLGPUNamedBufferSubDataNVX' => {
    'argdata' => [
      [
        'gpuMask',
        'GLbitfield '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glLGPUNamedBufferSubDataNVX_c',
    'feature' => 'GL_NVX_linked_gpu_multicast',
    'glewImpl' => '__glewLGPUNamedBufferSubDataNVX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data'
  },
  'glLabelObjectEXT' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'object',
        'GLuint '
      ],
      [
        'length',
        'GLsizei '
      ],
      [
        'label',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glLabelObjectEXT_c',
    'feature' => 'GL_EXT_debug_label',
    'glewImpl' => '__glewLabelObjectEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLuint object, GLsizei length, const GLchar* label'
  },
  'glLightEnviEXT' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glLightEnviEXT',
    'feature' => 'GL_EXT_fragment_lighting',
    'glewImpl' => '__glewLightEnviEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint param'
  },
  'glLightModelf' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glLightModelf',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfloat param'
  },
  'glLightModelfv' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glLightModelfv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, const GLfloat *params'
  },
  'glLightModeli' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glLightModeli',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint param'
  },
  'glLightModeliv' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glLightModeliv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, const GLint *params'
  },
  'glLightModelx' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfixed '
      ]
    ],
    'binding_name' => 'glLightModelx',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewLightModelx',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfixed param'
  },
  'glLightModelxv' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfixed* '
      ]
    ],
    'binding_name' => 'glLightModelxv_c',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewLightModelxv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, const GLfixed* params'
  },
  'glLightf' => {
    'argdata' => [
      [
        'light',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glLightf',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum light, GLenum pname, GLfloat param'
  },
  'glLightfv' => {
    'argdata' => [
      [
        'light',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glLightfv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum light, GLenum pname, const GLfloat *params'
  },
  'glLighti' => {
    'argdata' => [
      [
        'light',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glLighti',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum light, GLenum pname, GLint param'
  },
  'glLightiv' => {
    'argdata' => [
      [
        'light',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glLightiv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum light, GLenum pname, const GLint *params'
  },
  'glLightx' => {
    'argdata' => [
      [
        'light',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfixed '
      ]
    ],
    'binding_name' => 'glLightx',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewLightx',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum light, GLenum pname, GLfixed param'
  },
  'glLightxv' => {
    'argdata' => [
      [
        'light',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfixed* '
      ]
    ],
    'binding_name' => 'glLightxv_c',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewLightxv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum light, GLenum pname, const GLfixed* params'
  },
  'glLineStipple' => {
    'argdata' => [
      [
        'factor',
        'GLint '
      ],
      [
        'pattern',
        'GLushort '
      ]
    ],
    'binding_name' => 'glLineStipple',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint factor, GLushort pattern'
  },
  'glLineWidth' => {
    'argdata' => [
      [
        'width',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glLineWidth',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat width'
  },
  'glLineWidthx' => {
    'argdata' => [
      [
        'width',
        'GLfixed '
      ]
    ],
    'binding_name' => 'glLineWidthx',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewLineWidthx',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfixed width'
  },
  'glLinkProgram' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ]
    ],
    'binding_name' => 'glLinkProgram',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewLinkProgram',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program'
  },
  'glLinkProgramARB' => {
    'argdata' => [
      [
        'programObj',
        'GLhandleARB '
      ]
    ],
    'binding_name' => 'glLinkProgramARB',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewLinkProgramARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhandleARB programObj'
  },
  'glListBase' => {
    'argdata' => [
      [
        'base',
        'GLuint '
      ]
    ],
    'binding_name' => 'glListBase',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint base'
  },
  'glListDrawCommandsStatesClientNV' => {
    'argdata' => [
      [
        'list',
        'GLuint '
      ],
      [
        'segment',
        'GLuint '
      ],
      [
        'indirects',
        'const void** '
      ],
      [
        'sizes',
        'const GLsizei* '
      ],
      [
        'states',
        'const GLuint* '
      ],
      [
        'fbos',
        'const GLuint* '
      ],
      [
        'count',
        'GLuint '
      ]
    ],
    'binding_name' => 'glListDrawCommandsStatesClientNV_c',
    'feature' => 'GL_NV_command_list',
    'glewImpl' => '__glewListDrawCommandsStatesClientNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint list, GLuint segment, const void** indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count'
  },
  'glLoadIdentity' => {
    'binding_name' => 'glLoadIdentity',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glLoadIdentityDeformationMapSGIX' => {
    'argdata' => [
      [
        'mask',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glLoadIdentityDeformationMapSGIX',
    'feature' => 'GL_SGIX_polynomial_ffd',
    'glewImpl' => '__glewLoadIdentityDeformationMapSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLbitfield mask'
  },
  'glLoadMatrixd' => {
    'argdata' => [
      [
        'm',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glLoadMatrixd_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble *m'
  },
  'glLoadMatrixf' => {
    'argdata' => [
      [
        'm',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glLoadMatrixf_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat *m'
  },
  'glLoadMatrixx' => {
    'argdata' => [
      [
        'm',
        'const GLfixed* '
      ]
    ],
    'binding_name' => 'glLoadMatrixx_c',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewLoadMatrixx',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfixed* m'
  },
  'glLoadName' => {
    'argdata' => [
      [
        'name',
        'GLuint '
      ]
    ],
    'binding_name' => 'glLoadName',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint name'
  },
  'glLoadProgramNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'id',
        'GLuint '
      ],
      [
        'len',
        'GLsizei '
      ],
      [
        'program',
        'const GLubyte* '
      ]
    ],
    'binding_name' => 'glLoadProgramNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewLoadProgramNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint id, GLsizei len, const GLubyte* program'
  },
  'glLoadTransposeMatrixd' => {
    'argdata' => [
      [
        'm',
        'const GLdouble * '
      ]
    ],
    'binding_name' => 'glLoadTransposeMatrixd_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewLoadTransposeMatrixd',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble m[16]'
  },
  'glLoadTransposeMatrixdARB' => {
    'argdata' => [
      [
        'm',
        'GLdouble * '
      ]
    ],
    'binding_name' => 'glLoadTransposeMatrixdARB_c',
    'feature' => 'GL_ARB_transpose_matrix',
    'glewImpl' => '__glewLoadTransposeMatrixdARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble m[16]'
  },
  'glLoadTransposeMatrixf' => {
    'argdata' => [
      [
        'm',
        'const GLfloat * '
      ]
    ],
    'binding_name' => 'glLoadTransposeMatrixf_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewLoadTransposeMatrixf',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat m[16]'
  },
  'glLoadTransposeMatrixfARB' => {
    'argdata' => [
      [
        'm',
        'GLfloat * '
      ]
    ],
    'binding_name' => 'glLoadTransposeMatrixfARB_c',
    'feature' => 'GL_ARB_transpose_matrix',
    'glewImpl' => '__glewLoadTransposeMatrixfARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat m[16]'
  },
  'glLockArraysEXT' => {
    'argdata' => [
      [
        'first',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glLockArraysEXT',
    'feature' => 'GL_EXT_compiled_vertex_array',
    'glewImpl' => '__glewLockArraysEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint first, GLsizei count'
  },
  'glLogMessageCallbackREGAL' => {
    'argdata' => [
      [
        'callback',
        'GLLOGPROCREGAL '
      ]
    ],
    'binding_name' => 'glLogMessageCallbackREGAL',
    'feature' => 'GL_REGAL_log',
    'glewImpl' => '__glewLogMessageCallbackREGAL',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLLOGPROCREGAL callback'
  },
  'glLogicOp' => {
    'argdata' => [
      [
        'opcode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glLogicOp',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum opcode'
  },
  'glMPEGPredictorSGIX' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'void *'
      ]
    ],
    'binding_name' => 'glMPEGPredictorSGIX_c',
    'feature' => 'GL_SGIX_mpeg1',
    'glewImpl' => '__glewMPEGPredictorSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum format, GLenum type, void *pixels'
  },
  'glMPEGQuantTableubv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'values',
        'GLubyte* '
      ]
    ],
    'binding_name' => 'glMPEGQuantTableubv_c',
    'feature' => 'GL_SGIX_mpeg1',
    'glewImpl' => '__glewMPEGQuantTableubv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLubyte* values'
  },
  'glMakeBufferNonResidentNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glMakeBufferNonResidentNV',
    'feature' => 'GL_NV_shader_buffer_load',
    'glewImpl' => '__glewMakeBufferNonResidentNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target'
  },
  'glMakeBufferResidentNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'access',
        'GLenum '
      ]
    ],
    'binding_name' => 'glMakeBufferResidentNV',
    'feature' => 'GL_NV_shader_buffer_load',
    'glewImpl' => '__glewMakeBufferResidentNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum access'
  },
  'glMakeImageHandleNonResidentARB' => {
    'argdata' => [
      [
        'handle',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glMakeImageHandleNonResidentARB',
    'feature' => 'GL_ARB_bindless_texture',
    'glewImpl' => '__glewMakeImageHandleNonResidentARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint64 handle'
  },
  'glMakeImageHandleNonResidentNV' => {
    'argdata' => [
      [
        'handle',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glMakeImageHandleNonResidentNV',
    'feature' => 'GL_NV_bindless_texture',
    'glewImpl' => '__glewMakeImageHandleNonResidentNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint64 handle'
  },
  'glMakeImageHandleResidentARB' => {
    'argdata' => [
      [
        'handle',
        'GLuint64 '
      ],
      [
        'access',
        'GLenum '
      ]
    ],
    'binding_name' => 'glMakeImageHandleResidentARB',
    'feature' => 'GL_ARB_bindless_texture',
    'glewImpl' => '__glewMakeImageHandleResidentARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint64 handle, GLenum access'
  },
  'glMakeImageHandleResidentNV' => {
    'argdata' => [
      [
        'handle',
        'GLuint64 '
      ],
      [
        'access',
        'GLenum '
      ]
    ],
    'binding_name' => 'glMakeImageHandleResidentNV',
    'feature' => 'GL_NV_bindless_texture',
    'glewImpl' => '__glewMakeImageHandleResidentNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint64 handle, GLenum access'
  },
  'glMakeNamedBufferNonResidentNV' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glMakeNamedBufferNonResidentNV',
    'feature' => 'GL_NV_shader_buffer_load',
    'glewImpl' => '__glewMakeNamedBufferNonResidentNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer'
  },
  'glMakeNamedBufferResidentNV' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'access',
        'GLenum '
      ]
    ],
    'binding_name' => 'glMakeNamedBufferResidentNV',
    'feature' => 'GL_NV_shader_buffer_load',
    'glewImpl' => '__glewMakeNamedBufferResidentNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLenum access'
  },
  'glMakeTextureHandleNonResidentARB' => {
    'argdata' => [
      [
        'handle',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glMakeTextureHandleNonResidentARB',
    'feature' => 'GL_ARB_bindless_texture',
    'glewImpl' => '__glewMakeTextureHandleNonResidentARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint64 handle'
  },
  'glMakeTextureHandleNonResidentNV' => {
    'argdata' => [
      [
        'handle',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glMakeTextureHandleNonResidentNV',
    'feature' => 'GL_NV_bindless_texture',
    'glewImpl' => '__glewMakeTextureHandleNonResidentNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint64 handle'
  },
  'glMakeTextureHandleResidentARB' => {
    'argdata' => [
      [
        'handle',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glMakeTextureHandleResidentARB',
    'feature' => 'GL_ARB_bindless_texture',
    'glewImpl' => '__glewMakeTextureHandleResidentARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint64 handle'
  },
  'glMakeTextureHandleResidentNV' => {
    'argdata' => [
      [
        'handle',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glMakeTextureHandleResidentNV',
    'feature' => 'GL_NV_bindless_texture',
    'glewImpl' => '__glewMakeTextureHandleResidentNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint64 handle'
  },
  'glMap1d' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'u1',
        'GLdouble '
      ],
      [
        'u2',
        'GLdouble '
      ],
      [
        'stride',
        'GLint '
      ],
      [
        'order',
        'GLint '
      ],
      [
        'points',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glMap1d_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points'
  },
  'glMap1f' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'u1',
        'GLfloat '
      ],
      [
        'u2',
        'GLfloat '
      ],
      [
        'stride',
        'GLint '
      ],
      [
        'order',
        'GLint '
      ],
      [
        'points',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glMap1f_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points'
  },
  'glMap2d' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'u1',
        'GLdouble '
      ],
      [
        'u2',
        'GLdouble '
      ],
      [
        'ustride',
        'GLint '
      ],
      [
        'uorder',
        'GLint '
      ],
      [
        'v1',
        'GLdouble '
      ],
      [
        'v2',
        'GLdouble '
      ],
      [
        'vstride',
        'GLint '
      ],
      [
        'vorder',
        'GLint '
      ],
      [
        'points',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glMap2d_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points'
  },
  'glMap2f' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'u1',
        'GLfloat '
      ],
      [
        'u2',
        'GLfloat '
      ],
      [
        'ustride',
        'GLint '
      ],
      [
        'uorder',
        'GLint '
      ],
      [
        'v1',
        'GLfloat '
      ],
      [
        'v2',
        'GLfloat '
      ],
      [
        'vstride',
        'GLint '
      ],
      [
        'vorder',
        'GLint '
      ],
      [
        'points',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glMap2f_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points'
  },
  'glMapBuffer' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'access',
        'GLenum '
      ]
    ],
    'binding_name' => 'glMapBuffer_c',
    'feature' => 'GL_VERSION_1_5',
    'glewImpl' => '__glewMapBuffer',
    'glewtype' => 'fun',
    'restype' => 'void*',
    'signature' => 'GLenum target, GLenum access'
  },
  'glMapBufferARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'access',
        'GLenum '
      ]
    ],
    'binding_name' => 'glMapBufferARB_c',
    'feature' => 'GL_ARB_vertex_buffer_object',
    'glewImpl' => '__glewMapBufferARB',
    'glewtype' => 'fun',
    'restype' => 'void *',
    'signature' => 'GLenum target, GLenum access'
  },
  'glMapBufferRange' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'length',
        'GLsizeiptr '
      ],
      [
        'access',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glMapBufferRange_c',
    'feature' => 'GL_ARB_map_buffer_range',
    'glewImpl' => '__glewMapBufferRange',
    'glewtype' => 'fun',
    'restype' => 'void *',
    'signature' => 'GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access'
  },
  'glMapBufferRangeEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'length',
        'GLsizeiptr '
      ],
      [
        'access',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glMapBufferRangeEXT_c',
    'feature' => 'GL_EXT_map_buffer_range',
    'glewImpl' => '__glewMapBufferRangeEXT',
    'glewtype' => 'fun',
    'restype' => 'void *',
    'signature' => 'GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access'
  },
  'glMapControlPointsNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'ustride',
        'GLsizei '
      ],
      [
        'vstride',
        'GLsizei '
      ],
      [
        'uorder',
        'GLint '
      ],
      [
        'vorder',
        'GLint '
      ],
      [
        'packed',
        'GLboolean '
      ],
      [
        'points',
        'const void *'
      ]
    ],
    'binding_name' => 'glMapControlPointsNV_c',
    'feature' => 'GL_NV_evaluators',
    'glewImpl' => '__glewMapControlPointsNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points'
  },
  'glMapGrid1d' => {
    'argdata' => [
      [
        'un',
        'GLint '
      ],
      [
        'u1',
        'GLdouble '
      ],
      [
        'u2',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glMapGrid1d',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint un, GLdouble u1, GLdouble u2'
  },
  'glMapGrid1f' => {
    'argdata' => [
      [
        'un',
        'GLint '
      ],
      [
        'u1',
        'GLfloat '
      ],
      [
        'u2',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glMapGrid1f',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint un, GLfloat u1, GLfloat u2'
  },
  'glMapGrid2d' => {
    'argdata' => [
      [
        'un',
        'GLint '
      ],
      [
        'u1',
        'GLdouble '
      ],
      [
        'u2',
        'GLdouble '
      ],
      [
        'vn',
        'GLint '
      ],
      [
        'v1',
        'GLdouble '
      ],
      [
        'v2',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glMapGrid2d',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2'
  },
  'glMapGrid2f' => {
    'argdata' => [
      [
        'un',
        'GLint '
      ],
      [
        'u1',
        'GLfloat '
      ],
      [
        'u2',
        'GLfloat '
      ],
      [
        'vn',
        'GLint '
      ],
      [
        'v1',
        'GLfloat '
      ],
      [
        'v2',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glMapGrid2f',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2'
  },
  'glMapNamedBuffer' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'access',
        'GLenum '
      ]
    ],
    'binding_name' => 'glMapNamedBuffer_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewMapNamedBuffer',
    'glewtype' => 'fun',
    'restype' => 'void *',
    'signature' => 'GLuint buffer, GLenum access'
  },
  'glMapNamedBufferEXT' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'access',
        'GLenum '
      ]
    ],
    'binding_name' => 'glMapNamedBufferEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMapNamedBufferEXT',
    'glewtype' => 'fun',
    'restype' => 'void *',
    'signature' => 'GLuint buffer, GLenum access'
  },
  'glMapNamedBufferRange' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'length',
        'GLsizeiptr '
      ],
      [
        'access',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glMapNamedBufferRange_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewMapNamedBufferRange',
    'glewtype' => 'fun',
    'restype' => 'void *',
    'signature' => 'GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access'
  },
  'glMapNamedBufferRangeEXT' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'length',
        'GLsizeiptr '
      ],
      [
        'access',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glMapNamedBufferRangeEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMapNamedBufferRangeEXT',
    'glewtype' => 'fun',
    'restype' => 'void *',
    'signature' => 'GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access'
  },
  'glMapObjectBufferATI' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glMapObjectBufferATI_c',
    'feature' => 'GL_ATI_map_object_buffer',
    'glewImpl' => '__glewMapObjectBufferATI',
    'glewtype' => 'fun',
    'restype' => 'void *',
    'signature' => 'GLuint buffer'
  },
  'glMapParameterfvNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glMapParameterfvNV_c',
    'feature' => 'GL_NV_evaluators',
    'glewImpl' => '__glewMapParameterfvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLfloat* params'
  },
  'glMapParameterivNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glMapParameterivNV_c',
    'feature' => 'GL_NV_evaluators',
    'glewImpl' => '__glewMapParameterivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLint* params'
  },
  'glMapTexture2DINTEL' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'access',
        'GLbitfield '
      ],
      [
        'stride',
        'GLint* '
      ],
      [
        'layout',
        'GLenum *'
      ]
    ],
    'binding_name' => 'glMapTexture2DINTEL_c',
    'feature' => 'GL_LAYOUT_LINEAR_INTEL',
    'glewImpl' => '__glewMapTexture2DINTEL',
    'glewtype' => 'fun',
    'restype' => 'void *',
    'signature' => 'GLuint texture, GLint level, GLbitfield access, GLint* stride, GLenum *layout'
  },
  'glMapVertexAttrib1dAPPLE' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'size',
        'GLuint '
      ],
      [
        'u1',
        'GLdouble '
      ],
      [
        'u2',
        'GLdouble '
      ],
      [
        'stride',
        'GLint '
      ],
      [
        'order',
        'GLint '
      ],
      [
        'points',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glMapVertexAttrib1dAPPLE_c',
    'feature' => 'GL_APPLE_vertex_program_evaluators',
    'glewImpl' => '__glewMapVertexAttrib1dAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points'
  },
  'glMapVertexAttrib1fAPPLE' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'size',
        'GLuint '
      ],
      [
        'u1',
        'GLfloat '
      ],
      [
        'u2',
        'GLfloat '
      ],
      [
        'stride',
        'GLint '
      ],
      [
        'order',
        'GLint '
      ],
      [
        'points',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glMapVertexAttrib1fAPPLE_c',
    'feature' => 'GL_APPLE_vertex_program_evaluators',
    'glewImpl' => '__glewMapVertexAttrib1fAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points'
  },
  'glMapVertexAttrib2dAPPLE' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'size',
        'GLuint '
      ],
      [
        'u1',
        'GLdouble '
      ],
      [
        'u2',
        'GLdouble '
      ],
      [
        'ustride',
        'GLint '
      ],
      [
        'uorder',
        'GLint '
      ],
      [
        'v1',
        'GLdouble '
      ],
      [
        'v2',
        'GLdouble '
      ],
      [
        'vstride',
        'GLint '
      ],
      [
        'vorder',
        'GLint '
      ],
      [
        'points',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glMapVertexAttrib2dAPPLE_c',
    'feature' => 'GL_APPLE_vertex_program_evaluators',
    'glewImpl' => '__glewMapVertexAttrib2dAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points'
  },
  'glMapVertexAttrib2fAPPLE' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'size',
        'GLuint '
      ],
      [
        'u1',
        'GLfloat '
      ],
      [
        'u2',
        'GLfloat '
      ],
      [
        'ustride',
        'GLint '
      ],
      [
        'uorder',
        'GLint '
      ],
      [
        'v1',
        'GLfloat '
      ],
      [
        'v2',
        'GLfloat '
      ],
      [
        'vstride',
        'GLint '
      ],
      [
        'vorder',
        'GLint '
      ],
      [
        'points',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glMapVertexAttrib2fAPPLE_c',
    'feature' => 'GL_APPLE_vertex_program_evaluators',
    'glewImpl' => '__glewMapVertexAttrib2fAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points'
  },
  'glMaterialf' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glMaterialf',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum pname, GLfloat param'
  },
  'glMaterialfv' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glMaterialfv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum pname, const GLfloat *params'
  },
  'glMateriali' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glMateriali',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum pname, GLint param'
  },
  'glMaterialiv' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glMaterialiv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum pname, const GLint *params'
  },
  'glMaterialx' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfixed '
      ]
    ],
    'binding_name' => 'glMaterialx',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewMaterialx',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum pname, GLfixed param'
  },
  'glMaterialxv' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfixed* '
      ]
    ],
    'binding_name' => 'glMaterialxv_c',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewMaterialxv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum pname, const GLfixed* params'
  },
  'glMatrixFrustumEXT' => {
    'argdata' => [
      [
        'matrixMode',
        'GLenum '
      ],
      [
        'l',
        'GLdouble '
      ],
      [
        'r',
        'GLdouble '
      ],
      [
        'b',
        'GLdouble '
      ],
      [
        't',
        'GLdouble '
      ],
      [
        'n',
        'GLdouble '
      ],
      [
        'f',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glMatrixFrustumEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMatrixFrustumEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum matrixMode, GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f'
  },
  'glMatrixIndexPointerARB' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'void *'
      ]
    ],
    'binding_name' => 'glMatrixIndexPointerARB_c',
    'feature' => 'GL_ARB_matrix_palette',
    'glewImpl' => '__glewMatrixIndexPointerARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLenum type, GLsizei stride, void *pointer'
  },
  'glMatrixIndexubvARB' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'indices',
        'GLubyte *'
      ]
    ],
    'binding_name' => 'glMatrixIndexubvARB_c',
    'feature' => 'GL_ARB_matrix_palette',
    'glewImpl' => '__glewMatrixIndexubvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLubyte *indices'
  },
  'glMatrixIndexuivARB' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'indices',
        'GLuint *'
      ]
    ],
    'binding_name' => 'glMatrixIndexuivARB_c',
    'feature' => 'GL_ARB_matrix_palette',
    'glewImpl' => '__glewMatrixIndexuivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLuint *indices'
  },
  'glMatrixIndexusvARB' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'indices',
        'GLushort *'
      ]
    ],
    'binding_name' => 'glMatrixIndexusvARB_c',
    'feature' => 'GL_ARB_matrix_palette',
    'glewImpl' => '__glewMatrixIndexusvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLushort *indices'
  },
  'glMatrixLoad3x2fNV' => {
    'argdata' => [
      [
        'matrixMode',
        'GLenum '
      ],
      [
        'm',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glMatrixLoad3x2fNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewMatrixLoad3x2fNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum matrixMode, const GLfloat* m'
  },
  'glMatrixLoad3x3fNV' => {
    'argdata' => [
      [
        'matrixMode',
        'GLenum '
      ],
      [
        'm',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glMatrixLoad3x3fNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewMatrixLoad3x3fNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum matrixMode, const GLfloat* m'
  },
  'glMatrixLoadIdentityEXT' => {
    'argdata' => [
      [
        'matrixMode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glMatrixLoadIdentityEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMatrixLoadIdentityEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum matrixMode'
  },
  'glMatrixLoadTranspose3x3fNV' => {
    'argdata' => [
      [
        'matrixMode',
        'GLenum '
      ],
      [
        'm',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glMatrixLoadTranspose3x3fNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewMatrixLoadTranspose3x3fNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum matrixMode, const GLfloat* m'
  },
  'glMatrixLoadTransposedEXT' => {
    'argdata' => [
      [
        'matrixMode',
        'GLenum '
      ],
      [
        'm',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glMatrixLoadTransposedEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMatrixLoadTransposedEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum matrixMode, const GLdouble* m'
  },
  'glMatrixLoadTransposefEXT' => {
    'argdata' => [
      [
        'matrixMode',
        'GLenum '
      ],
      [
        'm',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glMatrixLoadTransposefEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMatrixLoadTransposefEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum matrixMode, const GLfloat* m'
  },
  'glMatrixLoaddEXT' => {
    'argdata' => [
      [
        'matrixMode',
        'GLenum '
      ],
      [
        'm',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glMatrixLoaddEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMatrixLoaddEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum matrixMode, const GLdouble* m'
  },
  'glMatrixLoadfEXT' => {
    'argdata' => [
      [
        'matrixMode',
        'GLenum '
      ],
      [
        'm',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glMatrixLoadfEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMatrixLoadfEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum matrixMode, const GLfloat* m'
  },
  'glMatrixMode' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glMatrixMode',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode'
  },
  'glMatrixMult3x2fNV' => {
    'argdata' => [
      [
        'matrixMode',
        'GLenum '
      ],
      [
        'm',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glMatrixMult3x2fNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewMatrixMult3x2fNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum matrixMode, const GLfloat* m'
  },
  'glMatrixMult3x3fNV' => {
    'argdata' => [
      [
        'matrixMode',
        'GLenum '
      ],
      [
        'm',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glMatrixMult3x3fNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewMatrixMult3x3fNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum matrixMode, const GLfloat* m'
  },
  'glMatrixMultTranspose3x3fNV' => {
    'argdata' => [
      [
        'matrixMode',
        'GLenum '
      ],
      [
        'm',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glMatrixMultTranspose3x3fNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewMatrixMultTranspose3x3fNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum matrixMode, const GLfloat* m'
  },
  'glMatrixMultTransposedEXT' => {
    'argdata' => [
      [
        'matrixMode',
        'GLenum '
      ],
      [
        'm',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glMatrixMultTransposedEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMatrixMultTransposedEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum matrixMode, const GLdouble* m'
  },
  'glMatrixMultTransposefEXT' => {
    'argdata' => [
      [
        'matrixMode',
        'GLenum '
      ],
      [
        'm',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glMatrixMultTransposefEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMatrixMultTransposefEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum matrixMode, const GLfloat* m'
  },
  'glMatrixMultdEXT' => {
    'argdata' => [
      [
        'matrixMode',
        'GLenum '
      ],
      [
        'm',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glMatrixMultdEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMatrixMultdEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum matrixMode, const GLdouble* m'
  },
  'glMatrixMultfEXT' => {
    'argdata' => [
      [
        'matrixMode',
        'GLenum '
      ],
      [
        'm',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glMatrixMultfEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMatrixMultfEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum matrixMode, const GLfloat* m'
  },
  'glMatrixOrthoEXT' => {
    'argdata' => [
      [
        'matrixMode',
        'GLenum '
      ],
      [
        'l',
        'GLdouble '
      ],
      [
        'r',
        'GLdouble '
      ],
      [
        'b',
        'GLdouble '
      ],
      [
        't',
        'GLdouble '
      ],
      [
        'n',
        'GLdouble '
      ],
      [
        'f',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glMatrixOrthoEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMatrixOrthoEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum matrixMode, GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f'
  },
  'glMatrixPopEXT' => {
    'argdata' => [
      [
        'matrixMode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glMatrixPopEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMatrixPopEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum matrixMode'
  },
  'glMatrixPushEXT' => {
    'argdata' => [
      [
        'matrixMode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glMatrixPushEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMatrixPushEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum matrixMode'
  },
  'glMatrixRotatedEXT' => {
    'argdata' => [
      [
        'matrixMode',
        'GLenum '
      ],
      [
        'angle',
        'GLdouble '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glMatrixRotatedEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMatrixRotatedEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum matrixMode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z'
  },
  'glMatrixRotatefEXT' => {
    'argdata' => [
      [
        'matrixMode',
        'GLenum '
      ],
      [
        'angle',
        'GLfloat '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glMatrixRotatefEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMatrixRotatefEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum matrixMode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z'
  },
  'glMatrixScaledEXT' => {
    'argdata' => [
      [
        'matrixMode',
        'GLenum '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glMatrixScaledEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMatrixScaledEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum matrixMode, GLdouble x, GLdouble y, GLdouble z'
  },
  'glMatrixScalefEXT' => {
    'argdata' => [
      [
        'matrixMode',
        'GLenum '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glMatrixScalefEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMatrixScalefEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum matrixMode, GLfloat x, GLfloat y, GLfloat z'
  },
  'glMatrixTranslatedEXT' => {
    'argdata' => [
      [
        'matrixMode',
        'GLenum '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glMatrixTranslatedEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMatrixTranslatedEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum matrixMode, GLdouble x, GLdouble y, GLdouble z'
  },
  'glMatrixTranslatefEXT' => {
    'argdata' => [
      [
        'matrixMode',
        'GLenum '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glMatrixTranslatefEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMatrixTranslatefEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum matrixMode, GLfloat x, GLfloat y, GLfloat z'
  },
  'glMaxShaderCompilerThreadsARB' => {
    'argdata' => [
      [
        'count',
        'GLuint '
      ]
    ],
    'binding_name' => 'glMaxShaderCompilerThreadsARB',
    'feature' => 'GL_ARB_parallel_shader_compile',
    'glewImpl' => '__glewMaxShaderCompilerThreadsARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint count'
  },
  'glMaxShaderCompilerThreadsKHR' => {
    'argdata' => [
      [
        'count',
        'GLuint '
      ]
    ],
    'binding_name' => 'glMaxShaderCompilerThreadsKHR',
    'feature' => 'GL_KHR_parallel_shader_compile',
    'glewImpl' => '__glewMaxShaderCompilerThreadsKHR',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint count'
  },
  'glMemoryBarrier' => {
    'argdata' => [
      [
        'barriers',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glMemoryBarrier',
    'feature' => 'GL_ARB_shader_image_load_store',
    'glewImpl' => '__glewMemoryBarrier',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLbitfield barriers'
  },
  'glMemoryBarrierByRegion' => {
    'argdata' => [
      [
        'barriers',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glMemoryBarrierByRegion',
    'feature' => 'GL_ARB_ES3_1_compatibility',
    'glewImpl' => '__glewMemoryBarrierByRegion',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLbitfield barriers'
  },
  'glMemoryBarrierEXT' => {
    'argdata' => [
      [
        'barriers',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glMemoryBarrierEXT',
    'feature' => 'GL_EXT_shader_image_load_store',
    'glewImpl' => '__glewMemoryBarrierEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLbitfield barriers'
  },
  'glMemoryObjectParameterivEXT' => {
    'argdata' => [
      [
        'memoryObject',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glMemoryObjectParameterivEXT_c',
    'feature' => 'GL_EXT_memory_object',
    'glewImpl' => '__glewMemoryObjectParameterivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint memoryObject, GLenum pname, const GLint* params'
  },
  'glMeshBreadthSGIX' => {
    'argdata' => [
      [
        'breadth',
        'GLint '
      ]
    ],
    'binding_name' => 'glMeshBreadthSGIX',
    'feature' => 'GL_SGIX_quad_mesh',
    'glewImpl' => '__glewMeshBreadthSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint breadth'
  },
  'glMeshStrideSGIX' => {
    'argdata' => [
      [
        'stride',
        'GLint '
      ]
    ],
    'binding_name' => 'glMeshStrideSGIX',
    'feature' => 'GL_SGIX_quad_mesh',
    'glewImpl' => '__glewMeshStrideSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint stride'
  },
  'glMinSampleShading' => {
    'argdata' => [
      [
        'value',
        'GLclampf '
      ]
    ],
    'binding_name' => 'glMinSampleShading',
    'feature' => 'GL_VERSION_4_0',
    'glewImpl' => '__glewMinSampleShading',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLclampf value'
  },
  'glMinSampleShadingARB' => {
    'argdata' => [
      [
        'value',
        'GLclampf '
      ]
    ],
    'binding_name' => 'glMinSampleShadingARB',
    'feature' => 'GL_ARB_sample_shading',
    'glewImpl' => '__glewMinSampleShadingARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLclampf value'
  },
  'glMinmax' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'sink',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glMinmax',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewMinmax',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLboolean sink'
  },
  'glMinmaxEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'sink',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glMinmaxEXT',
    'feature' => 'GL_EXT_histogram',
    'glewImpl' => '__glewMinmaxEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLboolean sink'
  },
  'glMultMatrixd' => {
    'argdata' => [
      [
        'm',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glMultMatrixd_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble *m'
  },
  'glMultMatrixf' => {
    'argdata' => [
      [
        'm',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glMultMatrixf_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat *m'
  },
  'glMultMatrixx' => {
    'argdata' => [
      [
        'm',
        'const GLfixed* '
      ]
    ],
    'binding_name' => 'glMultMatrixx_c',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewMultMatrixx',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfixed* m'
  },
  'glMultTransposeMatrixd' => {
    'argdata' => [
      [
        'm',
        'const GLdouble * '
      ]
    ],
    'binding_name' => 'glMultTransposeMatrixd_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultTransposeMatrixd',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble m[16]'
  },
  'glMultTransposeMatrixdARB' => {
    'argdata' => [
      [
        'm',
        'GLdouble * '
      ]
    ],
    'binding_name' => 'glMultTransposeMatrixdARB_c',
    'feature' => 'GL_ARB_transpose_matrix',
    'glewImpl' => '__glewMultTransposeMatrixdARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble m[16]'
  },
  'glMultTransposeMatrixf' => {
    'argdata' => [
      [
        'm',
        'const GLfloat * '
      ]
    ],
    'binding_name' => 'glMultTransposeMatrixf_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultTransposeMatrixf',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat m[16]'
  },
  'glMultTransposeMatrixfARB' => {
    'argdata' => [
      [
        'm',
        'GLfloat * '
      ]
    ],
    'binding_name' => 'glMultTransposeMatrixfARB_c',
    'feature' => 'GL_ARB_transpose_matrix',
    'glewImpl' => '__glewMultTransposeMatrixfARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat m[16]'
  },
  'glMultiDrawArrays' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'first',
        'const GLint *'
      ],
      [
        'count',
        'const GLsizei *'
      ],
      [
        'drawcount',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glMultiDrawArrays_c',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewMultiDrawArrays',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount'
  },
  'glMultiDrawArraysEXT' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'first',
        'const GLint* '
      ],
      [
        'count',
        'const GLsizei *'
      ],
      [
        'primcount',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glMultiDrawArraysEXT_c',
    'feature' => 'GL_EXT_multi_draw_arrays',
    'glewImpl' => '__glewMultiDrawArraysEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, const GLint* first, const GLsizei *count, GLsizei primcount'
  },
  'glMultiDrawArraysIndirect' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'indirect',
        'const void *'
      ],
      [
        'primcount',
        'GLsizei '
      ],
      [
        'stride',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glMultiDrawArraysIndirect_c',
    'feature' => 'GL_ARB_multi_draw_indirect',
    'glewImpl' => '__glewMultiDrawArraysIndirect',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride'
  },
  'glMultiDrawArraysIndirectAMD' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'indirect',
        'const void *'
      ],
      [
        'primcount',
        'GLsizei '
      ],
      [
        'stride',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glMultiDrawArraysIndirectAMD_c',
    'feature' => 'GL_AMD_multi_draw_indirect',
    'glewImpl' => '__glewMultiDrawArraysIndirectAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride'
  },
  'glMultiDrawArraysIndirectBindlessCountNV' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'indirect',
        'const void *'
      ],
      [
        'drawCount',
        'GLintptr '
      ],
      [
        'maxDrawCount',
        'GLsizei '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'vertexBufferCount',
        'GLint '
      ]
    ],
    'binding_name' => 'glMultiDrawArraysIndirectBindlessCountNV_c',
    'feature' => 'GL_NV_bindless_multi_draw_indirect_count',
    'glewImpl' => '__glewMultiDrawArraysIndirectBindlessCountNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, const void *indirect, GLintptr drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount'
  },
  'glMultiDrawArraysIndirectBindlessNV' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'indirect',
        'const void *'
      ],
      [
        'drawCount',
        'GLsizei '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'vertexBufferCount',
        'GLint '
      ]
    ],
    'binding_name' => 'glMultiDrawArraysIndirectBindlessNV_c',
    'feature' => 'GL_NV_bindless_multi_draw_indirect',
    'glewImpl' => '__glewMultiDrawArraysIndirectBindlessNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount'
  },
  'glMultiDrawArraysIndirectCount' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'indirect',
        'const GLvoid *'
      ],
      [
        'drawcount',
        'GLintptr '
      ],
      [
        'maxdrawcount',
        'GLsizei '
      ],
      [
        'stride',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glMultiDrawArraysIndirectCount_c',
    'feature' => 'GL_VERSION_4_6',
    'glewImpl' => '__glewMultiDrawArraysIndirectCount',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, const GLvoid *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride'
  },
  'glMultiDrawArraysIndirectCountARB' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'indirect',
        'const void *'
      ],
      [
        'drawcount',
        'GLintptr '
      ],
      [
        'maxdrawcount',
        'GLsizei '
      ],
      [
        'stride',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glMultiDrawArraysIndirectCountARB_c',
    'feature' => 'GL_ARB_indirect_parameters',
    'glewImpl' => '__glewMultiDrawArraysIndirectCountARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride'
  },
  'glMultiDrawArraysIndirectEXT' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'indirect',
        'const void *'
      ],
      [
        'drawcount',
        'GLsizei '
      ],
      [
        'stride',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glMultiDrawArraysIndirectEXT_c',
    'feature' => 'GL_EXT_multi_draw_indirect',
    'glewImpl' => '__glewMultiDrawArraysIndirectEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride'
  },
  'glMultiDrawElementArrayAPPLE' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'first',
        'const GLint* '
      ],
      [
        'count',
        'const GLsizei *'
      ],
      [
        'primcount',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glMultiDrawElementArrayAPPLE_c',
    'feature' => 'GL_APPLE_element_array',
    'glewImpl' => '__glewMultiDrawElementArrayAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, const GLint* first, const GLsizei *count, GLsizei primcount'
  },
  'glMultiDrawElements' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'count',
        'const GLsizei *'
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indices',
        'const void *const* '
      ],
      [
        'drawcount',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glMultiDrawElements_c',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewMultiDrawElements',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, const GLsizei *count, GLenum type, const void *const* indices, GLsizei drawcount'
  },
  'glMultiDrawElementsBaseVertex' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'count',
        'GLsizei* '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indices',
        'void**'
      ],
      [
        'primcount',
        'GLsizei '
      ],
      [
        'basevertex',
        'GLint *'
      ]
    ],
    'binding_name' => 'glMultiDrawElementsBaseVertex_c',
    'feature' => 'GL_ARB_draw_elements_base_vertex',
    'glewImpl' => '__glewMultiDrawElementsBaseVertex',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLsizei* count, GLenum type, void**indices, GLsizei primcount, GLint *basevertex'
  },
  'glMultiDrawElementsBaseVertexEXT' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'count',
        'const GLsizei* '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indices',
        'const void *const *'
      ],
      [
        'primcount',
        'GLsizei '
      ],
      [
        'basevertex',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glMultiDrawElementsBaseVertexEXT_c',
    'feature' => 'GL_EXT_draw_elements_base_vertex',
    'glewImpl' => '__glewMultiDrawElementsBaseVertexEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, const GLsizei* count, GLenum type, const void *const *indices, GLsizei primcount, const GLint *basevertex'
  },
  'glMultiDrawElementsEXT' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'count',
        'GLsizei* '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indices',
        'const void *const *'
      ],
      [
        'primcount',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glMultiDrawElementsEXT_c',
    'feature' => 'GL_EXT_multi_draw_arrays',
    'glewImpl' => '__glewMultiDrawElementsEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLsizei* count, GLenum type, const void *const *indices, GLsizei primcount'
  },
  'glMultiDrawElementsIndirect' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indirect',
        'const void *'
      ],
      [
        'primcount',
        'GLsizei '
      ],
      [
        'stride',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glMultiDrawElementsIndirect_c',
    'feature' => 'GL_ARB_multi_draw_indirect',
    'glewImpl' => '__glewMultiDrawElementsIndirect',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride'
  },
  'glMultiDrawElementsIndirectAMD' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indirect',
        'const void *'
      ],
      [
        'primcount',
        'GLsizei '
      ],
      [
        'stride',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glMultiDrawElementsIndirectAMD_c',
    'feature' => 'GL_AMD_multi_draw_indirect',
    'glewImpl' => '__glewMultiDrawElementsIndirectAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride'
  },
  'glMultiDrawElementsIndirectBindlessCountNV' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indirect',
        'const void *'
      ],
      [
        'drawCount',
        'GLintptr '
      ],
      [
        'maxDrawCount',
        'GLsizei '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'vertexBufferCount',
        'GLint '
      ]
    ],
    'binding_name' => 'glMultiDrawElementsIndirectBindlessCountNV_c',
    'feature' => 'GL_NV_bindless_multi_draw_indirect_count',
    'glewImpl' => '__glewMultiDrawElementsIndirectBindlessCountNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLenum type, const void *indirect, GLintptr drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount'
  },
  'glMultiDrawElementsIndirectBindlessNV' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indirect',
        'const void *'
      ],
      [
        'drawCount',
        'GLsizei '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'vertexBufferCount',
        'GLint '
      ]
    ],
    'binding_name' => 'glMultiDrawElementsIndirectBindlessNV_c',
    'feature' => 'GL_NV_bindless_multi_draw_indirect',
    'glewImpl' => '__glewMultiDrawElementsIndirectBindlessNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount'
  },
  'glMultiDrawElementsIndirectCount' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indirect',
        'const GLvoid *'
      ],
      [
        'drawcount',
        'GLintptr '
      ],
      [
        'maxdrawcount',
        'GLsizei '
      ],
      [
        'stride',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glMultiDrawElementsIndirectCount_c',
    'feature' => 'GL_VERSION_4_6',
    'glewImpl' => '__glewMultiDrawElementsIndirectCount',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLenum type, const GLvoid *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride'
  },
  'glMultiDrawElementsIndirectCountARB' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indirect',
        'const void *'
      ],
      [
        'drawcount',
        'GLintptr '
      ],
      [
        'maxdrawcount',
        'GLsizei '
      ],
      [
        'stride',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glMultiDrawElementsIndirectCountARB_c',
    'feature' => 'GL_ARB_indirect_parameters',
    'glewImpl' => '__glewMultiDrawElementsIndirectCountARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride'
  },
  'glMultiDrawElementsIndirectEXT' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indirect',
        'const void *'
      ],
      [
        'drawcount',
        'GLsizei '
      ],
      [
        'stride',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glMultiDrawElementsIndirectEXT_c',
    'feature' => 'GL_EXT_multi_draw_indirect',
    'glewImpl' => '__glewMultiDrawElementsIndirectEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride'
  },
  'glMultiDrawRangeElementArrayAPPLE' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'start',
        'GLuint '
      ],
      [
        'end',
        'GLuint '
      ],
      [
        'first',
        'const GLint* '
      ],
      [
        'count',
        'const GLsizei *'
      ],
      [
        'primcount',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glMultiDrawRangeElementArrayAPPLE_c',
    'feature' => 'GL_APPLE_element_array',
    'glewImpl' => '__glewMultiDrawRangeElementArrayAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei *count, GLsizei primcount'
  },
  'glMultiModeDrawArraysIBM' => {
    'argdata' => [
      [
        'mode',
        'const GLenum* '
      ],
      [
        'first',
        'const GLint *'
      ],
      [
        'count',
        'const GLsizei *'
      ],
      [
        'primcount',
        'GLsizei '
      ],
      [
        'modestride',
        'GLint '
      ]
    ],
    'binding_name' => 'glMultiModeDrawArraysIBM_c',
    'feature' => 'GL_IBM_multimode_draw_arrays',
    'glewImpl' => '__glewMultiModeDrawArraysIBM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLenum* mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride'
  },
  'glMultiModeDrawElementsIBM' => {
    'argdata' => [
      [
        'mode',
        'const GLenum* '
      ],
      [
        'count',
        'const GLsizei *'
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'indices',
        'const void *const *'
      ],
      [
        'primcount',
        'GLsizei '
      ],
      [
        'modestride',
        'GLint '
      ]
    ],
    'binding_name' => 'glMultiModeDrawElementsIBM_c',
    'feature' => 'GL_IBM_multimode_draw_arrays',
    'glewImpl' => '__glewMultiModeDrawElementsIBM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLenum* mode, const GLsizei *count, GLenum type, const void *const *indices, GLsizei primcount, GLint modestride'
  },
  'glMultiTexBufferEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glMultiTexBufferEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMultiTexBufferEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer'
  },
  'glMultiTexCoord1d' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glMultiTexCoord1d',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord1d',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLdouble s'
  },
  'glMultiTexCoord1dARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glMultiTexCoord1dARB',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord1dARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLdouble s'
  },
  'glMultiTexCoord1dv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord1dv_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord1dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLdouble *v'
  },
  'glMultiTexCoord1dvARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord1dvARB_c',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord1dvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLdouble *v'
  },
  'glMultiTexCoord1f' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glMultiTexCoord1f',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord1f',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLfloat s'
  },
  'glMultiTexCoord1fARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glMultiTexCoord1fARB',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord1fARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLfloat s'
  },
  'glMultiTexCoord1fv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord1fv_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord1fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLfloat *v'
  },
  'glMultiTexCoord1fvARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord1fvARB_c',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord1fvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLfloat *v'
  },
  'glMultiTexCoord1hNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLhalf '
      ]
    ],
    'binding_name' => 'glMultiTexCoord1hNV',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewMultiTexCoord1hNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLhalf s'
  },
  'glMultiTexCoord1hvNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLhalf* '
      ]
    ],
    'binding_name' => 'glMultiTexCoord1hvNV_c',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewMultiTexCoord1hvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLhalf* v'
  },
  'glMultiTexCoord1i' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLint '
      ]
    ],
    'binding_name' => 'glMultiTexCoord1i',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord1i',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint s'
  },
  'glMultiTexCoord1iARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLint '
      ]
    ],
    'binding_name' => 'glMultiTexCoord1iARB',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord1iARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint s'
  },
  'glMultiTexCoord1iv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord1iv_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord1iv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLint *v'
  },
  'glMultiTexCoord1ivARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord1ivARB_c',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord1ivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLint *v'
  },
  'glMultiTexCoord1s' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLshort '
      ]
    ],
    'binding_name' => 'glMultiTexCoord1s',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord1s',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLshort s'
  },
  'glMultiTexCoord1sARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLshort '
      ]
    ],
    'binding_name' => 'glMultiTexCoord1sARB',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord1sARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLshort s'
  },
  'glMultiTexCoord1sv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord1sv_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord1sv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLshort *v'
  },
  'glMultiTexCoord1svARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord1svARB_c',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord1svARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLshort *v'
  },
  'glMultiTexCoord2d' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLdouble '
      ],
      [
        't',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glMultiTexCoord2d',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord2d',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLdouble s, GLdouble t'
  },
  'glMultiTexCoord2dARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLdouble '
      ],
      [
        't',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glMultiTexCoord2dARB',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord2dARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLdouble s, GLdouble t'
  },
  'glMultiTexCoord2dv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord2dv_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord2dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLdouble *v'
  },
  'glMultiTexCoord2dvARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord2dvARB_c',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord2dvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLdouble *v'
  },
  'glMultiTexCoord2f' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLfloat '
      ],
      [
        't',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glMultiTexCoord2f',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord2f',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLfloat s, GLfloat t'
  },
  'glMultiTexCoord2fARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLfloat '
      ],
      [
        't',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glMultiTexCoord2fARB',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord2fARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLfloat s, GLfloat t'
  },
  'glMultiTexCoord2fv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord2fv_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord2fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLfloat *v'
  },
  'glMultiTexCoord2fvARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord2fvARB_c',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord2fvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLfloat *v'
  },
  'glMultiTexCoord2hNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLhalf '
      ],
      [
        't',
        'GLhalf '
      ]
    ],
    'binding_name' => 'glMultiTexCoord2hNV',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewMultiTexCoord2hNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLhalf s, GLhalf t'
  },
  'glMultiTexCoord2hvNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLhalf* '
      ]
    ],
    'binding_name' => 'glMultiTexCoord2hvNV_c',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewMultiTexCoord2hvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLhalf* v'
  },
  'glMultiTexCoord2i' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLint '
      ],
      [
        't',
        'GLint '
      ]
    ],
    'binding_name' => 'glMultiTexCoord2i',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord2i',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint s, GLint t'
  },
  'glMultiTexCoord2iARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLint '
      ],
      [
        't',
        'GLint '
      ]
    ],
    'binding_name' => 'glMultiTexCoord2iARB',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord2iARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint s, GLint t'
  },
  'glMultiTexCoord2iv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord2iv_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord2iv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLint *v'
  },
  'glMultiTexCoord2ivARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord2ivARB_c',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord2ivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLint *v'
  },
  'glMultiTexCoord2s' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLshort '
      ],
      [
        't',
        'GLshort '
      ]
    ],
    'binding_name' => 'glMultiTexCoord2s',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord2s',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLshort s, GLshort t'
  },
  'glMultiTexCoord2sARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLshort '
      ],
      [
        't',
        'GLshort '
      ]
    ],
    'binding_name' => 'glMultiTexCoord2sARB',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord2sARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLshort s, GLshort t'
  },
  'glMultiTexCoord2sv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord2sv_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord2sv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLshort *v'
  },
  'glMultiTexCoord2svARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord2svARB_c',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord2svARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLshort *v'
  },
  'glMultiTexCoord3d' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLdouble '
      ],
      [
        't',
        'GLdouble '
      ],
      [
        'r',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glMultiTexCoord3d',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord3d',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLdouble s, GLdouble t, GLdouble r'
  },
  'glMultiTexCoord3dARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLdouble '
      ],
      [
        't',
        'GLdouble '
      ],
      [
        'r',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glMultiTexCoord3dARB',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord3dARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLdouble s, GLdouble t, GLdouble r'
  },
  'glMultiTexCoord3dv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord3dv_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord3dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLdouble *v'
  },
  'glMultiTexCoord3dvARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord3dvARB_c',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord3dvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLdouble *v'
  },
  'glMultiTexCoord3f' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLfloat '
      ],
      [
        't',
        'GLfloat '
      ],
      [
        'r',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glMultiTexCoord3f',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord3f',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLfloat s, GLfloat t, GLfloat r'
  },
  'glMultiTexCoord3fARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLfloat '
      ],
      [
        't',
        'GLfloat '
      ],
      [
        'r',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glMultiTexCoord3fARB',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord3fARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLfloat s, GLfloat t, GLfloat r'
  },
  'glMultiTexCoord3fv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord3fv_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord3fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLfloat *v'
  },
  'glMultiTexCoord3fvARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord3fvARB_c',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord3fvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLfloat *v'
  },
  'glMultiTexCoord3hNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLhalf '
      ],
      [
        't',
        'GLhalf '
      ],
      [
        'r',
        'GLhalf '
      ]
    ],
    'binding_name' => 'glMultiTexCoord3hNV',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewMultiTexCoord3hNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLhalf s, GLhalf t, GLhalf r'
  },
  'glMultiTexCoord3hvNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLhalf* '
      ]
    ],
    'binding_name' => 'glMultiTexCoord3hvNV_c',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewMultiTexCoord3hvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLhalf* v'
  },
  'glMultiTexCoord3i' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLint '
      ],
      [
        't',
        'GLint '
      ],
      [
        'r',
        'GLint '
      ]
    ],
    'binding_name' => 'glMultiTexCoord3i',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord3i',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint s, GLint t, GLint r'
  },
  'glMultiTexCoord3iARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLint '
      ],
      [
        't',
        'GLint '
      ],
      [
        'r',
        'GLint '
      ]
    ],
    'binding_name' => 'glMultiTexCoord3iARB',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord3iARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint s, GLint t, GLint r'
  },
  'glMultiTexCoord3iv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord3iv_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord3iv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLint *v'
  },
  'glMultiTexCoord3ivARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord3ivARB_c',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord3ivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLint *v'
  },
  'glMultiTexCoord3s' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLshort '
      ],
      [
        't',
        'GLshort '
      ],
      [
        'r',
        'GLshort '
      ]
    ],
    'binding_name' => 'glMultiTexCoord3s',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord3s',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLshort s, GLshort t, GLshort r'
  },
  'glMultiTexCoord3sARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLshort '
      ],
      [
        't',
        'GLshort '
      ],
      [
        'r',
        'GLshort '
      ]
    ],
    'binding_name' => 'glMultiTexCoord3sARB',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord3sARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLshort s, GLshort t, GLshort r'
  },
  'glMultiTexCoord3sv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord3sv_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord3sv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLshort *v'
  },
  'glMultiTexCoord3svARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord3svARB_c',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord3svARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLshort *v'
  },
  'glMultiTexCoord4d' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLdouble '
      ],
      [
        't',
        'GLdouble '
      ],
      [
        'r',
        'GLdouble '
      ],
      [
        'q',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glMultiTexCoord4d',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord4d',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q'
  },
  'glMultiTexCoord4dARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLdouble '
      ],
      [
        't',
        'GLdouble '
      ],
      [
        'r',
        'GLdouble '
      ],
      [
        'q',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glMultiTexCoord4dARB',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord4dARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q'
  },
  'glMultiTexCoord4dv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord4dv_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord4dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLdouble *v'
  },
  'glMultiTexCoord4dvARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord4dvARB_c',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord4dvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLdouble *v'
  },
  'glMultiTexCoord4f' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLfloat '
      ],
      [
        't',
        'GLfloat '
      ],
      [
        'r',
        'GLfloat '
      ],
      [
        'q',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glMultiTexCoord4f',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord4f',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q'
  },
  'glMultiTexCoord4fARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLfloat '
      ],
      [
        't',
        'GLfloat '
      ],
      [
        'r',
        'GLfloat '
      ],
      [
        'q',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glMultiTexCoord4fARB',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord4fARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q'
  },
  'glMultiTexCoord4fv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord4fv_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord4fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLfloat *v'
  },
  'glMultiTexCoord4fvARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord4fvARB_c',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord4fvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLfloat *v'
  },
  'glMultiTexCoord4hNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLhalf '
      ],
      [
        't',
        'GLhalf '
      ],
      [
        'r',
        'GLhalf '
      ],
      [
        'q',
        'GLhalf '
      ]
    ],
    'binding_name' => 'glMultiTexCoord4hNV',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewMultiTexCoord4hNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLhalf s, GLhalf t, GLhalf r, GLhalf q'
  },
  'glMultiTexCoord4hvNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLhalf* '
      ]
    ],
    'binding_name' => 'glMultiTexCoord4hvNV_c',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewMultiTexCoord4hvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLhalf* v'
  },
  'glMultiTexCoord4i' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLint '
      ],
      [
        't',
        'GLint '
      ],
      [
        'r',
        'GLint '
      ],
      [
        'q',
        'GLint '
      ]
    ],
    'binding_name' => 'glMultiTexCoord4i',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord4i',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint s, GLint t, GLint r, GLint q'
  },
  'glMultiTexCoord4iARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLint '
      ],
      [
        't',
        'GLint '
      ],
      [
        'r',
        'GLint '
      ],
      [
        'q',
        'GLint '
      ]
    ],
    'binding_name' => 'glMultiTexCoord4iARB',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord4iARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint s, GLint t, GLint r, GLint q'
  },
  'glMultiTexCoord4iv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord4iv_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord4iv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLint *v'
  },
  'glMultiTexCoord4ivARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord4ivARB_c',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord4ivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLint *v'
  },
  'glMultiTexCoord4s' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLshort '
      ],
      [
        't',
        'GLshort '
      ],
      [
        'r',
        'GLshort '
      ],
      [
        'q',
        'GLshort '
      ]
    ],
    'binding_name' => 'glMultiTexCoord4s',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord4s',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLshort s, GLshort t, GLshort r, GLshort q'
  },
  'glMultiTexCoord4sARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLshort '
      ],
      [
        't',
        'GLshort '
      ],
      [
        'r',
        'GLshort '
      ],
      [
        'q',
        'GLshort '
      ]
    ],
    'binding_name' => 'glMultiTexCoord4sARB',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord4sARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLshort s, GLshort t, GLshort r, GLshort q'
  },
  'glMultiTexCoord4sv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord4sv_c',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewMultiTexCoord4sv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLshort *v'
  },
  'glMultiTexCoord4svARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'v',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glMultiTexCoord4svARB_c',
    'feature' => 'GL_ARB_multitexture',
    'glewImpl' => '__glewMultiTexCoord4svARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, const GLshort *v'
  },
  'glMultiTexCoord4x' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        's',
        'GLfixed '
      ],
      [
        't',
        'GLfixed '
      ],
      [
        'r',
        'GLfixed '
      ],
      [
        'q',
        'GLfixed '
      ]
    ],
    'binding_name' => 'glMultiTexCoord4x',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewMultiTexCoord4x',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q'
  },
  'glMultiTexCoordP1ui' => {
    'argdata' => [
      [
        'texture',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'coords',
        'GLuint '
      ]
    ],
    'binding_name' => 'glMultiTexCoordP1ui',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewMultiTexCoordP1ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texture, GLenum type, GLuint coords'
  },
  'glMultiTexCoordP1uiv' => {
    'argdata' => [
      [
        'texture',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'coords',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glMultiTexCoordP1uiv_c',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewMultiTexCoordP1uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texture, GLenum type, const GLuint* coords'
  },
  'glMultiTexCoordP2ui' => {
    'argdata' => [
      [
        'texture',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'coords',
        'GLuint '
      ]
    ],
    'binding_name' => 'glMultiTexCoordP2ui',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewMultiTexCoordP2ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texture, GLenum type, GLuint coords'
  },
  'glMultiTexCoordP2uiv' => {
    'argdata' => [
      [
        'texture',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'coords',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glMultiTexCoordP2uiv_c',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewMultiTexCoordP2uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texture, GLenum type, const GLuint* coords'
  },
  'glMultiTexCoordP3ui' => {
    'argdata' => [
      [
        'texture',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'coords',
        'GLuint '
      ]
    ],
    'binding_name' => 'glMultiTexCoordP3ui',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewMultiTexCoordP3ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texture, GLenum type, GLuint coords'
  },
  'glMultiTexCoordP3uiv' => {
    'argdata' => [
      [
        'texture',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'coords',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glMultiTexCoordP3uiv_c',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewMultiTexCoordP3uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texture, GLenum type, const GLuint* coords'
  },
  'glMultiTexCoordP4ui' => {
    'argdata' => [
      [
        'texture',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'coords',
        'GLuint '
      ]
    ],
    'binding_name' => 'glMultiTexCoordP4ui',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewMultiTexCoordP4ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texture, GLenum type, GLuint coords'
  },
  'glMultiTexCoordP4uiv' => {
    'argdata' => [
      [
        'texture',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'coords',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glMultiTexCoordP4uiv_c',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewMultiTexCoordP4uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texture, GLenum type, const GLuint* coords'
  },
  'glMultiTexCoordPointerEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'const void *'
      ]
    ],
    'binding_name' => 'glMultiTexCoordPointerEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMultiTexCoordPointerEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer'
  },
  'glMultiTexEnvfEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glMultiTexEnvfEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMultiTexEnvfEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLenum pname, GLfloat param'
  },
  'glMultiTexEnvfvEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glMultiTexEnvfvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMultiTexEnvfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLenum pname, const GLfloat* params'
  },
  'glMultiTexEnviEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glMultiTexEnviEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMultiTexEnviEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLenum pname, GLint param'
  },
  'glMultiTexEnvivEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glMultiTexEnvivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMultiTexEnvivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLenum pname, const GLint* params'
  },
  'glMultiTexGendEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'coord',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glMultiTexGendEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMultiTexGendEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum coord, GLenum pname, GLdouble param'
  },
  'glMultiTexGendvEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'coord',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glMultiTexGendvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMultiTexGendvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum coord, GLenum pname, const GLdouble* params'
  },
  'glMultiTexGenfEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'coord',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glMultiTexGenfEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMultiTexGenfEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum coord, GLenum pname, GLfloat param'
  },
  'glMultiTexGenfvEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'coord',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glMultiTexGenfvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMultiTexGenfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum coord, GLenum pname, const GLfloat* params'
  },
  'glMultiTexGeniEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'coord',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glMultiTexGeniEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMultiTexGeniEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum coord, GLenum pname, GLint param'
  },
  'glMultiTexGenivEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'coord',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glMultiTexGenivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMultiTexGenivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum coord, GLenum pname, const GLint* params'
  },
  'glMultiTexImage1DEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glMultiTexImage1DEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMultiTexImage1DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels'
  },
  'glMultiTexImage2DEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glMultiTexImage2DEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMultiTexImage2DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels'
  },
  'glMultiTexImage3DEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glMultiTexImage3DEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMultiTexImage3DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels'
  },
  'glMultiTexParameterIivEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glMultiTexParameterIivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMultiTexParameterIivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLenum pname, const GLint* params'
  },
  'glMultiTexParameterIuivEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glMultiTexParameterIuivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMultiTexParameterIuivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLenum pname, const GLuint* params'
  },
  'glMultiTexParameterfEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glMultiTexParameterfEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMultiTexParameterfEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLenum pname, GLfloat param'
  },
  'glMultiTexParameterfvEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glMultiTexParameterfvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMultiTexParameterfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLenum pname, const GLfloat* param'
  },
  'glMultiTexParameteriEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glMultiTexParameteriEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMultiTexParameteriEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLenum pname, GLint param'
  },
  'glMultiTexParameterivEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glMultiTexParameterivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMultiTexParameterivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLenum pname, const GLint* param'
  },
  'glMultiTexRenderbufferEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'renderbuffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glMultiTexRenderbufferEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMultiTexRenderbufferEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLuint renderbuffer'
  },
  'glMultiTexSubImage1DEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glMultiTexSubImage1DEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMultiTexSubImage1DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels'
  },
  'glMultiTexSubImage2DEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glMultiTexSubImage2DEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMultiTexSubImage2DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels'
  },
  'glMultiTexSubImage3DEXT' => {
    'argdata' => [
      [
        'texunit',
        'GLenum '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glMultiTexSubImage3DEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewMultiTexSubImage3DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels'
  },
  'glMulticastBarrierNV' => {
    'binding_name' => 'glMulticastBarrierNV',
    'feature' => 'GL_NV_gpu_multicast',
    'glewImpl' => '__glewMulticastBarrierNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glMulticastBlitFramebufferNV' => {
    'argdata' => [
      [
        'srcGpu',
        'GLuint '
      ],
      [
        'dstGpu',
        'GLuint '
      ],
      [
        'srcX0',
        'GLint '
      ],
      [
        'srcY0',
        'GLint '
      ],
      [
        'srcX1',
        'GLint '
      ],
      [
        'srcY1',
        'GLint '
      ],
      [
        'dstX0',
        'GLint '
      ],
      [
        'dstY0',
        'GLint '
      ],
      [
        'dstX1',
        'GLint '
      ],
      [
        'dstY1',
        'GLint '
      ],
      [
        'mask',
        'GLbitfield '
      ],
      [
        'filter',
        'GLenum '
      ]
    ],
    'binding_name' => 'glMulticastBlitFramebufferNV',
    'feature' => 'GL_NV_gpu_multicast',
    'glewImpl' => '__glewMulticastBlitFramebufferNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter'
  },
  'glMulticastBufferSubDataNV' => {
    'argdata' => [
      [
        'gpuMask',
        'GLbitfield '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glMulticastBufferSubDataNV_c',
    'feature' => 'GL_NV_gpu_multicast',
    'glewImpl' => '__glewMulticastBufferSubDataNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data'
  },
  'glMulticastCopyBufferSubDataNV' => {
    'argdata' => [
      [
        'readGpu',
        'GLuint '
      ],
      [
        'writeGpuMask',
        'GLbitfield '
      ],
      [
        'readBuffer',
        'GLuint '
      ],
      [
        'writeBuffer',
        'GLuint '
      ],
      [
        'readOffset',
        'GLintptr '
      ],
      [
        'writeOffset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ]
    ],
    'binding_name' => 'glMulticastCopyBufferSubDataNV',
    'feature' => 'GL_NV_gpu_multicast',
    'glewImpl' => '__glewMulticastCopyBufferSubDataNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size'
  },
  'glMulticastCopyImageSubDataNV' => {
    'argdata' => [
      [
        'srcGpu',
        'GLuint '
      ],
      [
        'dstGpuMask',
        'GLbitfield '
      ],
      [
        'srcName',
        'GLuint '
      ],
      [
        'srcTarget',
        'GLenum '
      ],
      [
        'srcLevel',
        'GLint '
      ],
      [
        'srcX',
        'GLint '
      ],
      [
        'srcY',
        'GLint '
      ],
      [
        'srcZ',
        'GLint '
      ],
      [
        'dstName',
        'GLuint '
      ],
      [
        'dstTarget',
        'GLenum '
      ],
      [
        'dstLevel',
        'GLint '
      ],
      [
        'dstX',
        'GLint '
      ],
      [
        'dstY',
        'GLint '
      ],
      [
        'dstZ',
        'GLint '
      ],
      [
        'srcWidth',
        'GLsizei '
      ],
      [
        'srcHeight',
        'GLsizei '
      ],
      [
        'srcDepth',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glMulticastCopyImageSubDataNV',
    'feature' => 'GL_NV_gpu_multicast',
    'glewImpl' => '__glewMulticastCopyImageSubDataNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth'
  },
  'glMulticastFramebufferSampleLocationsfvNV' => {
    'argdata' => [
      [
        'gpu',
        'GLuint '
      ],
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'start',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'v',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glMulticastFramebufferSampleLocationsfvNV_c',
    'feature' => 'GL_NV_gpu_multicast',
    'glewImpl' => '__glewMulticastFramebufferSampleLocationsfvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v'
  },
  'glMulticastGetQueryObjecti64vNV' => {
    'argdata' => [
      [
        'gpu',
        'GLuint '
      ],
      [
        'id',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint64* '
      ]
    ],
    'binding_name' => 'glMulticastGetQueryObjecti64vNV_c',
    'feature' => 'GL_NV_gpu_multicast',
    'glewImpl' => '__glewMulticastGetQueryObjecti64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint gpu, GLuint id, GLenum pname, GLint64* params'
  },
  'glMulticastGetQueryObjectivNV' => {
    'argdata' => [
      [
        'gpu',
        'GLuint '
      ],
      [
        'id',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glMulticastGetQueryObjectivNV_c',
    'feature' => 'GL_NV_gpu_multicast',
    'glewImpl' => '__glewMulticastGetQueryObjectivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint gpu, GLuint id, GLenum pname, GLint* params'
  },
  'glMulticastGetQueryObjectui64vNV' => {
    'argdata' => [
      [
        'gpu',
        'GLuint '
      ],
      [
        'id',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLuint64* '
      ]
    ],
    'binding_name' => 'glMulticastGetQueryObjectui64vNV_c',
    'feature' => 'GL_NV_gpu_multicast',
    'glewImpl' => '__glewMulticastGetQueryObjectui64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint gpu, GLuint id, GLenum pname, GLuint64* params'
  },
  'glMulticastGetQueryObjectuivNV' => {
    'argdata' => [
      [
        'gpu',
        'GLuint '
      ],
      [
        'id',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glMulticastGetQueryObjectuivNV_c',
    'feature' => 'GL_NV_gpu_multicast',
    'glewImpl' => '__glewMulticastGetQueryObjectuivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint gpu, GLuint id, GLenum pname, GLuint* params'
  },
  'glMulticastWaitSyncNV' => {
    'argdata' => [
      [
        'signalGpu',
        'GLuint '
      ],
      [
        'waitGpuMask',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glMulticastWaitSyncNV',
    'feature' => 'GL_NV_gpu_multicast',
    'glewImpl' => '__glewMulticastWaitSyncNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint signalGpu, GLbitfield waitGpuMask'
  },
  'glMultisampleSubRectPosSGIS' => {
    'argdata' => [
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ]
    ],
    'binding_name' => 'glMultisampleSubRectPosSGIS',
    'feature' => 'GL_SGIS_shared_multisample',
    'glewImpl' => '__glewMultisampleSubRectPosSGIS',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint x, GLint y'
  },
  'glNamedBufferData' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'size',
        'GLsizeiptr '
      ],
      [
        'data',
        'const void *'
      ],
      [
        'usage',
        'GLenum '
      ]
    ],
    'binding_name' => 'glNamedBufferData_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewNamedBufferData',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLsizeiptr size, const void *data, GLenum usage'
  },
  'glNamedBufferDataEXT' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'size',
        'GLsizeiptr '
      ],
      [
        'data',
        'const void *'
      ],
      [
        'usage',
        'GLenum '
      ]
    ],
    'binding_name' => 'glNamedBufferDataEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewNamedBufferDataEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLsizeiptr size, const void *data, GLenum usage'
  },
  'glNamedBufferStorage' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'size',
        'GLsizeiptr '
      ],
      [
        'data',
        'const void *'
      ],
      [
        'flags',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glNamedBufferStorage_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewNamedBufferStorage',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags'
  },
  'glNamedBufferStorageEXT' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'size',
        'GLsizeiptr '
      ],
      [
        'data',
        'const void *'
      ],
      [
        'flags',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glNamedBufferStorageEXT_c',
    'feature' => 'GL_EXT_buffer_storage',
    'glewImpl' => '__glewNamedBufferStorageEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags'
  },
  'glNamedBufferStorageExternalEXT' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ],
      [
        'clientBuffer',
        'GLeglClientBufferEXT '
      ],
      [
        'flags',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glNamedBufferStorageExternalEXT',
    'feature' => 'GL_EXT_external_buffer',
    'glewImpl' => '__glewNamedBufferStorageExternalEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags'
  },
  'glNamedBufferStorageMemEXT' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'size',
        'GLsizeiptr '
      ],
      [
        'memory',
        'GLuint '
      ],
      [
        'offset',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glNamedBufferStorageMemEXT',
    'feature' => 'GL_EXT_memory_object',
    'glewImpl' => '__glewNamedBufferStorageMemEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset'
  },
  'glNamedBufferSubData' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glNamedBufferSubData_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewNamedBufferSubData',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data'
  },
  'glNamedBufferSubDataEXT' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ],
      [
        'data',
        'const void *'
      ]
    ],
    'binding_name' => 'glNamedBufferSubDataEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewNamedBufferSubDataEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data'
  },
  'glNamedCopyBufferSubDataEXT' => {
    'argdata' => [
      [
        'readBuffer',
        'GLuint '
      ],
      [
        'writeBuffer',
        'GLuint '
      ],
      [
        'readOffset',
        'GLintptr '
      ],
      [
        'writeOffset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ]
    ],
    'binding_name' => 'glNamedCopyBufferSubDataEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewNamedCopyBufferSubDataEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size'
  },
  'glNamedFramebufferDrawBuffer' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glNamedFramebufferDrawBuffer',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewNamedFramebufferDrawBuffer',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum mode'
  },
  'glNamedFramebufferDrawBuffers' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'bufs',
        'const GLenum* '
      ]
    ],
    'binding_name' => 'glNamedFramebufferDrawBuffers_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewNamedFramebufferDrawBuffers',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLsizei n, const GLenum* bufs'
  },
  'glNamedFramebufferParameteri' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glNamedFramebufferParameteri',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewNamedFramebufferParameteri',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum pname, GLint param'
  },
  'glNamedFramebufferParameteriEXT' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glNamedFramebufferParameteriEXT',
    'feature' => 'GL_ARB_framebuffer_no_attachments',
    'glewImpl' => '__glewNamedFramebufferParameteriEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum pname, GLint param'
  },
  'glNamedFramebufferReadBuffer' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glNamedFramebufferReadBuffer',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewNamedFramebufferReadBuffer',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum mode'
  },
  'glNamedFramebufferRenderbuffer' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'renderbuffertarget',
        'GLenum '
      ],
      [
        'renderbuffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glNamedFramebufferRenderbuffer',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewNamedFramebufferRenderbuffer',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer'
  },
  'glNamedFramebufferRenderbufferEXT' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'renderbuffertarget',
        'GLenum '
      ],
      [
        'renderbuffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glNamedFramebufferRenderbufferEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewNamedFramebufferRenderbufferEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer'
  },
  'glNamedFramebufferSampleLocationsfvARB' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'start',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'v',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glNamedFramebufferSampleLocationsfvARB_c',
    'feature' => 'GL_ARB_sample_locations',
    'glewImpl' => '__glewNamedFramebufferSampleLocationsfvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v'
  },
  'glNamedFramebufferSampleLocationsfvNV' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'start',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'v',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glNamedFramebufferSampleLocationsfvNV_c',
    'feature' => 'GL_NV_sample_locations',
    'glewImpl' => '__glewNamedFramebufferSampleLocationsfvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v'
  },
  'glNamedFramebufferSamplePositionsfvAMD' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'numsamples',
        'GLuint '
      ],
      [
        'pixelindex',
        'GLuint '
      ],
      [
        'values',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glNamedFramebufferSamplePositionsfvAMD_c',
    'feature' => 'GL_AMD_framebuffer_sample_positions',
    'glewImpl' => '__glewNamedFramebufferSamplePositionsfvAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat* values'
  },
  'glNamedFramebufferTexture' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ]
    ],
    'binding_name' => 'glNamedFramebufferTexture',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewNamedFramebufferTexture',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum attachment, GLuint texture, GLint level'
  },
  'glNamedFramebufferTexture1DEXT' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'textarget',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ]
    ],
    'binding_name' => 'glNamedFramebufferTexture1DEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewNamedFramebufferTexture1DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level'
  },
  'glNamedFramebufferTexture2DEXT' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'textarget',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ]
    ],
    'binding_name' => 'glNamedFramebufferTexture2DEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewNamedFramebufferTexture2DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level'
  },
  'glNamedFramebufferTexture3DEXT' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'textarget',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ]
    ],
    'binding_name' => 'glNamedFramebufferTexture3DEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewNamedFramebufferTexture3DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset'
  },
  'glNamedFramebufferTextureEXT' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ]
    ],
    'binding_name' => 'glNamedFramebufferTextureEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewNamedFramebufferTextureEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum attachment, GLuint texture, GLint level'
  },
  'glNamedFramebufferTextureFaceEXT' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'face',
        'GLenum '
      ]
    ],
    'binding_name' => 'glNamedFramebufferTextureFaceEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewNamedFramebufferTextureFaceEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face'
  },
  'glNamedFramebufferTextureLayer' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'layer',
        'GLint '
      ]
    ],
    'binding_name' => 'glNamedFramebufferTextureLayer',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewNamedFramebufferTextureLayer',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer'
  },
  'glNamedFramebufferTextureLayerEXT' => {
    'argdata' => [
      [
        'framebuffer',
        'GLuint '
      ],
      [
        'attachment',
        'GLenum '
      ],
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'layer',
        'GLint '
      ]
    ],
    'binding_name' => 'glNamedFramebufferTextureLayerEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewNamedFramebufferTextureLayerEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer'
  },
  'glNamedProgramLocalParameter4dEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ],
      [
        'w',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glNamedProgramLocalParameter4dEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewNamedProgramLocalParameter4dEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w'
  },
  'glNamedProgramLocalParameter4dvEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glNamedProgramLocalParameter4dvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewNamedProgramLocalParameter4dvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum target, GLuint index, const GLdouble* params'
  },
  'glNamedProgramLocalParameter4fEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ],
      [
        'w',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glNamedProgramLocalParameter4fEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewNamedProgramLocalParameter4fEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w'
  },
  'glNamedProgramLocalParameter4fvEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glNamedProgramLocalParameter4fvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewNamedProgramLocalParameter4fvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum target, GLuint index, const GLfloat* params'
  },
  'glNamedProgramLocalParameterI4iEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'z',
        'GLint '
      ],
      [
        'w',
        'GLint '
      ]
    ],
    'binding_name' => 'glNamedProgramLocalParameterI4iEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewNamedProgramLocalParameterI4iEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w'
  },
  'glNamedProgramLocalParameterI4ivEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glNamedProgramLocalParameterI4ivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewNamedProgramLocalParameterI4ivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum target, GLuint index, const GLint* params'
  },
  'glNamedProgramLocalParameterI4uiEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLuint '
      ],
      [
        'y',
        'GLuint '
      ],
      [
        'z',
        'GLuint '
      ],
      [
        'w',
        'GLuint '
      ]
    ],
    'binding_name' => 'glNamedProgramLocalParameterI4uiEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewNamedProgramLocalParameterI4uiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w'
  },
  'glNamedProgramLocalParameterI4uivEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glNamedProgramLocalParameterI4uivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewNamedProgramLocalParameterI4uivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum target, GLuint index, const GLuint* params'
  },
  'glNamedProgramLocalParameters4fvEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glNamedProgramLocalParameters4fvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewNamedProgramLocalParameters4fvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat* params'
  },
  'glNamedProgramLocalParametersI4ivEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'params',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glNamedProgramLocalParametersI4ivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewNamedProgramLocalParametersI4ivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum target, GLuint index, GLsizei count, const GLint* params'
  },
  'glNamedProgramLocalParametersI4uivEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'params',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glNamedProgramLocalParametersI4uivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewNamedProgramLocalParametersI4uivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint* params'
  },
  'glNamedProgramStringEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'len',
        'GLsizei '
      ],
      [
        'string',
        'const void *'
      ]
    ],
    'binding_name' => 'glNamedProgramStringEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewNamedProgramStringEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum target, GLenum format, GLsizei len, const void *string'
  },
  'glNamedRenderbufferStorage' => {
    'argdata' => [
      [
        'renderbuffer',
        'GLuint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glNamedRenderbufferStorage',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewNamedRenderbufferStorage',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height'
  },
  'glNamedRenderbufferStorageEXT' => {
    'argdata' => [
      [
        'renderbuffer',
        'GLuint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glNamedRenderbufferStorageEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewNamedRenderbufferStorageEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height'
  },
  'glNamedRenderbufferStorageMultisample' => {
    'argdata' => [
      [
        'renderbuffer',
        'GLuint '
      ],
      [
        'samples',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glNamedRenderbufferStorageMultisample',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewNamedRenderbufferStorageMultisample',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height'
  },
  'glNamedRenderbufferStorageMultisampleCoverageEXT' => {
    'argdata' => [
      [
        'renderbuffer',
        'GLuint '
      ],
      [
        'coverageSamples',
        'GLsizei '
      ],
      [
        'colorSamples',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glNamedRenderbufferStorageMultisampleCoverageEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewNamedRenderbufferStorageMultisampleCoverageEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height'
  },
  'glNamedRenderbufferStorageMultisampleEXT' => {
    'argdata' => [
      [
        'renderbuffer',
        'GLuint '
      ],
      [
        'samples',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glNamedRenderbufferStorageMultisampleEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewNamedRenderbufferStorageMultisampleEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height'
  },
  'glNamedStringARB' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'namelen',
        'GLint '
      ],
      [
        'name',
        'const GLchar* '
      ],
      [
        'stringlen',
        'GLint '
      ],
      [
        'string',
        'const GLchar *'
      ]
    ],
    'binding_name' => 'glNamedStringARB_c',
    'feature' => 'GL_ARB_shading_language_include',
    'glewImpl' => '__glewNamedStringARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLint namelen, const GLchar* name, GLint stringlen, const GLchar *string'
  },
  'glNewBufferRegion' => {
    'argdata' => [
      [
        'region',
        'GLenum '
      ]
    ],
    'binding_name' => 'glNewBufferRegion',
    'feature' => 'GL_KTX_buffer_region',
    'glewImpl' => '__glewNewBufferRegion',
    'glewtype' => 'fun',
    'restype' => 'GLuint',
    'signature' => 'GLenum region'
  },
  'glNewList' => {
    'argdata' => [
      [
        'list',
        'GLuint '
      ],
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glNewList',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint list, GLenum mode'
  },
  'glNewObjectBufferATI' => {
    'argdata' => [
      [
        'size',
        'GLsizei '
      ],
      [
        'pointer',
        'const void *'
      ],
      [
        'usage',
        'GLenum '
      ]
    ],
    'binding_name' => 'glNewObjectBufferATI_c',
    'feature' => 'GL_ATI_vertex_array_object',
    'glewImpl' => '__glewNewObjectBufferATI',
    'glewtype' => 'fun',
    'restype' => 'GLuint',
    'signature' => 'GLsizei size, const void *pointer, GLenum usage'
  },
  'glNonlinLightfvSGIX' => {
    'argdata' => [
      [
        'light',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'terms',
        'GLint '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glNonlinLightfvSGIX_c',
    'feature' => 'GL_SGIX_nonlinear_lighting_pervertex',
    'glewImpl' => '__glewNonlinLightfvSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum light, GLenum pname, GLint terms, GLfloat* params'
  },
  'glNonlinMaterialfvSGIX' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'terms',
        'GLint '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glNonlinMaterialfvSGIX_c',
    'feature' => 'GL_SGIX_nonlinear_lighting_pervertex',
    'glewImpl' => '__glewNonlinMaterialfvSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum pname, GLint terms, const GLfloat* params'
  },
  'glNormal3b' => {
    'argdata' => [
      [
        'nx',
        'GLbyte '
      ],
      [
        'ny',
        'GLbyte '
      ],
      [
        'nz',
        'GLbyte '
      ]
    ],
    'binding_name' => 'glNormal3b',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLbyte nx, GLbyte ny, GLbyte nz'
  },
  'glNormal3bv' => {
    'argdata' => [
      [
        'v',
        'const GLbyte *'
      ]
    ],
    'binding_name' => 'glNormal3bv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLbyte *v'
  },
  'glNormal3d' => {
    'argdata' => [
      [
        'nx',
        'GLdouble '
      ],
      [
        'ny',
        'GLdouble '
      ],
      [
        'nz',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glNormal3d',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble nx, GLdouble ny, GLdouble nz'
  },
  'glNormal3dv' => {
    'argdata' => [
      [
        'v',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glNormal3dv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble *v'
  },
  'glNormal3f' => {
    'argdata' => [
      [
        'nx',
        'GLfloat '
      ],
      [
        'ny',
        'GLfloat '
      ],
      [
        'nz',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glNormal3f',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat nx, GLfloat ny, GLfloat nz'
  },
  'glNormal3fVertex3fSUN' => {
    'argdata' => [
      [
        'nx',
        'GLfloat '
      ],
      [
        'ny',
        'GLfloat '
      ],
      [
        'nz',
        'GLfloat '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glNormal3fVertex3fSUN',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewNormal3fVertex3fSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z'
  },
  'glNormal3fVertex3fvSUN' => {
    'argdata' => [
      [
        'n',
        'const GLfloat* '
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glNormal3fVertex3fvSUN_c',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewNormal3fVertex3fvSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat* n, const GLfloat *v'
  },
  'glNormal3fv' => {
    'argdata' => [
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glNormal3fv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat *v'
  },
  'glNormal3hNV' => {
    'argdata' => [
      [
        'nx',
        'GLhalf '
      ],
      [
        'ny',
        'GLhalf '
      ],
      [
        'nz',
        'GLhalf '
      ]
    ],
    'binding_name' => 'glNormal3hNV',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewNormal3hNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhalf nx, GLhalf ny, GLhalf nz'
  },
  'glNormal3hvNV' => {
    'argdata' => [
      [
        'v',
        'const GLhalf* '
      ]
    ],
    'binding_name' => 'glNormal3hvNV_c',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewNormal3hvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLhalf* v'
  },
  'glNormal3i' => {
    'argdata' => [
      [
        'nx',
        'GLint '
      ],
      [
        'ny',
        'GLint '
      ],
      [
        'nz',
        'GLint '
      ]
    ],
    'binding_name' => 'glNormal3i',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint nx, GLint ny, GLint nz'
  },
  'glNormal3iv' => {
    'argdata' => [
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glNormal3iv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLint *v'
  },
  'glNormal3s' => {
    'argdata' => [
      [
        'nx',
        'GLshort '
      ],
      [
        'ny',
        'GLshort '
      ],
      [
        'nz',
        'GLshort '
      ]
    ],
    'binding_name' => 'glNormal3s',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLshort nx, GLshort ny, GLshort nz'
  },
  'glNormal3sv' => {
    'argdata' => [
      [
        'v',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glNormal3sv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLshort *v'
  },
  'glNormal3x' => {
    'argdata' => [
      [
        'nx',
        'GLfixed '
      ],
      [
        'ny',
        'GLfixed '
      ],
      [
        'nz',
        'GLfixed '
      ]
    ],
    'binding_name' => 'glNormal3x',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewNormal3x',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfixed nx, GLfixed ny, GLfixed nz'
  },
  'glNormalFormatNV' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glNormalFormatNV',
    'feature' => 'GL_NV_vertex_buffer_unified_memory',
    'glewImpl' => '__glewNormalFormatNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLsizei stride'
  },
  'glNormalP3ui' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'coords',
        'GLuint '
      ]
    ],
    'binding_name' => 'glNormalP3ui',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewNormalP3ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLuint coords'
  },
  'glNormalP3uiv' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'coords',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glNormalP3uiv_c',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewNormalP3uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, const GLuint* coords'
  },
  'glNormalPointer' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'const void *'
      ]
    ],
    'binding_name' => 'glNormalPointer_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLsizei stride, const void *pointer'
  },
  'glNormalPointerEXT' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'pointer',
        'const void *'
      ]
    ],
    'binding_name' => 'glNormalPointerEXT_c',
    'feature' => 'GL_EXT_vertex_array',
    'glewImpl' => '__glewNormalPointerEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLsizei stride, GLsizei count, const void *pointer'
  },
  'glNormalPointerListIBM' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLint '
      ],
      [
        'pointer',
        'const void** '
      ],
      [
        'ptrstride',
        'GLint '
      ]
    ],
    'binding_name' => 'glNormalPointerListIBM_c',
    'feature' => 'GL_IBM_vertex_array_lists',
    'glewImpl' => '__glewNormalPointerListIBM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLint stride, const void** pointer, GLint ptrstride'
  },
  'glNormalPointervINTEL' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'pointer',
        'const void** '
      ]
    ],
    'binding_name' => 'glNormalPointervINTEL_c',
    'feature' => 'GL_INTEL_parallel_arrays',
    'glewImpl' => '__glewNormalPointervINTEL',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, const void** pointer'
  },
  'glNormalStream3bATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'x',
        'GLbyte '
      ],
      [
        'y',
        'GLbyte '
      ],
      [
        'z',
        'GLbyte '
      ]
    ],
    'binding_name' => 'glNormalStream3bATI',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewNormalStream3bATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, GLbyte x, GLbyte y, GLbyte z'
  },
  'glNormalStream3bvATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'coords',
        'const GLbyte *'
      ]
    ],
    'binding_name' => 'glNormalStream3bvATI_c',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewNormalStream3bvATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, const GLbyte *coords'
  },
  'glNormalStream3dATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glNormalStream3dATI',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewNormalStream3dATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, GLdouble x, GLdouble y, GLdouble z'
  },
  'glNormalStream3dvATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'coords',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glNormalStream3dvATI_c',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewNormalStream3dvATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, const GLdouble *coords'
  },
  'glNormalStream3fATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glNormalStream3fATI',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewNormalStream3fATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, GLfloat x, GLfloat y, GLfloat z'
  },
  'glNormalStream3fvATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'coords',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glNormalStream3fvATI_c',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewNormalStream3fvATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, const GLfloat *coords'
  },
  'glNormalStream3iATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'z',
        'GLint '
      ]
    ],
    'binding_name' => 'glNormalStream3iATI',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewNormalStream3iATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, GLint x, GLint y, GLint z'
  },
  'glNormalStream3ivATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'coords',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glNormalStream3ivATI_c',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewNormalStream3ivATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, const GLint *coords'
  },
  'glNormalStream3sATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ],
      [
        'z',
        'GLshort '
      ]
    ],
    'binding_name' => 'glNormalStream3sATI',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewNormalStream3sATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, GLshort x, GLshort y, GLshort z'
  },
  'glNormalStream3svATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'coords',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glNormalStream3svATI_c',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewNormalStream3svATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, const GLshort *coords'
  },
  'glObjectLabel' => {
    'argdata' => [
      [
        'identifier',
        'GLenum '
      ],
      [
        'name',
        'GLuint '
      ],
      [
        'length',
        'GLsizei '
      ],
      [
        'label',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glObjectLabel_c',
    'feature' => 'GL_KHR_debug',
    'glewImpl' => '__glewObjectLabel',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum identifier, GLuint name, GLsizei length, const GLchar* label'
  },
  'glObjectPtrLabel' => {
    'argdata' => [
      [
        'ptr',
        'void* '
      ],
      [
        'length',
        'GLsizei '
      ],
      [
        'label',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glObjectPtrLabel_c',
    'feature' => 'GL_KHR_debug',
    'glewImpl' => '__glewObjectPtrLabel',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void* ptr, GLsizei length, const GLchar* label'
  },
  'glObjectPurgeableAPPLE' => {
    'argdata' => [
      [
        'objectType',
        'GLenum '
      ],
      [
        'name',
        'GLuint '
      ],
      [
        'option',
        'GLenum '
      ]
    ],
    'binding_name' => 'glObjectPurgeableAPPLE',
    'feature' => 'GL_APPLE_object_purgeable',
    'glewImpl' => '__glewObjectPurgeableAPPLE',
    'glewtype' => 'fun',
    'restype' => 'GLenum',
    'signature' => 'GLenum objectType, GLuint name, GLenum option'
  },
  'glObjectUnpurgeableAPPLE' => {
    'argdata' => [
      [
        'objectType',
        'GLenum '
      ],
      [
        'name',
        'GLuint '
      ],
      [
        'option',
        'GLenum '
      ]
    ],
    'binding_name' => 'glObjectUnpurgeableAPPLE',
    'feature' => 'GL_APPLE_object_purgeable',
    'glewImpl' => '__glewObjectUnpurgeableAPPLE',
    'glewtype' => 'fun',
    'restype' => 'GLenum',
    'signature' => 'GLenum objectType, GLuint name, GLenum option'
  },
  'glOrtho' => {
    'argdata' => [
      [
        'left',
        'GLdouble '
      ],
      [
        'right',
        'GLdouble '
      ],
      [
        'bottom',
        'GLdouble '
      ],
      [
        'top',
        'GLdouble '
      ],
      [
        'zNear',
        'GLdouble '
      ],
      [
        'zFar',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glOrtho',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar'
  },
  'glOrthof' => {
    'argdata' => [
      [
        'left',
        'GLfloat '
      ],
      [
        'right',
        'GLfloat '
      ],
      [
        'bottom',
        'GLfloat '
      ],
      [
        'top',
        'GLfloat '
      ],
      [
        'zNear',
        'GLfloat '
      ],
      [
        'zFar',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glOrthof',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewOrthof',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar'
  },
  'glOrthox' => {
    'argdata' => [
      [
        'left',
        'GLfixed '
      ],
      [
        'right',
        'GLfixed '
      ],
      [
        'bottom',
        'GLfixed '
      ],
      [
        'top',
        'GLfixed '
      ],
      [
        'zNear',
        'GLfixed '
      ],
      [
        'zFar',
        'GLfixed '
      ]
    ],
    'binding_name' => 'glOrthox',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewOrthox',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar'
  },
  'glPNTrianglesfATI' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glPNTrianglesfATI',
    'feature' => 'GL_ATI_pn_triangles',
    'glewImpl' => '__glewPNTrianglesfATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfloat param'
  },
  'glPNTrianglesiATI' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glPNTrianglesiATI',
    'feature' => 'GL_ATI_pn_triangles',
    'glewImpl' => '__glewPNTrianglesiATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint param'
  },
  'glPassTexCoordATI' => {
    'argdata' => [
      [
        'dst',
        'GLuint '
      ],
      [
        'coord',
        'GLuint '
      ],
      [
        'swizzle',
        'GLenum '
      ]
    ],
    'binding_name' => 'glPassTexCoordATI',
    'feature' => 'GL_ATI_fragment_shader',
    'glewImpl' => '__glewPassTexCoordATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint dst, GLuint coord, GLenum swizzle'
  },
  'glPassThrough' => {
    'argdata' => [
      [
        'token',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glPassThrough',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat token'
  },
  'glPatchParameterfv' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'values',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glPatchParameterfv_c',
    'feature' => 'GL_ARB_tessellation_shader',
    'glewImpl' => '__glewPatchParameterfv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, const GLfloat* values'
  },
  'glPatchParameteri' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'value',
        'GLint '
      ]
    ],
    'binding_name' => 'glPatchParameteri',
    'feature' => 'GL_ARB_tessellation_shader',
    'glewImpl' => '__glewPatchParameteri',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint value'
  },
  'glPathColorGenNV' => {
    'argdata' => [
      [
        'color',
        'GLenum '
      ],
      [
        'genMode',
        'GLenum '
      ],
      [
        'colorFormat',
        'GLenum '
      ],
      [
        'coeffs',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glPathColorGenNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewPathColorGenNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat* coeffs'
  },
  'glPathCommandsNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'numCommands',
        'GLsizei '
      ],
      [
        'commands',
        'const GLubyte* '
      ],
      [
        'numCoords',
        'GLsizei '
      ],
      [
        'coordType',
        'GLenum '
      ],
      [
        'coords',
        'const void*'
      ]
    ],
    'binding_name' => 'glPathCommandsNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewPathCommandsNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint path, GLsizei numCommands, const GLubyte* commands, GLsizei numCoords, GLenum coordType, const void*coords'
  },
  'glPathCoordsNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'numCoords',
        'GLsizei '
      ],
      [
        'coordType',
        'GLenum '
      ],
      [
        'coords',
        'const void *'
      ]
    ],
    'binding_name' => 'glPathCoordsNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewPathCoordsNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint path, GLsizei numCoords, GLenum coordType, const void *coords'
  },
  'glPathCoverDepthFuncNV' => {
    'argdata' => [
      [
        'zfunc',
        'GLenum '
      ]
    ],
    'binding_name' => 'glPathCoverDepthFuncNV',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewPathCoverDepthFuncNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum zfunc'
  },
  'glPathDashArrayNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'dashCount',
        'GLsizei '
      ],
      [
        'dashArray',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glPathDashArrayNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewPathDashArrayNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint path, GLsizei dashCount, const GLfloat* dashArray'
  },
  'glPathFogGenNV' => {
    'argdata' => [
      [
        'genMode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glPathFogGenNV',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewPathFogGenNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum genMode'
  },
  'glPathGlyphIndexArrayNV' => {
    'argdata' => [
      [
        'firstPathName',
        'GLuint '
      ],
      [
        'fontTarget',
        'GLenum '
      ],
      [
        'fontName',
        'const void *'
      ],
      [
        'fontStyle',
        'GLbitfield '
      ],
      [
        'firstGlyphIndex',
        'GLuint '
      ],
      [
        'numGlyphs',
        'GLsizei '
      ],
      [
        'pathParameterTemplate',
        'GLuint '
      ],
      [
        'emScale',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glPathGlyphIndexArrayNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewPathGlyphIndexArrayNV',
    'glewtype' => 'fun',
    'restype' => 'GLenum',
    'signature' => 'GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale'
  },
  'glPathGlyphIndexRangeNV' => {
    'argdata' => [
      [
        'fontTarget',
        'GLenum '
      ],
      [
        'fontName',
        'const void *'
      ],
      [
        'fontStyle',
        'GLbitfield '
      ],
      [
        'pathParameterTemplate',
        'GLuint '
      ],
      [
        'emScale',
        'GLfloat '
      ],
      [
        'baseAndCount',
        'GLuint * '
      ]
    ],
    'binding_name' => 'glPathGlyphIndexRangeNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewPathGlyphIndexRangeNV',
    'glewtype' => 'fun',
    'restype' => 'GLenum',
    'signature' => 'GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]'
  },
  'glPathGlyphRangeNV' => {
    'argdata' => [
      [
        'firstPathName',
        'GLuint '
      ],
      [
        'fontTarget',
        'GLenum '
      ],
      [
        'fontName',
        'const void *'
      ],
      [
        'fontStyle',
        'GLbitfield '
      ],
      [
        'firstGlyph',
        'GLuint '
      ],
      [
        'numGlyphs',
        'GLsizei '
      ],
      [
        'handleMissingGlyphs',
        'GLenum '
      ],
      [
        'pathParameterTemplate',
        'GLuint '
      ],
      [
        'emScale',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glPathGlyphRangeNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewPathGlyphRangeNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale'
  },
  'glPathGlyphsNV' => {
    'argdata' => [
      [
        'firstPathName',
        'GLuint '
      ],
      [
        'fontTarget',
        'GLenum '
      ],
      [
        'fontName',
        'const void *'
      ],
      [
        'fontStyle',
        'GLbitfield '
      ],
      [
        'numGlyphs',
        'GLsizei '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'charcodes',
        'const void*'
      ],
      [
        'handleMissingGlyphs',
        'GLenum '
      ],
      [
        'pathParameterTemplate',
        'GLuint '
      ],
      [
        'emScale',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glPathGlyphsNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewPathGlyphsNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void*charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale'
  },
  'glPathMemoryGlyphIndexArrayNV' => {
    'argdata' => [
      [
        'firstPathName',
        'GLuint '
      ],
      [
        'fontTarget',
        'GLenum '
      ],
      [
        'fontSize',
        'GLsizeiptr '
      ],
      [
        'fontData',
        'const void *'
      ],
      [
        'faceIndex',
        'GLsizei '
      ],
      [
        'firstGlyphIndex',
        'GLuint '
      ],
      [
        'numGlyphs',
        'GLsizei '
      ],
      [
        'pathParameterTemplate',
        'GLuint '
      ],
      [
        'emScale',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glPathMemoryGlyphIndexArrayNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewPathMemoryGlyphIndexArrayNV',
    'glewtype' => 'fun',
    'restype' => 'GLenum',
    'signature' => 'GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale'
  },
  'glPathParameterfNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'value',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glPathParameterfNV',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewPathParameterfNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint path, GLenum pname, GLfloat value'
  },
  'glPathParameterfvNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glPathParameterfvNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewPathParameterfvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint path, GLenum pname, const GLfloat* value'
  },
  'glPathParameteriNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'value',
        'GLint '
      ]
    ],
    'binding_name' => 'glPathParameteriNV',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewPathParameteriNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint path, GLenum pname, GLint value'
  },
  'glPathParameterivNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'value',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glPathParameterivNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewPathParameterivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint path, GLenum pname, const GLint* value'
  },
  'glPathStencilDepthOffsetNV' => {
    'argdata' => [
      [
        'factor',
        'GLfloat '
      ],
      [
        'units',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glPathStencilDepthOffsetNV',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewPathStencilDepthOffsetNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat factor, GLfloat units'
  },
  'glPathStencilFuncNV' => {
    'argdata' => [
      [
        'func',
        'GLenum '
      ],
      [
        'ref',
        'GLint '
      ],
      [
        'mask',
        'GLuint '
      ]
    ],
    'binding_name' => 'glPathStencilFuncNV',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewPathStencilFuncNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum func, GLint ref, GLuint mask'
  },
  'glPathStringNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'length',
        'GLsizei '
      ],
      [
        'pathString',
        'const void *'
      ]
    ],
    'binding_name' => 'glPathStringNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewPathStringNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint path, GLenum format, GLsizei length, const void *pathString'
  },
  'glPathSubCommandsNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'commandStart',
        'GLsizei '
      ],
      [
        'commandsToDelete',
        'GLsizei '
      ],
      [
        'numCommands',
        'GLsizei '
      ],
      [
        'commands',
        'const GLubyte* '
      ],
      [
        'numCoords',
        'GLsizei '
      ],
      [
        'coordType',
        'GLenum '
      ],
      [
        'coords',
        'const void*'
      ]
    ],
    'binding_name' => 'glPathSubCommandsNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewPathSubCommandsNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte* commands, GLsizei numCoords, GLenum coordType, const void*coords'
  },
  'glPathSubCoordsNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'coordStart',
        'GLsizei '
      ],
      [
        'numCoords',
        'GLsizei '
      ],
      [
        'coordType',
        'GLenum '
      ],
      [
        'coords',
        'const void *'
      ]
    ],
    'binding_name' => 'glPathSubCoordsNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewPathSubCoordsNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords'
  },
  'glPathTexGenNV' => {
    'argdata' => [
      [
        'texCoordSet',
        'GLenum '
      ],
      [
        'genMode',
        'GLenum '
      ],
      [
        'components',
        'GLint '
      ],
      [
        'coeffs',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glPathTexGenNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewPathTexGenNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat* coeffs'
  },
  'glPauseTransformFeedback' => {
    'binding_name' => 'glPauseTransformFeedback',
    'feature' => 'GL_ARB_transform_feedback2',
    'glewImpl' => '__glewPauseTransformFeedback',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glPauseTransformFeedbackNV' => {
    'binding_name' => 'glPauseTransformFeedbackNV',
    'feature' => 'GL_NV_transform_feedback2',
    'glewImpl' => '__glewPauseTransformFeedbackNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glPixelDataRangeNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'length',
        'GLsizei '
      ],
      [
        'pointer',
        'void *'
      ]
    ],
    'binding_name' => 'glPixelDataRangeNV_c',
    'feature' => 'GL_NV_pixel_data_range',
    'glewImpl' => '__glewPixelDataRangeNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei length, void *pointer'
  },
  'glPixelMapfv' => {
    'argdata' => [
      [
        'map',
        'GLenum '
      ],
      [
        'mapsize',
        'GLsizei '
      ],
      [
        'values',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glPixelMapfv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum map, GLsizei mapsize, const GLfloat *values'
  },
  'glPixelMapuiv' => {
    'argdata' => [
      [
        'map',
        'GLenum '
      ],
      [
        'mapsize',
        'GLsizei '
      ],
      [
        'values',
        'const GLuint *'
      ]
    ],
    'binding_name' => 'glPixelMapuiv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum map, GLsizei mapsize, const GLuint *values'
  },
  'glPixelMapusv' => {
    'argdata' => [
      [
        'map',
        'GLenum '
      ],
      [
        'mapsize',
        'GLsizei '
      ],
      [
        'values',
        'const GLushort *'
      ]
    ],
    'binding_name' => 'glPixelMapusv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum map, GLsizei mapsize, const GLushort *values'
  },
  'glPixelStoref' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glPixelStoref',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfloat param'
  },
  'glPixelStorei' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glPixelStorei',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint param'
  },
  'glPixelTexGenSGIX' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glPixelTexGenSGIX',
    'feature' => 'GL_SGIX_pixel_texture',
    'glewImpl' => '__glewPixelTexGenSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode'
  },
  'glPixelTransferf' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glPixelTransferf',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfloat param'
  },
  'glPixelTransferi' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glPixelTransferi',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint param'
  },
  'glPixelTransformParameterfEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'const GLfloat '
      ]
    ],
    'binding_name' => 'glPixelTransformParameterfEXT',
    'feature' => 'GL_EXT_pixel_transform',
    'glewImpl' => '__glewPixelTransformParameterfEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLfloat param'
  },
  'glPixelTransformParameterfSGI' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glPixelTransformParameterfSGI',
    'feature' => 'GL_SGI_fft',
    'glewImpl' => '__glewPixelTransformParameterfSGI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLfloat param'
  },
  'glPixelTransformParameterfvEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glPixelTransformParameterfvEXT_c',
    'feature' => 'GL_EXT_pixel_transform',
    'glewImpl' => '__glewPixelTransformParameterfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLfloat* params'
  },
  'glPixelTransformParameterfvSGI' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glPixelTransformParameterfvSGI_c',
    'feature' => 'GL_SGI_fft',
    'glewImpl' => '__glewPixelTransformParameterfvSGI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLfloat* params'
  },
  'glPixelTransformParameteriEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'const GLint '
      ]
    ],
    'binding_name' => 'glPixelTransformParameteriEXT',
    'feature' => 'GL_EXT_pixel_transform',
    'glewImpl' => '__glewPixelTransformParameteriEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLint param'
  },
  'glPixelTransformParameteriSGI' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glPixelTransformParameteriSGI',
    'feature' => 'GL_SGI_fft',
    'glewImpl' => '__glewPixelTransformParameteriSGI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint param'
  },
  'glPixelTransformParameterivEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glPixelTransformParameterivEXT_c',
    'feature' => 'GL_EXT_pixel_transform',
    'glewImpl' => '__glewPixelTransformParameterivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLint* params'
  },
  'glPixelTransformParameterivSGI' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glPixelTransformParameterivSGI_c',
    'feature' => 'GL_SGI_fft',
    'glewImpl' => '__glewPixelTransformParameterivSGI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLint* params'
  },
  'glPixelTransformSGI' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glPixelTransformSGI',
    'feature' => 'GL_SGI_fft',
    'glewImpl' => '__glewPixelTransformSGI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target'
  },
  'glPixelZoom' => {
    'argdata' => [
      [
        'xfactor',
        'GLfloat '
      ],
      [
        'yfactor',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glPixelZoom',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat xfactor, GLfloat yfactor'
  },
  'glPointAlongPathNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'startSegment',
        'GLsizei '
      ],
      [
        'numSegments',
        'GLsizei '
      ],
      [
        'distance',
        'GLfloat '
      ],
      [
        'x',
        'GLfloat* '
      ],
      [
        'y',
        'GLfloat *'
      ],
      [
        'tangentX',
        'GLfloat *'
      ],
      [
        'tangentY',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glPointAlongPathNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewPointAlongPathNV',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat* x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY'
  },
  'glPointParameterf' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glPointParameterf',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewPointParameterf',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfloat param'
  },
  'glPointParameterfARB' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glPointParameterfARB',
    'feature' => 'GL_ARB_point_parameters',
    'glewImpl' => '__glewPointParameterfARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfloat param'
  },
  'glPointParameterfEXT' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glPointParameterfEXT',
    'feature' => 'GL_EXT_point_parameters',
    'glewImpl' => '__glewPointParameterfEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfloat param'
  },
  'glPointParameterfv' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glPointParameterfv_c',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewPointParameterfv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, const GLfloat *params'
  },
  'glPointParameterfvARB' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glPointParameterfvARB_c',
    'feature' => 'GL_ARB_point_parameters',
    'glewImpl' => '__glewPointParameterfvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, const GLfloat* params'
  },
  'glPointParameterfvEXT' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glPointParameterfvEXT_c',
    'feature' => 'GL_EXT_point_parameters',
    'glewImpl' => '__glewPointParameterfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, const GLfloat* params'
  },
  'glPointParameteri' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glPointParameteri',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewPointParameteri',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint param'
  },
  'glPointParameteriNV' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glPointParameteriNV',
    'feature' => 'GL_NV_point_sprite',
    'glewImpl' => '__glewPointParameteriNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint param'
  },
  'glPointParameteriv' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glPointParameteriv_c',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewPointParameteriv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, const GLint *params'
  },
  'glPointParameterivNV' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glPointParameterivNV_c',
    'feature' => 'GL_NV_point_sprite',
    'glewImpl' => '__glewPointParameterivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, const GLint* params'
  },
  'glPointParameterx' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfixed '
      ]
    ],
    'binding_name' => 'glPointParameterx',
    'feature' => 'GL_REGAL_ES1_1_compatibility',
    'glewImpl' => '__glewPointParameterx',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfixed param'
  },
  'glPointParameterxv' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfixed* '
      ]
    ],
    'binding_name' => 'glPointParameterxv_c',
    'feature' => 'GL_REGAL_ES1_1_compatibility',
    'glewImpl' => '__glewPointParameterxv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, const GLfixed* params'
  },
  'glPointSize' => {
    'argdata' => [
      [
        'size',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glPointSize',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat size'
  },
  'glPointSizePointerOES' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'const void *'
      ]
    ],
    'binding_name' => 'glPointSizePointerOES_c',
    'feature' => 'GL_REGAL_ES1_1_compatibility',
    'glewImpl' => '__glewPointSizePointerOES',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLsizei stride, const void *pointer'
  },
  'glPointSizex' => {
    'argdata' => [
      [
        'size',
        'GLfixed '
      ]
    ],
    'binding_name' => 'glPointSizex',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewPointSizex',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfixed size'
  },
  'glPollAsyncSGIX' => {
    'argdata' => [
      [
        'markerp',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glPollAsyncSGIX_c',
    'feature' => 'GL_SGIX_async',
    'glewImpl' => '__glewPollAsyncSGIX',
    'glewtype' => 'fun',
    'restype' => 'GLint',
    'signature' => 'GLuint* markerp'
  },
  'glPolygonMode' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glPolygonMode',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum mode'
  },
  'glPolygonModeNV' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glPolygonModeNV',
    'feature' => 'GL_NV_polygon_mode',
    'glewImpl' => '__glewPolygonModeNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum mode'
  },
  'glPolygonOffset' => {
    'argdata' => [
      [
        'factor',
        'GLfloat '
      ],
      [
        'units',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glPolygonOffset',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat factor, GLfloat units'
  },
  'glPolygonOffsetClamp' => {
    'argdata' => [
      [
        'factor',
        'GLfloat '
      ],
      [
        'units',
        'GLfloat '
      ],
      [
        'clamp',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glPolygonOffsetClamp',
    'feature' => 'GL_ARB_polygon_offset_clamp',
    'glewImpl' => '__glewPolygonOffsetClamp',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat factor, GLfloat units, GLfloat clamp'
  },
  'glPolygonOffsetClampEXT' => {
    'argdata' => [
      [
        'factor',
        'GLfloat '
      ],
      [
        'units',
        'GLfloat '
      ],
      [
        'clamp',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glPolygonOffsetClampEXT',
    'feature' => 'GL_EXT_polygon_offset_clamp',
    'glewImpl' => '__glewPolygonOffsetClampEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat factor, GLfloat units, GLfloat clamp'
  },
  'glPolygonOffsetEXT' => {
    'argdata' => [
      [
        'factor',
        'GLfloat '
      ],
      [
        'bias',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glPolygonOffsetEXT',
    'feature' => 'GL_EXT_polygon_offset',
    'glewImpl' => '__glewPolygonOffsetEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat factor, GLfloat bias'
  },
  'glPolygonOffsetx' => {
    'argdata' => [
      [
        'factor',
        'GLfixed '
      ],
      [
        'units',
        'GLfixed '
      ]
    ],
    'binding_name' => 'glPolygonOffsetx',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewPolygonOffsetx',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfixed factor, GLfixed units'
  },
  'glPolygonStipple' => {
    'argdata' => [
      [
        'mask',
        'const GLubyte *'
      ]
    ],
    'binding_name' => 'glPolygonStipple_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLubyte *mask'
  },
  'glPopAttrib' => {
    'binding_name' => 'glPopAttrib',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glPopClientAttrib' => {
    'binding_name' => 'glPopClientAttrib',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glPopDebugGroup' => {
    'binding_name' => 'glPopDebugGroup',
    'feature' => 'GL_KHR_debug',
    'glewImpl' => '__glewPopDebugGroup',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glPopGroupMarkerEXT' => {
    'binding_name' => 'glPopGroupMarkerEXT',
    'feature' => 'GL_EXT_debug_marker',
    'glewImpl' => '__glewPopGroupMarkerEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glPopMatrix' => {
    'binding_name' => 'glPopMatrix',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glPopName' => {
    'binding_name' => 'glPopName',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glPresentFrameDualFillNV' => {
    'argdata' => [
      [
        'video_slot',
        'GLuint '
      ],
      [
        'minPresentTime',
        'GLuint64EXT '
      ],
      [
        'beginPresentTimeId',
        'GLuint '
      ],
      [
        'presentDurationId',
        'GLuint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'target0',
        'GLenum '
      ],
      [
        'fill0',
        'GLuint '
      ],
      [
        'target1',
        'GLenum '
      ],
      [
        'fill1',
        'GLuint '
      ],
      [
        'target2',
        'GLenum '
      ],
      [
        'fill2',
        'GLuint '
      ],
      [
        'target3',
        'GLenum '
      ],
      [
        'fill3',
        'GLuint '
      ]
    ],
    'binding_name' => 'glPresentFrameDualFillNV',
    'feature' => 'GL_NV_present_video',
    'glewImpl' => '__glewPresentFrameDualFillNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3'
  },
  'glPresentFrameKeyedNV' => {
    'argdata' => [
      [
        'video_slot',
        'GLuint '
      ],
      [
        'minPresentTime',
        'GLuint64EXT '
      ],
      [
        'beginPresentTimeId',
        'GLuint '
      ],
      [
        'presentDurationId',
        'GLuint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'target0',
        'GLenum '
      ],
      [
        'fill0',
        'GLuint '
      ],
      [
        'key0',
        'GLuint '
      ],
      [
        'target1',
        'GLenum '
      ],
      [
        'fill1',
        'GLuint '
      ],
      [
        'key1',
        'GLuint '
      ]
    ],
    'binding_name' => 'glPresentFrameKeyedNV',
    'feature' => 'GL_NV_present_video',
    'glewImpl' => '__glewPresentFrameKeyedNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1'
  },
  'glPrimitiveBoundingBoxARB' => {
    'argdata' => [
      [
        'minX',
        'GLfloat '
      ],
      [
        'minY',
        'GLfloat '
      ],
      [
        'minZ',
        'GLfloat '
      ],
      [
        'minW',
        'GLfloat '
      ],
      [
        'maxX',
        'GLfloat '
      ],
      [
        'maxY',
        'GLfloat '
      ],
      [
        'maxZ',
        'GLfloat '
      ],
      [
        'maxW',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glPrimitiveBoundingBoxARB',
    'feature' => 'GL_ARB_ES3_2_compatibility',
    'glewImpl' => '__glewPrimitiveBoundingBoxARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW'
  },
  'glPrimitiveRestartIndex' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glPrimitiveRestartIndex',
    'feature' => 'GL_VERSION_3_1',
    'glewImpl' => '__glewPrimitiveRestartIndex',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer'
  },
  'glPrimitiveRestartIndexNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ]
    ],
    'binding_name' => 'glPrimitiveRestartIndexNV',
    'feature' => 'GL_NV_primitive_restart',
    'glewImpl' => '__glewPrimitiveRestartIndexNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index'
  },
  'glPrimitiveRestartNV' => {
    'binding_name' => 'glPrimitiveRestartNV',
    'feature' => 'GL_NV_primitive_restart',
    'glewImpl' => '__glewPrimitiveRestartNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glPrioritizeTextures' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'textures',
        'const GLuint *'
      ],
      [
        'priorities',
        'const GLclampf *'
      ]
    ],
    'binding_name' => 'glPrioritizeTextures_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint *textures, const GLclampf *priorities'
  },
  'glPrioritizeTexturesEXT' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'textures',
        'const GLuint* '
      ],
      [
        'priorities',
        'const GLclampf* '
      ]
    ],
    'binding_name' => 'glPrioritizeTexturesEXT_c',
    'feature' => 'GL_EXT_texture_object',
    'glewImpl' => '__glewPrioritizeTexturesEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* textures, const GLclampf* priorities'
  },
  'glPrioritizeVertexArraysSGIX' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'arrays',
        'const GLuint* '
      ],
      [
        'priorities',
        'const GLclampf* '
      ]
    ],
    'binding_name' => 'glPrioritizeVertexArraysSGIX_c',
    'feature' => 'GL_SGIX_vertex_array_object',
    'glewImpl' => '__glewPrioritizeVertexArraysSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, const GLuint* arrays, const GLclampf* priorities'
  },
  'glProgramBinary' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'binaryFormat',
        'GLenum '
      ],
      [
        'binary',
        'const void *'
      ],
      [
        'length',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glProgramBinary_c',
    'feature' => 'GL_ARB_get_program_binary',
    'glewImpl' => '__glewProgramBinary',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum binaryFormat, const void *binary, GLsizei length'
  },
  'glProgramBufferParametersIivNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'params',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glProgramBufferParametersIivNV_c',
    'feature' => 'GL_NV_parameter_buffer_object',
    'glewImpl' => '__glewProgramBufferParametersIivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params'
  },
  'glProgramBufferParametersIuivNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'params',
        'const GLuint *'
      ]
    ],
    'binding_name' => 'glProgramBufferParametersIuivNV_c',
    'feature' => 'GL_NV_parameter_buffer_object',
    'glewImpl' => '__glewProgramBufferParametersIuivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params'
  },
  'glProgramBufferParametersfvNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'params',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glProgramBufferParametersfvNV_c',
    'feature' => 'GL_NV_parameter_buffer_object',
    'glewImpl' => '__glewProgramBufferParametersfvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params'
  },
  'glProgramEnvParameter4dARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ],
      [
        'w',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glProgramEnvParameter4dARB',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewProgramEnvParameter4dARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w'
  },
  'glProgramEnvParameter4dvARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glProgramEnvParameter4dvARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewProgramEnvParameter4dvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, const GLdouble* params'
  },
  'glProgramEnvParameter4fARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ],
      [
        'w',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glProgramEnvParameter4fARB',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewProgramEnvParameter4fARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w'
  },
  'glProgramEnvParameter4fvARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramEnvParameter4fvARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewProgramEnvParameter4fvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, const GLfloat* params'
  },
  'glProgramEnvParameterI4iNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'z',
        'GLint '
      ],
      [
        'w',
        'GLint '
      ]
    ],
    'binding_name' => 'glProgramEnvParameterI4iNV',
    'feature' => 'GL_NV_gpu_program4',
    'glewImpl' => '__glewProgramEnvParameterI4iNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w'
  },
  'glProgramEnvParameterI4ivNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glProgramEnvParameterI4ivNV_c',
    'feature' => 'GL_NV_gpu_program4',
    'glewImpl' => '__glewProgramEnvParameterI4ivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, const GLint *params'
  },
  'glProgramEnvParameterI4uiNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLuint '
      ],
      [
        'y',
        'GLuint '
      ],
      [
        'z',
        'GLuint '
      ],
      [
        'w',
        'GLuint '
      ]
    ],
    'binding_name' => 'glProgramEnvParameterI4uiNV',
    'feature' => 'GL_NV_gpu_program4',
    'glewImpl' => '__glewProgramEnvParameterI4uiNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w'
  },
  'glProgramEnvParameterI4uivNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'const GLuint *'
      ]
    ],
    'binding_name' => 'glProgramEnvParameterI4uivNV_c',
    'feature' => 'GL_NV_gpu_program4',
    'glewImpl' => '__glewProgramEnvParameterI4uivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, const GLuint *params'
  },
  'glProgramEnvParameters4fvEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramEnvParameters4fvEXT_c',
    'feature' => 'GL_EXT_gpu_program_parameters',
    'glewImpl' => '__glewProgramEnvParameters4fvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLsizei count, const GLfloat* params'
  },
  'glProgramEnvParametersI4ivNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'params',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glProgramEnvParametersI4ivNV_c',
    'feature' => 'GL_NV_gpu_program4',
    'glewImpl' => '__glewProgramEnvParametersI4ivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLsizei count, const GLint *params'
  },
  'glProgramEnvParametersI4uivNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'params',
        'const GLuint *'
      ]
    ],
    'binding_name' => 'glProgramEnvParametersI4uivNV_c',
    'feature' => 'GL_NV_gpu_program4',
    'glewImpl' => '__glewProgramEnvParametersI4uivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLsizei count, const GLuint *params'
  },
  'glProgramLocalParameter4dARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ],
      [
        'w',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glProgramLocalParameter4dARB',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewProgramLocalParameter4dARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w'
  },
  'glProgramLocalParameter4dvARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glProgramLocalParameter4dvARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewProgramLocalParameter4dvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, const GLdouble* params'
  },
  'glProgramLocalParameter4fARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ],
      [
        'w',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glProgramLocalParameter4fARB',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewProgramLocalParameter4fARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w'
  },
  'glProgramLocalParameter4fvARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramLocalParameter4fvARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewProgramLocalParameter4fvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, const GLfloat* params'
  },
  'glProgramLocalParameterI4iNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'z',
        'GLint '
      ],
      [
        'w',
        'GLint '
      ]
    ],
    'binding_name' => 'glProgramLocalParameterI4iNV',
    'feature' => 'GL_NV_gpu_program4',
    'glewImpl' => '__glewProgramLocalParameterI4iNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w'
  },
  'glProgramLocalParameterI4ivNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glProgramLocalParameterI4ivNV_c',
    'feature' => 'GL_NV_gpu_program4',
    'glewImpl' => '__glewProgramLocalParameterI4ivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, const GLint *params'
  },
  'glProgramLocalParameterI4uiNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLuint '
      ],
      [
        'y',
        'GLuint '
      ],
      [
        'z',
        'GLuint '
      ],
      [
        'w',
        'GLuint '
      ]
    ],
    'binding_name' => 'glProgramLocalParameterI4uiNV',
    'feature' => 'GL_NV_gpu_program4',
    'glewImpl' => '__glewProgramLocalParameterI4uiNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w'
  },
  'glProgramLocalParameterI4uivNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'const GLuint *'
      ]
    ],
    'binding_name' => 'glProgramLocalParameterI4uivNV_c',
    'feature' => 'GL_NV_gpu_program4',
    'glewImpl' => '__glewProgramLocalParameterI4uivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, const GLuint *params'
  },
  'glProgramLocalParameters4fvEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramLocalParameters4fvEXT_c',
    'feature' => 'GL_EXT_gpu_program_parameters',
    'glewImpl' => '__glewProgramLocalParameters4fvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLsizei count, const GLfloat* params'
  },
  'glProgramLocalParametersI4ivNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'params',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glProgramLocalParametersI4ivNV_c',
    'feature' => 'GL_NV_gpu_program4',
    'glewImpl' => '__glewProgramLocalParametersI4ivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLsizei count, const GLint *params'
  },
  'glProgramLocalParametersI4uivNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'params',
        'const GLuint *'
      ]
    ],
    'binding_name' => 'glProgramLocalParametersI4uivNV_c',
    'feature' => 'GL_NV_gpu_program4',
    'glewImpl' => '__glewProgramLocalParametersI4uivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLsizei count, const GLuint *params'
  },
  'glProgramNamedParameter4dNV' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'len',
        'GLsizei '
      ],
      [
        'name',
        'const GLubyte* '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ],
      [
        'w',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glProgramNamedParameter4dNV_c',
    'feature' => 'GL_NV_fragment_program',
    'glewImpl' => '__glewProgramNamedParameter4dNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLsizei len, const GLubyte* name, GLdouble x, GLdouble y, GLdouble z, GLdouble w'
  },
  'glProgramNamedParameter4dvNV' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'len',
        'GLsizei '
      ],
      [
        'name',
        'const GLubyte* '
      ],
      [
        'v',
        'const GLdouble * '
      ]
    ],
    'binding_name' => 'glProgramNamedParameter4dvNV_c',
    'feature' => 'GL_NV_fragment_program',
    'glewImpl' => '__glewProgramNamedParameter4dvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLsizei len, const GLubyte* name, const GLdouble v[]'
  },
  'glProgramNamedParameter4fNV' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'len',
        'GLsizei '
      ],
      [
        'name',
        'const GLubyte* '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ],
      [
        'w',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glProgramNamedParameter4fNV_c',
    'feature' => 'GL_NV_fragment_program',
    'glewImpl' => '__glewProgramNamedParameter4fNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLsizei len, const GLubyte* name, GLfloat x, GLfloat y, GLfloat z, GLfloat w'
  },
  'glProgramNamedParameter4fvNV' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'len',
        'GLsizei '
      ],
      [
        'name',
        'const GLubyte* '
      ],
      [
        'v',
        'const GLfloat * '
      ]
    ],
    'binding_name' => 'glProgramNamedParameter4fvNV_c',
    'feature' => 'GL_NV_fragment_program',
    'glewImpl' => '__glewProgramNamedParameter4fvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLsizei len, const GLubyte* name, const GLfloat v[]'
  },
  'glProgramParameter4dNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ],
      [
        'w',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glProgramParameter4dNV',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewProgramParameter4dNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w'
  },
  'glProgramParameter4dvNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glProgramParameter4dvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewProgramParameter4dvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, const GLdouble* params'
  },
  'glProgramParameter4fNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ],
      [
        'w',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glProgramParameter4fNV',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewProgramParameter4fNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w'
  },
  'glProgramParameter4fvNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramParameter4fvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewProgramParameter4fvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, const GLfloat* params'
  },
  'glProgramParameteri' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'value',
        'GLint '
      ]
    ],
    'binding_name' => 'glProgramParameteri',
    'feature' => 'GL_ARB_get_program_binary',
    'glewImpl' => '__glewProgramParameteri',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum pname, GLint value'
  },
  'glProgramParameteriARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'value',
        'GLint '
      ]
    ],
    'binding_name' => 'glProgramParameteriARB',
    'feature' => 'GL_ARB_geometry_shader4',
    'glewImpl' => '__glewProgramParameteriARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum pname, GLint value'
  },
  'glProgramParameteriEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'value',
        'GLint '
      ]
    ],
    'binding_name' => 'glProgramParameteriEXT',
    'feature' => 'GL_EXT_geometry_shader4',
    'glewImpl' => '__glewProgramParameteriEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLenum pname, GLint value'
  },
  'glProgramParameters4dvNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'num',
        'GLsizei '
      ],
      [
        'params',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glProgramParameters4dvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewProgramParameters4dvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLsizei num, const GLdouble* params'
  },
  'glProgramParameters4fvNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'num',
        'GLsizei '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramParameters4fvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewProgramParameters4fvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint index, GLsizei num, const GLfloat* params'
  },
  'glProgramPathFragmentInputGenNV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'genMode',
        'GLenum '
      ],
      [
        'components',
        'GLint '
      ],
      [
        'coeffs',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramPathFragmentInputGenNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewProgramPathFragmentInputGenNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat* coeffs'
  },
  'glProgramStringARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'len',
        'GLsizei '
      ],
      [
        'string',
        'const void *'
      ]
    ],
    'binding_name' => 'glProgramStringARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewProgramStringARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum format, GLsizei len, const void *string'
  },
  'glProgramUniform1d' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glProgramUniform1d',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform1d',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLdouble x'
  },
  'glProgramUniform1dv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glProgramUniform1dv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform1dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLdouble* value'
  },
  'glProgramUniform1f' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glProgramUniform1f',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform1f',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLfloat x'
  },
  'glProgramUniform1fEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glProgramUniform1fEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniform1fEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLfloat v0'
  },
  'glProgramUniform1fv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniform1fv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform1fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLfloat* value'
  },
  'glProgramUniform1fvEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniform1fvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniform1fvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLfloat* value'
  },
  'glProgramUniform1i' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLint '
      ]
    ],
    'binding_name' => 'glProgramUniform1i',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform1i',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLint x'
  },
  'glProgramUniform1i64ARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLint64 '
      ]
    ],
    'binding_name' => 'glProgramUniform1i64ARB',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewProgramUniform1i64ARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLint64 x'
  },
  'glProgramUniform1i64NV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLint64EXT '
      ]
    ],
    'binding_name' => 'glProgramUniform1i64NV',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewProgramUniform1i64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLint64EXT x'
  },
  'glProgramUniform1i64vARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint64* '
      ]
    ],
    'binding_name' => 'glProgramUniform1i64vARB_c',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewProgramUniform1i64vARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLint64* value'
  },
  'glProgramUniform1i64vNV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint64EXT* '
      ]
    ],
    'binding_name' => 'glProgramUniform1i64vNV_c',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewProgramUniform1i64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLint64EXT* value'
  },
  'glProgramUniform1iEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLint '
      ]
    ],
    'binding_name' => 'glProgramUniform1iEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniform1iEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLint v0'
  },
  'glProgramUniform1iv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glProgramUniform1iv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform1iv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLint* value'
  },
  'glProgramUniform1ivEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glProgramUniform1ivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniform1ivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLint* value'
  },
  'glProgramUniform1ui' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLuint '
      ]
    ],
    'binding_name' => 'glProgramUniform1ui',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform1ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLuint x'
  },
  'glProgramUniform1ui64ARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glProgramUniform1ui64ARB',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewProgramUniform1ui64ARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLuint64 x'
  },
  'glProgramUniform1ui64NV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLuint64EXT '
      ]
    ],
    'binding_name' => 'glProgramUniform1ui64NV',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewProgramUniform1ui64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLuint64EXT x'
  },
  'glProgramUniform1ui64vARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint64* '
      ]
    ],
    'binding_name' => 'glProgramUniform1ui64vARB_c',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewProgramUniform1ui64vARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLuint64* value'
  },
  'glProgramUniform1ui64vNV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint64EXT* '
      ]
    ],
    'binding_name' => 'glProgramUniform1ui64vNV_c',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewProgramUniform1ui64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLuint64EXT* value'
  },
  'glProgramUniform1uiEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLuint '
      ]
    ],
    'binding_name' => 'glProgramUniform1uiEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniform1uiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLuint v0'
  },
  'glProgramUniform1uiv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glProgramUniform1uiv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform1uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLuint* value'
  },
  'glProgramUniform1uivEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glProgramUniform1uivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniform1uivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLuint* value'
  },
  'glProgramUniform2d' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glProgramUniform2d',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform2d',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLdouble x, GLdouble y'
  },
  'glProgramUniform2dv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glProgramUniform2dv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform2dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLdouble* value'
  },
  'glProgramUniform2f' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glProgramUniform2f',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform2f',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLfloat x, GLfloat y'
  },
  'glProgramUniform2fEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLfloat '
      ],
      [
        'v1',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glProgramUniform2fEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniform2fEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLfloat v0, GLfloat v1'
  },
  'glProgramUniform2fv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniform2fv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform2fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLfloat* value'
  },
  'glProgramUniform2fvEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniform2fvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniform2fvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLfloat* value'
  },
  'glProgramUniform2i' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ]
    ],
    'binding_name' => 'glProgramUniform2i',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform2i',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLint x, GLint y'
  },
  'glProgramUniform2i64ARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLint64 '
      ],
      [
        'y',
        'GLint64 '
      ]
    ],
    'binding_name' => 'glProgramUniform2i64ARB',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewProgramUniform2i64ARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLint64 x, GLint64 y'
  },
  'glProgramUniform2i64NV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLint64EXT '
      ],
      [
        'y',
        'GLint64EXT '
      ]
    ],
    'binding_name' => 'glProgramUniform2i64NV',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewProgramUniform2i64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLint64EXT x, GLint64EXT y'
  },
  'glProgramUniform2i64vARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint64* '
      ]
    ],
    'binding_name' => 'glProgramUniform2i64vARB_c',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewProgramUniform2i64vARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLint64* value'
  },
  'glProgramUniform2i64vNV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint64EXT* '
      ]
    ],
    'binding_name' => 'glProgramUniform2i64vNV_c',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewProgramUniform2i64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLint64EXT* value'
  },
  'glProgramUniform2iEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLint '
      ],
      [
        'v1',
        'GLint '
      ]
    ],
    'binding_name' => 'glProgramUniform2iEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniform2iEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLint v0, GLint v1'
  },
  'glProgramUniform2iv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glProgramUniform2iv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform2iv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLint* value'
  },
  'glProgramUniform2ivEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glProgramUniform2ivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniform2ivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLint* value'
  },
  'glProgramUniform2ui' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLuint '
      ],
      [
        'y',
        'GLuint '
      ]
    ],
    'binding_name' => 'glProgramUniform2ui',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform2ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLuint x, GLuint y'
  },
  'glProgramUniform2ui64ARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLuint64 '
      ],
      [
        'y',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glProgramUniform2ui64ARB',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewProgramUniform2ui64ARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLuint64 x, GLuint64 y'
  },
  'glProgramUniform2ui64NV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLuint64EXT '
      ],
      [
        'y',
        'GLuint64EXT '
      ]
    ],
    'binding_name' => 'glProgramUniform2ui64NV',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewProgramUniform2ui64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y'
  },
  'glProgramUniform2ui64vARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint64* '
      ]
    ],
    'binding_name' => 'glProgramUniform2ui64vARB_c',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewProgramUniform2ui64vARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLuint64* value'
  },
  'glProgramUniform2ui64vNV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint64EXT* '
      ]
    ],
    'binding_name' => 'glProgramUniform2ui64vNV_c',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewProgramUniform2ui64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLuint64EXT* value'
  },
  'glProgramUniform2uiEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLuint '
      ],
      [
        'v1',
        'GLuint '
      ]
    ],
    'binding_name' => 'glProgramUniform2uiEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniform2uiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLuint v0, GLuint v1'
  },
  'glProgramUniform2uiv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glProgramUniform2uiv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform2uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLuint* value'
  },
  'glProgramUniform2uivEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glProgramUniform2uivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniform2uivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLuint* value'
  },
  'glProgramUniform3d' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glProgramUniform3d',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform3d',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z'
  },
  'glProgramUniform3dv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glProgramUniform3dv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform3dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLdouble* value'
  },
  'glProgramUniform3f' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glProgramUniform3f',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform3f',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z'
  },
  'glProgramUniform3fEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLfloat '
      ],
      [
        'v1',
        'GLfloat '
      ],
      [
        'v2',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glProgramUniform3fEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniform3fEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2'
  },
  'glProgramUniform3fv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniform3fv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform3fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLfloat* value'
  },
  'glProgramUniform3fvEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniform3fvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniform3fvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLfloat* value'
  },
  'glProgramUniform3i' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'z',
        'GLint '
      ]
    ],
    'binding_name' => 'glProgramUniform3i',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform3i',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLint x, GLint y, GLint z'
  },
  'glProgramUniform3i64ARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLint64 '
      ],
      [
        'y',
        'GLint64 '
      ],
      [
        'z',
        'GLint64 '
      ]
    ],
    'binding_name' => 'glProgramUniform3i64ARB',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewProgramUniform3i64ARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z'
  },
  'glProgramUniform3i64NV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLint64EXT '
      ],
      [
        'y',
        'GLint64EXT '
      ],
      [
        'z',
        'GLint64EXT '
      ]
    ],
    'binding_name' => 'glProgramUniform3i64NV',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewProgramUniform3i64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z'
  },
  'glProgramUniform3i64vARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint64* '
      ]
    ],
    'binding_name' => 'glProgramUniform3i64vARB_c',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewProgramUniform3i64vARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLint64* value'
  },
  'glProgramUniform3i64vNV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint64EXT* '
      ]
    ],
    'binding_name' => 'glProgramUniform3i64vNV_c',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewProgramUniform3i64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLint64EXT* value'
  },
  'glProgramUniform3iEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLint '
      ],
      [
        'v1',
        'GLint '
      ],
      [
        'v2',
        'GLint '
      ]
    ],
    'binding_name' => 'glProgramUniform3iEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniform3iEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLint v0, GLint v1, GLint v2'
  },
  'glProgramUniform3iv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glProgramUniform3iv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform3iv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLint* value'
  },
  'glProgramUniform3ivEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glProgramUniform3ivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniform3ivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLint* value'
  },
  'glProgramUniform3ui' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLuint '
      ],
      [
        'y',
        'GLuint '
      ],
      [
        'z',
        'GLuint '
      ]
    ],
    'binding_name' => 'glProgramUniform3ui',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform3ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLuint x, GLuint y, GLuint z'
  },
  'glProgramUniform3ui64ARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLuint64 '
      ],
      [
        'y',
        'GLuint64 '
      ],
      [
        'z',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glProgramUniform3ui64ARB',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewProgramUniform3ui64ARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z'
  },
  'glProgramUniform3ui64NV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLuint64EXT '
      ],
      [
        'y',
        'GLuint64EXT '
      ],
      [
        'z',
        'GLuint64EXT '
      ]
    ],
    'binding_name' => 'glProgramUniform3ui64NV',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewProgramUniform3ui64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z'
  },
  'glProgramUniform3ui64vARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint64* '
      ]
    ],
    'binding_name' => 'glProgramUniform3ui64vARB_c',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewProgramUniform3ui64vARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLuint64* value'
  },
  'glProgramUniform3ui64vNV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint64EXT* '
      ]
    ],
    'binding_name' => 'glProgramUniform3ui64vNV_c',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewProgramUniform3ui64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLuint64EXT* value'
  },
  'glProgramUniform3uiEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLuint '
      ],
      [
        'v1',
        'GLuint '
      ],
      [
        'v2',
        'GLuint '
      ]
    ],
    'binding_name' => 'glProgramUniform3uiEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniform3uiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2'
  },
  'glProgramUniform3uiv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glProgramUniform3uiv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform3uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLuint* value'
  },
  'glProgramUniform3uivEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glProgramUniform3uivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniform3uivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLuint* value'
  },
  'glProgramUniform4d' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ],
      [
        'w',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glProgramUniform4d',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform4d',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w'
  },
  'glProgramUniform4dv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glProgramUniform4dv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform4dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLdouble* value'
  },
  'glProgramUniform4f' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ],
      [
        'w',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glProgramUniform4f',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform4f',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w'
  },
  'glProgramUniform4fEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLfloat '
      ],
      [
        'v1',
        'GLfloat '
      ],
      [
        'v2',
        'GLfloat '
      ],
      [
        'v3',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glProgramUniform4fEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniform4fEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3'
  },
  'glProgramUniform4fv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniform4fv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform4fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLfloat* value'
  },
  'glProgramUniform4fvEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniform4fvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniform4fvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLfloat* value'
  },
  'glProgramUniform4i' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'z',
        'GLint '
      ],
      [
        'w',
        'GLint '
      ]
    ],
    'binding_name' => 'glProgramUniform4i',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform4i',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w'
  },
  'glProgramUniform4i64ARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLint64 '
      ],
      [
        'y',
        'GLint64 '
      ],
      [
        'z',
        'GLint64 '
      ],
      [
        'w',
        'GLint64 '
      ]
    ],
    'binding_name' => 'glProgramUniform4i64ARB',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewProgramUniform4i64ARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w'
  },
  'glProgramUniform4i64NV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLint64EXT '
      ],
      [
        'y',
        'GLint64EXT '
      ],
      [
        'z',
        'GLint64EXT '
      ],
      [
        'w',
        'GLint64EXT '
      ]
    ],
    'binding_name' => 'glProgramUniform4i64NV',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewProgramUniform4i64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w'
  },
  'glProgramUniform4i64vARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint64* '
      ]
    ],
    'binding_name' => 'glProgramUniform4i64vARB_c',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewProgramUniform4i64vARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLint64* value'
  },
  'glProgramUniform4i64vNV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint64EXT* '
      ]
    ],
    'binding_name' => 'glProgramUniform4i64vNV_c',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewProgramUniform4i64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLint64EXT* value'
  },
  'glProgramUniform4iEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLint '
      ],
      [
        'v1',
        'GLint '
      ],
      [
        'v2',
        'GLint '
      ],
      [
        'v3',
        'GLint '
      ]
    ],
    'binding_name' => 'glProgramUniform4iEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniform4iEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3'
  },
  'glProgramUniform4iv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glProgramUniform4iv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform4iv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLint* value'
  },
  'glProgramUniform4ivEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glProgramUniform4ivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniform4ivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLint* value'
  },
  'glProgramUniform4ui' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLuint '
      ],
      [
        'y',
        'GLuint '
      ],
      [
        'z',
        'GLuint '
      ],
      [
        'w',
        'GLuint '
      ]
    ],
    'binding_name' => 'glProgramUniform4ui',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform4ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w'
  },
  'glProgramUniform4ui64ARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLuint64 '
      ],
      [
        'y',
        'GLuint64 '
      ],
      [
        'z',
        'GLuint64 '
      ],
      [
        'w',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glProgramUniform4ui64ARB',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewProgramUniform4ui64ARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w'
  },
  'glProgramUniform4ui64NV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLuint64EXT '
      ],
      [
        'y',
        'GLuint64EXT '
      ],
      [
        'z',
        'GLuint64EXT '
      ],
      [
        'w',
        'GLuint64EXT '
      ]
    ],
    'binding_name' => 'glProgramUniform4ui64NV',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewProgramUniform4ui64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w'
  },
  'glProgramUniform4ui64vARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint64* '
      ]
    ],
    'binding_name' => 'glProgramUniform4ui64vARB_c',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewProgramUniform4ui64vARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLuint64* value'
  },
  'glProgramUniform4ui64vNV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint64EXT* '
      ]
    ],
    'binding_name' => 'glProgramUniform4ui64vNV_c',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewProgramUniform4ui64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLuint64EXT* value'
  },
  'glProgramUniform4uiEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLuint '
      ],
      [
        'v1',
        'GLuint '
      ],
      [
        'v2',
        'GLuint '
      ],
      [
        'v3',
        'GLuint '
      ]
    ],
    'binding_name' => 'glProgramUniform4uiEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniform4uiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3'
  },
  'glProgramUniform4uiv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glProgramUniform4uiv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniform4uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLuint* value'
  },
  'glProgramUniform4uivEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glProgramUniform4uivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniform4uivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLuint* value'
  },
  'glProgramUniformHandleui64ARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'value',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glProgramUniformHandleui64ARB',
    'feature' => 'GL_ARB_bindless_texture',
    'glewImpl' => '__glewProgramUniformHandleui64ARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLuint64 value'
  },
  'glProgramUniformHandleui64NV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'value',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glProgramUniformHandleui64NV',
    'feature' => 'GL_NV_bindless_texture',
    'glewImpl' => '__glewProgramUniformHandleui64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLuint64 value'
  },
  'glProgramUniformHandleui64vARB' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'values',
        'const GLuint64* '
      ]
    ],
    'binding_name' => 'glProgramUniformHandleui64vARB_c',
    'feature' => 'GL_ARB_bindless_texture',
    'glewImpl' => '__glewProgramUniformHandleui64vARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLuint64* values'
  },
  'glProgramUniformHandleui64vNV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'values',
        'const GLuint64* '
      ]
    ],
    'binding_name' => 'glProgramUniformHandleui64vNV_c',
    'feature' => 'GL_NV_bindless_texture',
    'glewImpl' => '__glewProgramUniformHandleui64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLuint64* values'
  },
  'glProgramUniformMatrix2dv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix2dv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniformMatrix2dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value'
  },
  'glProgramUniformMatrix2fv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix2fv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniformMatrix2fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glProgramUniformMatrix2fvEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix2fvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniformMatrix2fvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glProgramUniformMatrix2x3dv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix2x3dv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniformMatrix2x3dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value'
  },
  'glProgramUniformMatrix2x3fv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix2x3fv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniformMatrix2x3fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glProgramUniformMatrix2x3fvEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix2x3fvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniformMatrix2x3fvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glProgramUniformMatrix2x4dv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix2x4dv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniformMatrix2x4dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value'
  },
  'glProgramUniformMatrix2x4fv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix2x4fv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniformMatrix2x4fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glProgramUniformMatrix2x4fvEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix2x4fvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniformMatrix2x4fvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glProgramUniformMatrix3dv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix3dv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniformMatrix3dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value'
  },
  'glProgramUniformMatrix3fv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix3fv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniformMatrix3fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glProgramUniformMatrix3fvEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix3fvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniformMatrix3fvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glProgramUniformMatrix3x2dv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix3x2dv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniformMatrix3x2dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value'
  },
  'glProgramUniformMatrix3x2fv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix3x2fv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniformMatrix3x2fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glProgramUniformMatrix3x2fvEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix3x2fvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniformMatrix3x2fvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glProgramUniformMatrix3x4dv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix3x4dv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniformMatrix3x4dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value'
  },
  'glProgramUniformMatrix3x4fv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix3x4fv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniformMatrix3x4fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glProgramUniformMatrix3x4fvEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix3x4fvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniformMatrix3x4fvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glProgramUniformMatrix4dv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix4dv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniformMatrix4dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value'
  },
  'glProgramUniformMatrix4fv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix4fv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniformMatrix4fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glProgramUniformMatrix4fvEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix4fvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniformMatrix4fvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glProgramUniformMatrix4x2dv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix4x2dv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniformMatrix4x2dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value'
  },
  'glProgramUniformMatrix4x2fv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix4x2fv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniformMatrix4x2fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glProgramUniformMatrix4x2fvEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix4x2fvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniformMatrix4x2fvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glProgramUniformMatrix4x3dv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix4x3dv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniformMatrix4x3dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value'
  },
  'glProgramUniformMatrix4x3fv' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix4x3fv_c',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewProgramUniformMatrix4x3fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glProgramUniformMatrix4x3fvEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glProgramUniformMatrix4x3fvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewProgramUniformMatrix4x3fvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glProgramUniformui64NV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'value',
        'GLuint64EXT '
      ]
    ],
    'binding_name' => 'glProgramUniformui64NV',
    'feature' => 'GL_NV_shader_buffer_load',
    'glewImpl' => '__glewProgramUniformui64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLuint64EXT value'
  },
  'glProgramUniformui64vNV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint64EXT* '
      ]
    ],
    'binding_name' => 'glProgramUniformui64vNV_c',
    'feature' => 'GL_NV_shader_buffer_load',
    'glewImpl' => '__glewProgramUniformui64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLsizei count, const GLuint64EXT* value'
  },
  'glProgramVertexLimitNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'limit',
        'GLint '
      ]
    ],
    'binding_name' => 'glProgramVertexLimitNV',
    'feature' => 'GL_NV_geometry_program4',
    'glewImpl' => '__glewProgramVertexLimitNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint limit'
  },
  'glProvokingVertex' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glProvokingVertex',
    'feature' => 'GL_ARB_provoking_vertex',
    'glewImpl' => '__glewProvokingVertex',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode'
  },
  'glProvokingVertexEXT' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glProvokingVertexEXT',
    'feature' => 'GL_EXT_provoking_vertex',
    'glewImpl' => '__glewProvokingVertexEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode'
  },
  'glPushAttrib' => {
    'argdata' => [
      [
        'mask',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glPushAttrib',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLbitfield mask'
  },
  'glPushClientAttrib' => {
    'argdata' => [
      [
        'mask',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glPushClientAttrib',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLbitfield mask'
  },
  'glPushClientAttribDefaultEXT' => {
    'argdata' => [
      [
        'mask',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glPushClientAttribDefaultEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewPushClientAttribDefaultEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLbitfield mask'
  },
  'glPushDebugGroup' => {
    'argdata' => [
      [
        'source',
        'GLenum '
      ],
      [
        'id',
        'GLuint '
      ],
      [
        'length',
        'GLsizei '
      ],
      [
        'message',
        'const GLchar * '
      ]
    ],
    'binding_name' => 'glPushDebugGroup_c',
    'feature' => 'GL_KHR_debug',
    'glewImpl' => '__glewPushDebugGroup',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum source, GLuint id, GLsizei length, const GLchar * message'
  },
  'glPushGroupMarkerEXT' => {
    'argdata' => [
      [
        'length',
        'GLsizei '
      ],
      [
        'marker',
        'const GLchar* '
      ]
    ],
    'binding_name' => 'glPushGroupMarkerEXT_c',
    'feature' => 'GL_EXT_debug_marker',
    'glewImpl' => '__glewPushGroupMarkerEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei length, const GLchar* marker'
  },
  'glPushMatrix' => {
    'binding_name' => 'glPushMatrix',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glPushName' => {
    'argdata' => [
      [
        'name',
        'GLuint '
      ]
    ],
    'binding_name' => 'glPushName',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint name'
  },
  'glQueryCounter' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glQueryCounter',
    'feature' => 'GL_ARB_timer_query',
    'glewImpl' => '__glewQueryCounter',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum target'
  },
  'glQueryCounterANGLE' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glQueryCounterANGLE',
    'feature' => 'GL_ANGLE_timer_query',
    'glewImpl' => '__glewQueryCounterANGLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum target'
  },
  'glQueryObjectParameteruiAMD' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'id',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLuint '
      ]
    ],
    'binding_name' => 'glQueryObjectParameteruiAMD',
    'feature' => 'GL_AMD_occlusion_query_event',
    'glewImpl' => '__glewQueryObjectParameteruiAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint id, GLenum pname, GLuint param'
  },
  'glRasterPos2d' => {
    'argdata' => [
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glRasterPos2d',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble x, GLdouble y'
  },
  'glRasterPos2dv' => {
    'argdata' => [
      [
        'v',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glRasterPos2dv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble *v'
  },
  'glRasterPos2f' => {
    'argdata' => [
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glRasterPos2f',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat x, GLfloat y'
  },
  'glRasterPos2fv' => {
    'argdata' => [
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glRasterPos2fv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat *v'
  },
  'glRasterPos2i' => {
    'argdata' => [
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ]
    ],
    'binding_name' => 'glRasterPos2i',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint x, GLint y'
  },
  'glRasterPos2iv' => {
    'argdata' => [
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glRasterPos2iv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLint *v'
  },
  'glRasterPos2s' => {
    'argdata' => [
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ]
    ],
    'binding_name' => 'glRasterPos2s',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLshort x, GLshort y'
  },
  'glRasterPos2sv' => {
    'argdata' => [
      [
        'v',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glRasterPos2sv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLshort *v'
  },
  'glRasterPos3d' => {
    'argdata' => [
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glRasterPos3d',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble x, GLdouble y, GLdouble z'
  },
  'glRasterPos3dv' => {
    'argdata' => [
      [
        'v',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glRasterPos3dv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble *v'
  },
  'glRasterPos3f' => {
    'argdata' => [
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glRasterPos3f',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat x, GLfloat y, GLfloat z'
  },
  'glRasterPos3fv' => {
    'argdata' => [
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glRasterPos3fv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat *v'
  },
  'glRasterPos3i' => {
    'argdata' => [
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'z',
        'GLint '
      ]
    ],
    'binding_name' => 'glRasterPos3i',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint x, GLint y, GLint z'
  },
  'glRasterPos3iv' => {
    'argdata' => [
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glRasterPos3iv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLint *v'
  },
  'glRasterPos3s' => {
    'argdata' => [
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ],
      [
        'z',
        'GLshort '
      ]
    ],
    'binding_name' => 'glRasterPos3s',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLshort x, GLshort y, GLshort z'
  },
  'glRasterPos3sv' => {
    'argdata' => [
      [
        'v',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glRasterPos3sv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLshort *v'
  },
  'glRasterPos4d' => {
    'argdata' => [
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ],
      [
        'w',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glRasterPos4d',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble x, GLdouble y, GLdouble z, GLdouble w'
  },
  'glRasterPos4dv' => {
    'argdata' => [
      [
        'v',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glRasterPos4dv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble *v'
  },
  'glRasterPos4f' => {
    'argdata' => [
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ],
      [
        'w',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glRasterPos4f',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat x, GLfloat y, GLfloat z, GLfloat w'
  },
  'glRasterPos4fv' => {
    'argdata' => [
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glRasterPos4fv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat *v'
  },
  'glRasterPos4i' => {
    'argdata' => [
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'z',
        'GLint '
      ],
      [
        'w',
        'GLint '
      ]
    ],
    'binding_name' => 'glRasterPos4i',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint x, GLint y, GLint z, GLint w'
  },
  'glRasterPos4iv' => {
    'argdata' => [
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glRasterPos4iv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLint *v'
  },
  'glRasterPos4s' => {
    'argdata' => [
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ],
      [
        'z',
        'GLshort '
      ],
      [
        'w',
        'GLshort '
      ]
    ],
    'binding_name' => 'glRasterPos4s',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLshort x, GLshort y, GLshort z, GLshort w'
  },
  'glRasterPos4sv' => {
    'argdata' => [
      [
        'v',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glRasterPos4sv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLshort *v'
  },
  'glRasterSamplesEXT' => {
    'argdata' => [
      [
        'samples',
        'GLuint '
      ],
      [
        'fixedsamplelocations',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glRasterSamplesEXT',
    'feature' => 'GL_EXT_raster_multisample',
    'glewImpl' => '__glewRasterSamplesEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint samples, GLboolean fixedsamplelocations'
  },
  'glReadBuffer' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glReadBuffer',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode'
  },
  'glReadBufferIndexedEXT' => {
    'argdata' => [
      [
        'src',
        'GLenum '
      ],
      [
        'index',
        'GLint '
      ]
    ],
    'binding_name' => 'glReadBufferIndexedEXT',
    'feature' => 'GL_EXT_multiview_draw_buffers',
    'glewImpl' => '__glewReadBufferIndexedEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum src, GLint index'
  },
  'glReadBufferRegion' => {
    'argdata' => [
      [
        'region',
        'GLuint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glReadBufferRegion',
    'feature' => 'GL_KTX_buffer_region',
    'glewImpl' => '__glewReadBufferRegion',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint region, GLint x, GLint y, GLsizei width, GLsizei height'
  },
  'glReadPixels' => {
    'argdata' => [
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'void *'
      ]
    ],
    'binding_name' => 'glReadPixels_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels'
  },
  'glReadVideoPixelsSUN' => {
    'argdata' => [
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'void* '
      ]
    ],
    'binding_name' => 'glReadVideoPixelsSUN_c',
    'feature' => 'GL_SUN_read_video_pixels',
    'glewImpl' => '__glewReadVideoPixelsSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels'
  },
  'glReadnPixels' => {
    'argdata' => [
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'data',
        'void *'
      ]
    ],
    'binding_name' => 'glReadnPixels_c',
    'feature' => 'GL_KHR_robustness',
    'glewImpl' => '__glewReadnPixels',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data'
  },
  'glReadnPixelsARB' => {
    'argdata' => [
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'data',
        'void* '
      ]
    ],
    'binding_name' => 'glReadnPixelsARB_c',
    'feature' => 'GL_ARB_robustness',
    'glewImpl' => '__glewReadnPixelsARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data'
  },
  'glRectd' => {
    'argdata' => [
      [
        'x1',
        'GLdouble '
      ],
      [
        'y1',
        'GLdouble '
      ],
      [
        'x2',
        'GLdouble '
      ],
      [
        'y2',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glRectd',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2'
  },
  'glRectdv' => {
    'argdata' => [
      [
        'v1',
        'const GLdouble *'
      ],
      [
        'v2',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glRectdv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble *v1, const GLdouble *v2'
  },
  'glRectf' => {
    'argdata' => [
      [
        'x1',
        'GLfloat '
      ],
      [
        'y1',
        'GLfloat '
      ],
      [
        'x2',
        'GLfloat '
      ],
      [
        'y2',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glRectf',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2'
  },
  'glRectfv' => {
    'argdata' => [
      [
        'v1',
        'const GLfloat *'
      ],
      [
        'v2',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glRectfv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat *v1, const GLfloat *v2'
  },
  'glRecti' => {
    'argdata' => [
      [
        'x1',
        'GLint '
      ],
      [
        'y1',
        'GLint '
      ],
      [
        'x2',
        'GLint '
      ],
      [
        'y2',
        'GLint '
      ]
    ],
    'binding_name' => 'glRecti',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint x1, GLint y1, GLint x2, GLint y2'
  },
  'glRectiv' => {
    'argdata' => [
      [
        'v1',
        'const GLint *'
      ],
      [
        'v2',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glRectiv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLint *v1, const GLint *v2'
  },
  'glRects' => {
    'argdata' => [
      [
        'x1',
        'GLshort '
      ],
      [
        'y1',
        'GLshort '
      ],
      [
        'x2',
        'GLshort '
      ],
      [
        'y2',
        'GLshort '
      ]
    ],
    'binding_name' => 'glRects',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLshort x1, GLshort y1, GLshort x2, GLshort y2'
  },
  'glRectsv' => {
    'argdata' => [
      [
        'v1',
        'const GLshort *'
      ],
      [
        'v2',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glRectsv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLshort *v1, const GLshort *v2'
  },
  'glReferencePlaneSGIX' => {
    'argdata' => [
      [
        'equation',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glReferencePlaneSGIX_c',
    'feature' => 'GL_SGIX_reference_plane',
    'glewImpl' => '__glewReferencePlaneSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble* equation'
  },
  'glReleaseKeyedMutexWin32EXT' => {
    'argdata' => [
      [
        'memory',
        'GLuint '
      ],
      [
        'key',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glReleaseKeyedMutexWin32EXT',
    'feature' => 'GL_EXT_win32_keyed_mutex',
    'glewImpl' => '__glewReleaseKeyedMutexWin32EXT',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint memory, GLuint64 key'
  },
  'glReleaseShaderCompiler' => {
    'binding_name' => 'glReleaseShaderCompiler',
    'feature' => 'GL_ARB_ES2_compatibility',
    'glewImpl' => '__glewReleaseShaderCompiler',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glRenderGpuMaskNV' => {
    'argdata' => [
      [
        'mask',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glRenderGpuMaskNV',
    'feature' => 'GL_NV_gpu_multicast',
    'glewImpl' => '__glewRenderGpuMaskNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLbitfield mask'
  },
  'glRenderMode' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glRenderMode',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'GLint',
    'signature' => 'GLenum mode'
  },
  'glRenderbufferStorage' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glRenderbufferStorage',
    'feature' => 'GL_ARB_framebuffer_object',
    'glewImpl' => '__glewRenderbufferStorage',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLsizei width, GLsizei height'
  },
  'glRenderbufferStorageEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glRenderbufferStorageEXT',
    'feature' => 'GL_EXT_framebuffer_object',
    'glewImpl' => '__glewRenderbufferStorageEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLsizei width, GLsizei height'
  },
  'glRenderbufferStorageMultisample' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'samples',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glRenderbufferStorageMultisample',
    'feature' => 'GL_ARB_framebuffer_object',
    'glewImpl' => '__glewRenderbufferStorageMultisample',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height'
  },
  'glRenderbufferStorageMultisampleANGLE' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'samples',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glRenderbufferStorageMultisampleANGLE',
    'feature' => 'GL_ANGLE_framebuffer_multisample',
    'glewImpl' => '__glewRenderbufferStorageMultisampleANGLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height'
  },
  'glRenderbufferStorageMultisampleAPPLE' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'samples',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glRenderbufferStorageMultisampleAPPLE',
    'feature' => 'GL_APPLE_framebuffer_multisample',
    'glewImpl' => '__glewRenderbufferStorageMultisampleAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height'
  },
  'glRenderbufferStorageMultisampleCoverageNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'coverageSamples',
        'GLsizei '
      ],
      [
        'colorSamples',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glRenderbufferStorageMultisampleCoverageNV',
    'feature' => 'GL_NV_framebuffer_multisample_coverage',
    'glewImpl' => '__glewRenderbufferStorageMultisampleCoverageNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height'
  },
  'glRenderbufferStorageMultisampleEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'samples',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glRenderbufferStorageMultisampleEXT',
    'feature' => 'GL_EXT_framebuffer_multisample',
    'glewImpl' => '__glewRenderbufferStorageMultisampleEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height'
  },
  'glRenderbufferStorageMultisampleNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'samples',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glRenderbufferStorageMultisampleNV',
    'feature' => 'GL_NV_framebuffer_multisample',
    'glewImpl' => '__glewRenderbufferStorageMultisampleNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height'
  },
  'glReplacementCodePointerSUN' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'const void *'
      ]
    ],
    'binding_name' => 'glReplacementCodePointerSUN_c',
    'feature' => 'GL_SUN_triangle_list',
    'glewImpl' => '__glewReplacementCodePointerSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLsizei stride, const void *pointer'
  },
  'glReplacementCodeubSUN' => {
    'argdata' => [
      [
        'code',
        'GLubyte '
      ]
    ],
    'binding_name' => 'glReplacementCodeubSUN',
    'feature' => 'GL_SUN_triangle_list',
    'glewImpl' => '__glewReplacementCodeubSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLubyte code'
  },
  'glReplacementCodeubvSUN' => {
    'argdata' => [
      [
        'code',
        'const GLubyte* '
      ]
    ],
    'binding_name' => 'glReplacementCodeubvSUN_c',
    'feature' => 'GL_SUN_triangle_list',
    'glewImpl' => '__glewReplacementCodeubvSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLubyte* code'
  },
  'glReplacementCodeuiColor3fVertex3fSUN' => {
    'argdata' => [
      [
        'rc',
        'GLuint '
      ],
      [
        'r',
        'GLfloat '
      ],
      [
        'g',
        'GLfloat '
      ],
      [
        'b',
        'GLfloat '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glReplacementCodeuiColor3fVertex3fSUN',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewReplacementCodeuiColor3fVertex3fSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z'
  },
  'glReplacementCodeuiColor3fVertex3fvSUN' => {
    'argdata' => [
      [
        'rc',
        'const GLuint* '
      ],
      [
        'c',
        'const GLfloat *'
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glReplacementCodeuiColor3fVertex3fvSUN_c',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewReplacementCodeuiColor3fVertex3fvSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLuint* rc, const GLfloat *c, const GLfloat *v'
  },
  'glReplacementCodeuiColor4fNormal3fVertex3fSUN' => {
    'argdata' => [
      [
        'rc',
        'GLuint '
      ],
      [
        'r',
        'GLfloat '
      ],
      [
        'g',
        'GLfloat '
      ],
      [
        'b',
        'GLfloat '
      ],
      [
        'a',
        'GLfloat '
      ],
      [
        'nx',
        'GLfloat '
      ],
      [
        'ny',
        'GLfloat '
      ],
      [
        'nz',
        'GLfloat '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glReplacementCodeuiColor4fNormal3fVertex3fSUN',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewReplacementCodeuiColor4fNormal3fVertex3fSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z'
  },
  'glReplacementCodeuiColor4fNormal3fVertex3fvSUN' => {
    'argdata' => [
      [
        'rc',
        'const GLuint* '
      ],
      [
        'c',
        'const GLfloat *'
      ],
      [
        'n',
        'const GLfloat *'
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glReplacementCodeuiColor4fNormal3fVertex3fvSUN_c',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewReplacementCodeuiColor4fNormal3fVertex3fvSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLuint* rc, const GLfloat *c, const GLfloat *n, const GLfloat *v'
  },
  'glReplacementCodeuiColor4ubVertex3fSUN' => {
    'argdata' => [
      [
        'rc',
        'GLuint '
      ],
      [
        'r',
        'GLubyte '
      ],
      [
        'g',
        'GLubyte '
      ],
      [
        'b',
        'GLubyte '
      ],
      [
        'a',
        'GLubyte '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glReplacementCodeuiColor4ubVertex3fSUN',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewReplacementCodeuiColor4ubVertex3fSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z'
  },
  'glReplacementCodeuiColor4ubVertex3fvSUN' => {
    'argdata' => [
      [
        'rc',
        'const GLuint* '
      ],
      [
        'c',
        'const GLubyte *'
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glReplacementCodeuiColor4ubVertex3fvSUN_c',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewReplacementCodeuiColor4ubVertex3fvSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLuint* rc, const GLubyte *c, const GLfloat *v'
  },
  'glReplacementCodeuiNormal3fVertex3fSUN' => {
    'argdata' => [
      [
        'rc',
        'GLuint '
      ],
      [
        'nx',
        'GLfloat '
      ],
      [
        'ny',
        'GLfloat '
      ],
      [
        'nz',
        'GLfloat '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glReplacementCodeuiNormal3fVertex3fSUN',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewReplacementCodeuiNormal3fVertex3fSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z'
  },
  'glReplacementCodeuiNormal3fVertex3fvSUN' => {
    'argdata' => [
      [
        'rc',
        'const GLuint* '
      ],
      [
        'n',
        'const GLfloat *'
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glReplacementCodeuiNormal3fVertex3fvSUN_c',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewReplacementCodeuiNormal3fVertex3fvSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLuint* rc, const GLfloat *n, const GLfloat *v'
  },
  'glReplacementCodeuiSUN' => {
    'argdata' => [
      [
        'code',
        'GLuint '
      ]
    ],
    'binding_name' => 'glReplacementCodeuiSUN',
    'feature' => 'GL_SUN_triangle_list',
    'glewImpl' => '__glewReplacementCodeuiSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint code'
  },
  'glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN' => {
    'argdata' => [
      [
        'rc',
        'GLuint '
      ],
      [
        's',
        'GLfloat '
      ],
      [
        't',
        'GLfloat '
      ],
      [
        'r',
        'GLfloat '
      ],
      [
        'g',
        'GLfloat '
      ],
      [
        'b',
        'GLfloat '
      ],
      [
        'a',
        'GLfloat '
      ],
      [
        'nx',
        'GLfloat '
      ],
      [
        'ny',
        'GLfloat '
      ],
      [
        'nz',
        'GLfloat '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z'
  },
  'glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN' => {
    'argdata' => [
      [
        'rc',
        'const GLuint* '
      ],
      [
        'tc',
        'const GLfloat *'
      ],
      [
        'c',
        'const GLfloat *'
      ],
      [
        'n',
        'const GLfloat *'
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_c',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLuint* rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v'
  },
  'glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN' => {
    'argdata' => [
      [
        'rc',
        'GLuint '
      ],
      [
        's',
        'GLfloat '
      ],
      [
        't',
        'GLfloat '
      ],
      [
        'nx',
        'GLfloat '
      ],
      [
        'ny',
        'GLfloat '
      ],
      [
        'nz',
        'GLfloat '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewReplacementCodeuiTexCoord2fNormal3fVertex3fSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z'
  },
  'glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN' => {
    'argdata' => [
      [
        'rc',
        'const GLuint* '
      ],
      [
        'tc',
        'const GLfloat *'
      ],
      [
        'n',
        'const GLfloat *'
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_c',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLuint* rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v'
  },
  'glReplacementCodeuiTexCoord2fVertex3fSUN' => {
    'argdata' => [
      [
        'rc',
        'GLuint '
      ],
      [
        's',
        'GLfloat '
      ],
      [
        't',
        'GLfloat '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glReplacementCodeuiTexCoord2fVertex3fSUN',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewReplacementCodeuiTexCoord2fVertex3fSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z'
  },
  'glReplacementCodeuiTexCoord2fVertex3fvSUN' => {
    'argdata' => [
      [
        'rc',
        'const GLuint* '
      ],
      [
        'tc',
        'const GLfloat *'
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glReplacementCodeuiTexCoord2fVertex3fvSUN_c',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewReplacementCodeuiTexCoord2fVertex3fvSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLuint* rc, const GLfloat *tc, const GLfloat *v'
  },
  'glReplacementCodeuiVertex3fSUN' => {
    'argdata' => [
      [
        'rc',
        'GLuint '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glReplacementCodeuiVertex3fSUN',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewReplacementCodeuiVertex3fSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint rc, GLfloat x, GLfloat y, GLfloat z'
  },
  'glReplacementCodeuiVertex3fvSUN' => {
    'argdata' => [
      [
        'rc',
        'const GLuint* '
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glReplacementCodeuiVertex3fvSUN_c',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewReplacementCodeuiVertex3fvSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLuint* rc, const GLfloat *v'
  },
  'glReplacementCodeuivSUN' => {
    'argdata' => [
      [
        'code',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glReplacementCodeuivSUN_c',
    'feature' => 'GL_SUN_triangle_list',
    'glewImpl' => '__glewReplacementCodeuivSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLuint* code'
  },
  'glReplacementCodeusSUN' => {
    'argdata' => [
      [
        'code',
        'GLushort '
      ]
    ],
    'binding_name' => 'glReplacementCodeusSUN',
    'feature' => 'GL_SUN_triangle_list',
    'glewImpl' => '__glewReplacementCodeusSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLushort code'
  },
  'glReplacementCodeusvSUN' => {
    'argdata' => [
      [
        'code',
        'const GLushort* '
      ]
    ],
    'binding_name' => 'glReplacementCodeusvSUN_c',
    'feature' => 'GL_SUN_triangle_list',
    'glewImpl' => '__glewReplacementCodeusvSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLushort* code'
  },
  'glRequestResidentProgramsNV' => {
    'argdata' => [
      [
        'n',
        'GLsizei '
      ],
      [
        'ids',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glRequestResidentProgramsNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewRequestResidentProgramsNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei n, GLuint* ids'
  },
  'glResetHistogram' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glResetHistogram',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewResetHistogram',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target'
  },
  'glResetHistogramEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glResetHistogramEXT',
    'feature' => 'GL_EXT_histogram',
    'glewImpl' => '__glewResetHistogramEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target'
  },
  'glResetMinmax' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glResetMinmax',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewResetMinmax',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target'
  },
  'glResetMinmaxEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glResetMinmaxEXT',
    'feature' => 'GL_EXT_histogram',
    'glewImpl' => '__glewResetMinmaxEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target'
  },
  'glResizeBuffersMESA' => {
    'binding_name' => 'glResizeBuffersMESA',
    'feature' => 'GL_MESA_resize_buffers',
    'glewImpl' => '__glewResizeBuffersMESA',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glResolveMultisampleFramebufferAPPLE' => {
    'binding_name' => 'glResolveMultisampleFramebufferAPPLE',
    'feature' => 'GL_APPLE_framebuffer_multisample',
    'glewImpl' => '__glewResolveMultisampleFramebufferAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glResumeTransformFeedback' => {
    'binding_name' => 'glResumeTransformFeedback',
    'feature' => 'GL_ARB_transform_feedback2',
    'glewImpl' => '__glewResumeTransformFeedback',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glResumeTransformFeedbackNV' => {
    'binding_name' => 'glResumeTransformFeedbackNV',
    'feature' => 'GL_NV_transform_feedback2',
    'glewImpl' => '__glewResumeTransformFeedbackNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glRotated' => {
    'argdata' => [
      [
        'angle',
        'GLdouble '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glRotated',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble angle, GLdouble x, GLdouble y, GLdouble z'
  },
  'glRotatef' => {
    'argdata' => [
      [
        'angle',
        'GLfloat '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glRotatef',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat angle, GLfloat x, GLfloat y, GLfloat z'
  },
  'glRotatex' => {
    'argdata' => [
      [
        'angle',
        'GLfixed '
      ],
      [
        'x',
        'GLfixed '
      ],
      [
        'y',
        'GLfixed '
      ],
      [
        'z',
        'GLfixed '
      ]
    ],
    'binding_name' => 'glRotatex',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewRotatex',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfixed angle, GLfixed x, GLfixed y, GLfixed z'
  },
  'glSampleCoverage' => {
    'argdata' => [
      [
        'value',
        'GLclampf '
      ],
      [
        'invert',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glSampleCoverage',
    'feature' => 'GL_VERSION_1_3',
    'glewImpl' => '__glewSampleCoverage',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLclampf value, GLboolean invert'
  },
  'glSampleCoverageARB' => {
    'argdata' => [
      [
        'value',
        'GLclampf '
      ],
      [
        'invert',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glSampleCoverageARB',
    'feature' => 'GL_ARB_multisample',
    'glewImpl' => '__glewSampleCoverageARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLclampf value, GLboolean invert'
  },
  'glSampleCoveragex' => {
    'argdata' => [
      [
        'value',
        'GLclampx '
      ],
      [
        'invert',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glSampleCoveragex',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewSampleCoveragex',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLclampx value, GLboolean invert'
  },
  'glSampleMapATI' => {
    'argdata' => [
      [
        'dst',
        'GLuint '
      ],
      [
        'interp',
        'GLuint '
      ],
      [
        'swizzle',
        'GLenum '
      ]
    ],
    'binding_name' => 'glSampleMapATI',
    'feature' => 'GL_ATI_fragment_shader',
    'glewImpl' => '__glewSampleMapATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint dst, GLuint interp, GLenum swizzle'
  },
  'glSampleMaskEXT' => {
    'argdata' => [
      [
        'value',
        'GLclampf '
      ],
      [
        'invert',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glSampleMaskEXT',
    'feature' => 'GL_EXT_multisample',
    'glewImpl' => '__glewSampleMaskEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLclampf value, GLboolean invert'
  },
  'glSampleMaskIndexedNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'mask',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glSampleMaskIndexedNV',
    'feature' => 'GL_NV_explicit_multisample',
    'glewImpl' => '__glewSampleMaskIndexedNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLbitfield mask'
  },
  'glSampleMaskSGIS' => {
    'argdata' => [
      [
        'value',
        'GLclampf '
      ],
      [
        'invert',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glSampleMaskSGIS',
    'feature' => 'GL_SGIS_multisample',
    'glewImpl' => '__glewSampleMaskSGIS',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLclampf value, GLboolean invert'
  },
  'glSampleMaski' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'mask',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glSampleMaski',
    'feature' => 'GL_ARB_texture_multisample',
    'glewImpl' => '__glewSampleMaski',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLbitfield mask'
  },
  'glSamplePatternEXT' => {
    'argdata' => [
      [
        'pattern',
        'GLenum '
      ]
    ],
    'binding_name' => 'glSamplePatternEXT',
    'feature' => 'GL_EXT_multisample',
    'glewImpl' => '__glewSamplePatternEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pattern'
  },
  'glSamplePatternSGIS' => {
    'argdata' => [
      [
        'pattern',
        'GLenum '
      ]
    ],
    'binding_name' => 'glSamplePatternSGIS',
    'feature' => 'GL_SGIS_multisample',
    'glewImpl' => '__glewSamplePatternSGIS',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pattern'
  },
  'glSamplerParameterIiv' => {
    'argdata' => [
      [
        'sampler',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glSamplerParameterIiv_c',
    'feature' => 'GL_ARB_sampler_objects',
    'glewImpl' => '__glewSamplerParameterIiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint sampler, GLenum pname, const GLint* params'
  },
  'glSamplerParameterIuiv' => {
    'argdata' => [
      [
        'sampler',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glSamplerParameterIuiv_c',
    'feature' => 'GL_ARB_sampler_objects',
    'glewImpl' => '__glewSamplerParameterIuiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint sampler, GLenum pname, const GLuint* params'
  },
  'glSamplerParameterf' => {
    'argdata' => [
      [
        'sampler',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glSamplerParameterf',
    'feature' => 'GL_ARB_sampler_objects',
    'glewImpl' => '__glewSamplerParameterf',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint sampler, GLenum pname, GLfloat param'
  },
  'glSamplerParameterfv' => {
    'argdata' => [
      [
        'sampler',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glSamplerParameterfv_c',
    'feature' => 'GL_ARB_sampler_objects',
    'glewImpl' => '__glewSamplerParameterfv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint sampler, GLenum pname, const GLfloat* params'
  },
  'glSamplerParameteri' => {
    'argdata' => [
      [
        'sampler',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glSamplerParameteri',
    'feature' => 'GL_ARB_sampler_objects',
    'glewImpl' => '__glewSamplerParameteri',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint sampler, GLenum pname, GLint param'
  },
  'glSamplerParameteriv' => {
    'argdata' => [
      [
        'sampler',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glSamplerParameteriv_c',
    'feature' => 'GL_ARB_sampler_objects',
    'glewImpl' => '__glewSamplerParameteriv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint sampler, GLenum pname, const GLint* params'
  },
  'glScaled' => {
    'argdata' => [
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glScaled',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble x, GLdouble y, GLdouble z'
  },
  'glScalef' => {
    'argdata' => [
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glScalef',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat x, GLfloat y, GLfloat z'
  },
  'glScalex' => {
    'argdata' => [
      [
        'x',
        'GLfixed '
      ],
      [
        'y',
        'GLfixed '
      ],
      [
        'z',
        'GLfixed '
      ]
    ],
    'binding_name' => 'glScalex',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewScalex',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfixed x, GLfixed y, GLfixed z'
  },
  'glScissor' => {
    'argdata' => [
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glScissor',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint x, GLint y, GLsizei width, GLsizei height'
  },
  'glScissorArrayv' => {
    'argdata' => [
      [
        'first',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'v',
        'const GLint * '
      ]
    ],
    'binding_name' => 'glScissorArrayv_c',
    'feature' => 'GL_ARB_viewport_array',
    'glewImpl' => '__glewScissorArrayv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint first, GLsizei count, const GLint * v'
  },
  'glScissorArrayvNV' => {
    'argdata' => [
      [
        'first',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'v',
        'const GLint * '
      ]
    ],
    'binding_name' => 'glScissorArrayvNV_c',
    'feature' => 'GL_NV_viewport_array',
    'glewImpl' => '__glewScissorArrayvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint first, GLsizei count, const GLint * v'
  },
  'glScissorIndexed' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'left',
        'GLint '
      ],
      [
        'bottom',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glScissorIndexed',
    'feature' => 'GL_ARB_viewport_array',
    'glewImpl' => '__glewScissorIndexed',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height'
  },
  'glScissorIndexedNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'left',
        'GLint '
      ],
      [
        'bottom',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glScissorIndexedNV',
    'feature' => 'GL_NV_viewport_array',
    'glewImpl' => '__glewScissorIndexedNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height'
  },
  'glScissorIndexedv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLint * '
      ]
    ],
    'binding_name' => 'glScissorIndexedv_c',
    'feature' => 'GL_ARB_viewport_array',
    'glewImpl' => '__glewScissorIndexedv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLint * v'
  },
  'glScissorIndexedvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLint * '
      ]
    ],
    'binding_name' => 'glScissorIndexedvNV_c',
    'feature' => 'GL_NV_viewport_array',
    'glewImpl' => '__glewScissorIndexedvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLint * v'
  },
  'glSecondaryColor3b' => {
    'argdata' => [
      [
        'red',
        'GLbyte '
      ],
      [
        'green',
        'GLbyte '
      ],
      [
        'blue',
        'GLbyte '
      ]
    ],
    'binding_name' => 'glSecondaryColor3b',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewSecondaryColor3b',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLbyte red, GLbyte green, GLbyte blue'
  },
  'glSecondaryColor3bEXT' => {
    'argdata' => [
      [
        'red',
        'GLbyte '
      ],
      [
        'green',
        'GLbyte '
      ],
      [
        'blue',
        'GLbyte '
      ]
    ],
    'binding_name' => 'glSecondaryColor3bEXT',
    'feature' => 'GL_EXT_secondary_color',
    'glewImpl' => '__glewSecondaryColor3bEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLbyte red, GLbyte green, GLbyte blue'
  },
  'glSecondaryColor3bv' => {
    'argdata' => [
      [
        'v',
        'const GLbyte *'
      ]
    ],
    'binding_name' => 'glSecondaryColor3bv_c',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewSecondaryColor3bv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLbyte *v'
  },
  'glSecondaryColor3bvEXT' => {
    'argdata' => [
      [
        'v',
        'const GLbyte *'
      ]
    ],
    'binding_name' => 'glSecondaryColor3bvEXT_c',
    'feature' => 'GL_EXT_secondary_color',
    'glewImpl' => '__glewSecondaryColor3bvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLbyte *v'
  },
  'glSecondaryColor3d' => {
    'argdata' => [
      [
        'red',
        'GLdouble '
      ],
      [
        'green',
        'GLdouble '
      ],
      [
        'blue',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glSecondaryColor3d',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewSecondaryColor3d',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble red, GLdouble green, GLdouble blue'
  },
  'glSecondaryColor3dEXT' => {
    'argdata' => [
      [
        'red',
        'GLdouble '
      ],
      [
        'green',
        'GLdouble '
      ],
      [
        'blue',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glSecondaryColor3dEXT',
    'feature' => 'GL_EXT_secondary_color',
    'glewImpl' => '__glewSecondaryColor3dEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble red, GLdouble green, GLdouble blue'
  },
  'glSecondaryColor3dv' => {
    'argdata' => [
      [
        'v',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glSecondaryColor3dv_c',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewSecondaryColor3dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble *v'
  },
  'glSecondaryColor3dvEXT' => {
    'argdata' => [
      [
        'v',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glSecondaryColor3dvEXT_c',
    'feature' => 'GL_EXT_secondary_color',
    'glewImpl' => '__glewSecondaryColor3dvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble *v'
  },
  'glSecondaryColor3f' => {
    'argdata' => [
      [
        'red',
        'GLfloat '
      ],
      [
        'green',
        'GLfloat '
      ],
      [
        'blue',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glSecondaryColor3f',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewSecondaryColor3f',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat red, GLfloat green, GLfloat blue'
  },
  'glSecondaryColor3fEXT' => {
    'argdata' => [
      [
        'red',
        'GLfloat '
      ],
      [
        'green',
        'GLfloat '
      ],
      [
        'blue',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glSecondaryColor3fEXT',
    'feature' => 'GL_EXT_secondary_color',
    'glewImpl' => '__glewSecondaryColor3fEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat red, GLfloat green, GLfloat blue'
  },
  'glSecondaryColor3fv' => {
    'argdata' => [
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glSecondaryColor3fv_c',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewSecondaryColor3fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat *v'
  },
  'glSecondaryColor3fvEXT' => {
    'argdata' => [
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glSecondaryColor3fvEXT_c',
    'feature' => 'GL_EXT_secondary_color',
    'glewImpl' => '__glewSecondaryColor3fvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat *v'
  },
  'glSecondaryColor3hNV' => {
    'argdata' => [
      [
        'red',
        'GLhalf '
      ],
      [
        'green',
        'GLhalf '
      ],
      [
        'blue',
        'GLhalf '
      ]
    ],
    'binding_name' => 'glSecondaryColor3hNV',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewSecondaryColor3hNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhalf red, GLhalf green, GLhalf blue'
  },
  'glSecondaryColor3hvNV' => {
    'argdata' => [
      [
        'v',
        'const GLhalf* '
      ]
    ],
    'binding_name' => 'glSecondaryColor3hvNV_c',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewSecondaryColor3hvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLhalf* v'
  },
  'glSecondaryColor3i' => {
    'argdata' => [
      [
        'red',
        'GLint '
      ],
      [
        'green',
        'GLint '
      ],
      [
        'blue',
        'GLint '
      ]
    ],
    'binding_name' => 'glSecondaryColor3i',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewSecondaryColor3i',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint red, GLint green, GLint blue'
  },
  'glSecondaryColor3iEXT' => {
    'argdata' => [
      [
        'red',
        'GLint '
      ],
      [
        'green',
        'GLint '
      ],
      [
        'blue',
        'GLint '
      ]
    ],
    'binding_name' => 'glSecondaryColor3iEXT',
    'feature' => 'GL_EXT_secondary_color',
    'glewImpl' => '__glewSecondaryColor3iEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint red, GLint green, GLint blue'
  },
  'glSecondaryColor3iv' => {
    'argdata' => [
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glSecondaryColor3iv_c',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewSecondaryColor3iv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLint *v'
  },
  'glSecondaryColor3ivEXT' => {
    'argdata' => [
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glSecondaryColor3ivEXT_c',
    'feature' => 'GL_EXT_secondary_color',
    'glewImpl' => '__glewSecondaryColor3ivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLint *v'
  },
  'glSecondaryColor3s' => {
    'argdata' => [
      [
        'red',
        'GLshort '
      ],
      [
        'green',
        'GLshort '
      ],
      [
        'blue',
        'GLshort '
      ]
    ],
    'binding_name' => 'glSecondaryColor3s',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewSecondaryColor3s',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLshort red, GLshort green, GLshort blue'
  },
  'glSecondaryColor3sEXT' => {
    'argdata' => [
      [
        'red',
        'GLshort '
      ],
      [
        'green',
        'GLshort '
      ],
      [
        'blue',
        'GLshort '
      ]
    ],
    'binding_name' => 'glSecondaryColor3sEXT',
    'feature' => 'GL_EXT_secondary_color',
    'glewImpl' => '__glewSecondaryColor3sEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLshort red, GLshort green, GLshort blue'
  },
  'glSecondaryColor3sv' => {
    'argdata' => [
      [
        'v',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glSecondaryColor3sv_c',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewSecondaryColor3sv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLshort *v'
  },
  'glSecondaryColor3svEXT' => {
    'argdata' => [
      [
        'v',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glSecondaryColor3svEXT_c',
    'feature' => 'GL_EXT_secondary_color',
    'glewImpl' => '__glewSecondaryColor3svEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLshort *v'
  },
  'glSecondaryColor3ub' => {
    'argdata' => [
      [
        'red',
        'GLubyte '
      ],
      [
        'green',
        'GLubyte '
      ],
      [
        'blue',
        'GLubyte '
      ]
    ],
    'binding_name' => 'glSecondaryColor3ub',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewSecondaryColor3ub',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLubyte red, GLubyte green, GLubyte blue'
  },
  'glSecondaryColor3ubEXT' => {
    'argdata' => [
      [
        'red',
        'GLubyte '
      ],
      [
        'green',
        'GLubyte '
      ],
      [
        'blue',
        'GLubyte '
      ]
    ],
    'binding_name' => 'glSecondaryColor3ubEXT',
    'feature' => 'GL_EXT_secondary_color',
    'glewImpl' => '__glewSecondaryColor3ubEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLubyte red, GLubyte green, GLubyte blue'
  },
  'glSecondaryColor3ubv' => {
    'argdata' => [
      [
        'v',
        'const GLubyte *'
      ]
    ],
    'binding_name' => 'glSecondaryColor3ubv_c',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewSecondaryColor3ubv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLubyte *v'
  },
  'glSecondaryColor3ubvEXT' => {
    'argdata' => [
      [
        'v',
        'const GLubyte *'
      ]
    ],
    'binding_name' => 'glSecondaryColor3ubvEXT_c',
    'feature' => 'GL_EXT_secondary_color',
    'glewImpl' => '__glewSecondaryColor3ubvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLubyte *v'
  },
  'glSecondaryColor3ui' => {
    'argdata' => [
      [
        'red',
        'GLuint '
      ],
      [
        'green',
        'GLuint '
      ],
      [
        'blue',
        'GLuint '
      ]
    ],
    'binding_name' => 'glSecondaryColor3ui',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewSecondaryColor3ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint red, GLuint green, GLuint blue'
  },
  'glSecondaryColor3uiEXT' => {
    'argdata' => [
      [
        'red',
        'GLuint '
      ],
      [
        'green',
        'GLuint '
      ],
      [
        'blue',
        'GLuint '
      ]
    ],
    'binding_name' => 'glSecondaryColor3uiEXT',
    'feature' => 'GL_EXT_secondary_color',
    'glewImpl' => '__glewSecondaryColor3uiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint red, GLuint green, GLuint blue'
  },
  'glSecondaryColor3uiv' => {
    'argdata' => [
      [
        'v',
        'const GLuint *'
      ]
    ],
    'binding_name' => 'glSecondaryColor3uiv_c',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewSecondaryColor3uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLuint *v'
  },
  'glSecondaryColor3uivEXT' => {
    'argdata' => [
      [
        'v',
        'const GLuint *'
      ]
    ],
    'binding_name' => 'glSecondaryColor3uivEXT_c',
    'feature' => 'GL_EXT_secondary_color',
    'glewImpl' => '__glewSecondaryColor3uivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLuint *v'
  },
  'glSecondaryColor3us' => {
    'argdata' => [
      [
        'red',
        'GLushort '
      ],
      [
        'green',
        'GLushort '
      ],
      [
        'blue',
        'GLushort '
      ]
    ],
    'binding_name' => 'glSecondaryColor3us',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewSecondaryColor3us',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLushort red, GLushort green, GLushort blue'
  },
  'glSecondaryColor3usEXT' => {
    'argdata' => [
      [
        'red',
        'GLushort '
      ],
      [
        'green',
        'GLushort '
      ],
      [
        'blue',
        'GLushort '
      ]
    ],
    'binding_name' => 'glSecondaryColor3usEXT',
    'feature' => 'GL_EXT_secondary_color',
    'glewImpl' => '__glewSecondaryColor3usEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLushort red, GLushort green, GLushort blue'
  },
  'glSecondaryColor3usv' => {
    'argdata' => [
      [
        'v',
        'const GLushort *'
      ]
    ],
    'binding_name' => 'glSecondaryColor3usv_c',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewSecondaryColor3usv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLushort *v'
  },
  'glSecondaryColor3usvEXT' => {
    'argdata' => [
      [
        'v',
        'const GLushort *'
      ]
    ],
    'binding_name' => 'glSecondaryColor3usvEXT_c',
    'feature' => 'GL_EXT_secondary_color',
    'glewImpl' => '__glewSecondaryColor3usvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLushort *v'
  },
  'glSecondaryColorFormatNV' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glSecondaryColorFormatNV',
    'feature' => 'GL_NV_vertex_buffer_unified_memory',
    'glewImpl' => '__glewSecondaryColorFormatNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLenum type, GLsizei stride'
  },
  'glSecondaryColorP3ui' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'color',
        'GLuint '
      ]
    ],
    'binding_name' => 'glSecondaryColorP3ui',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewSecondaryColorP3ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLuint color'
  },
  'glSecondaryColorP3uiv' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'color',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glSecondaryColorP3uiv_c',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewSecondaryColorP3uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, const GLuint* color'
  },
  'glSecondaryColorPointer' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'const void *'
      ]
    ],
    'binding_name' => 'glSecondaryColorPointer_c',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewSecondaryColorPointer',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLenum type, GLsizei stride, const void *pointer'
  },
  'glSecondaryColorPointerEXT' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'const void *'
      ]
    ],
    'binding_name' => 'glSecondaryColorPointerEXT_c',
    'feature' => 'GL_EXT_secondary_color',
    'glewImpl' => '__glewSecondaryColorPointerEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLenum type, GLsizei stride, const void *pointer'
  },
  'glSecondaryColorPointerListIBM' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLint '
      ],
      [
        'pointer',
        'const void** '
      ],
      [
        'ptrstride',
        'GLint '
      ]
    ],
    'binding_name' => 'glSecondaryColorPointerListIBM_c',
    'feature' => 'GL_IBM_vertex_array_lists',
    'glewImpl' => '__glewSecondaryColorPointerListIBM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride'
  },
  'glSelectBuffer' => {
    'argdata' => [
      [
        'size',
        'GLsizei '
      ],
      [
        'buffer',
        'GLuint *'
      ]
    ],
    'binding_name' => 'glSelectBuffer_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei size, GLuint *buffer'
  },
  'glSelectPerfMonitorCountersAMD' => {
    'argdata' => [
      [
        'monitor',
        'GLuint '
      ],
      [
        'enable',
        'GLboolean '
      ],
      [
        'group',
        'GLuint '
      ],
      [
        'numCounters',
        'GLint '
      ],
      [
        'counterList',
        'GLuint* '
      ]
    ],
    'binding_name' => 'glSelectPerfMonitorCountersAMD_c',
    'feature' => 'GL_AMD_performance_monitor',
    'glewImpl' => '__glewSelectPerfMonitorCountersAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint* counterList'
  },
  'glSelectTextureCoordSetSGIS' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glSelectTextureCoordSetSGIS',
    'feature' => 'GL_SGIS_multitexture',
    'glewImpl' => '__glewSelectTextureCoordSetSGIS',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target'
  },
  'glSelectTextureSGIS' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glSelectTextureSGIS',
    'feature' => 'GL_SGIS_multitexture',
    'glewImpl' => '__glewSelectTextureSGIS',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target'
  },
  'glSelectTextureTransformSGIS' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glSelectTextureTransformSGIS',
    'feature' => 'GL_SGIS_multitexture',
    'glewImpl' => '__glewSelectTextureTransformSGIS',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target'
  },
  'glSemaphoreParameterui64vEXT' => {
    'argdata' => [
      [
        'semaphore',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLuint64* '
      ]
    ],
    'binding_name' => 'glSemaphoreParameterui64vEXT_c',
    'feature' => 'GL_EXT_semaphore',
    'glewImpl' => '__glewSemaphoreParameterui64vEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint semaphore, GLenum pname, const GLuint64* params'
  },
  'glSeparableFilter2D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'row',
        'const void *'
      ],
      [
        'column',
        'const void *'
      ]
    ],
    'binding_name' => 'glSeparableFilter2D_c',
    'feature' => 'GL_ARB_imaging',
    'glewImpl' => '__glewSeparableFilter2D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column'
  },
  'glSeparableFilter2DEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'row',
        'const void *'
      ],
      [
        'column',
        'const void *'
      ]
    ],
    'binding_name' => 'glSeparableFilter2DEXT_c',
    'feature' => 'GL_EXT_convolution',
    'glewImpl' => '__glewSeparableFilter2DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column'
  },
  'glSetFenceAPPLE' => {
    'argdata' => [
      [
        'fence',
        'GLuint '
      ]
    ],
    'binding_name' => 'glSetFenceAPPLE',
    'feature' => 'GL_APPLE_fence',
    'glewImpl' => '__glewSetFenceAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint fence'
  },
  'glSetFenceNV' => {
    'argdata' => [
      [
        'fence',
        'GLuint '
      ],
      [
        'condition',
        'GLenum '
      ]
    ],
    'binding_name' => 'glSetFenceNV',
    'feature' => 'GL_NV_fence',
    'glewImpl' => '__glewSetFenceNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint fence, GLenum condition'
  },
  'glSetFragmentShaderConstantATI' => {
    'argdata' => [
      [
        'dst',
        'GLuint '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glSetFragmentShaderConstantATI_c',
    'feature' => 'GL_ATI_fragment_shader',
    'glewImpl' => '__glewSetFragmentShaderConstantATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint dst, const GLfloat* value'
  },
  'glSetInvariantEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'addr',
        'void *'
      ]
    ],
    'binding_name' => 'glSetInvariantEXT_c',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewSetInvariantEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum type, void *addr'
  },
  'glSetLocalConstantEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'addr',
        'void *'
      ]
    ],
    'binding_name' => 'glSetLocalConstantEXT_c',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewSetLocalConstantEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum type, void *addr'
  },
  'glSetMultisamplefvAMD' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'val',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glSetMultisamplefvAMD_c',
    'feature' => 'GL_AMD_sample_positions',
    'glewImpl' => '__glewSetMultisamplefvAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLuint index, const GLfloat* val'
  },
  'glShadeModel' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glShadeModel',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode'
  },
  'glShaderBinary' => {
    'argdata' => [
      [
        'count',
        'GLsizei '
      ],
      [
        'shaders',
        'const GLuint* '
      ],
      [
        'binaryformat',
        'GLenum '
      ],
      [
        'binary',
        'const void*'
      ],
      [
        'length',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glShaderBinary_c',
    'feature' => 'GL_ARB_ES2_compatibility',
    'glewImpl' => '__glewShaderBinary',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei count, const GLuint* shaders, GLenum binaryformat, const void*binary, GLsizei length'
  },
  'glShaderOp1EXT' => {
    'argdata' => [
      [
        'op',
        'GLenum '
      ],
      [
        'res',
        'GLuint '
      ],
      [
        'arg1',
        'GLuint '
      ]
    ],
    'binding_name' => 'glShaderOp1EXT',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewShaderOp1EXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum op, GLuint res, GLuint arg1'
  },
  'glShaderOp2EXT' => {
    'argdata' => [
      [
        'op',
        'GLenum '
      ],
      [
        'res',
        'GLuint '
      ],
      [
        'arg1',
        'GLuint '
      ],
      [
        'arg2',
        'GLuint '
      ]
    ],
    'binding_name' => 'glShaderOp2EXT',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewShaderOp2EXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum op, GLuint res, GLuint arg1, GLuint arg2'
  },
  'glShaderOp3EXT' => {
    'argdata' => [
      [
        'op',
        'GLenum '
      ],
      [
        'res',
        'GLuint '
      ],
      [
        'arg1',
        'GLuint '
      ],
      [
        'arg2',
        'GLuint '
      ],
      [
        'arg3',
        'GLuint '
      ]
    ],
    'binding_name' => 'glShaderOp3EXT',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewShaderOp3EXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3'
  },
  'glShaderSource' => {
    'argdata' => [
      [
        'shader',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'string',
        'const GLchar *const* '
      ],
      [
        'length',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glShaderSource_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewShaderSource',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint shader, GLsizei count, const GLchar *const* string, const GLint* length'
  },
  'glShaderSourceARB' => {
    'argdata' => [
      [
        'shaderObj',
        'GLhandleARB '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'string',
        'const GLcharARB ** '
      ],
      [
        'length',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glShaderSourceARB_c',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewShaderSourceARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhandleARB shaderObj, GLsizei count, const GLcharARB ** string, const GLint *length'
  },
  'glShaderStorageBlockBinding' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'storageBlockIndex',
        'GLuint '
      ],
      [
        'storageBlockBinding',
        'GLuint '
      ]
    ],
    'binding_name' => 'glShaderStorageBlockBinding',
    'feature' => 'GL_ARB_shader_storage_buffer_object',
    'glewImpl' => '__glewShaderStorageBlockBinding',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding'
  },
  'glSharpenTexFuncSGIS' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'points',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glSharpenTexFuncSGIS_c',
    'feature' => 'GL_SGIS_sharpen_texture',
    'glewImpl' => '__glewSharpenTexFuncSGIS',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei n, const GLfloat* points'
  },
  'glSignalSemaphoreEXT' => {
    'argdata' => [
      [
        'semaphore',
        'GLuint '
      ],
      [
        'numBufferBarriers',
        'GLuint '
      ],
      [
        'buffers',
        'const GLuint* '
      ],
      [
        'numTextureBarriers',
        'GLuint '
      ],
      [
        'textures',
        'const GLuint *'
      ],
      [
        'dstLayouts',
        'const GLenum *'
      ]
    ],
    'binding_name' => 'glSignalSemaphoreEXT_c',
    'feature' => 'GL_EXT_semaphore',
    'glewImpl' => '__glewSignalSemaphoreEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint semaphore, GLuint numBufferBarriers, const GLuint* buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts'
  },
  'glSignalVkFenceNV' => {
    'argdata' => [
      [
        'vkFence',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glSignalVkFenceNV',
    'feature' => 'GL_NV_draw_vulkan_image',
    'glewImpl' => '__glewSignalVkFenceNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint64 vkFence'
  },
  'glSignalVkSemaphoreNV' => {
    'argdata' => [
      [
        'vkSemaphore',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glSignalVkSemaphoreNV',
    'feature' => 'GL_NV_draw_vulkan_image',
    'glewImpl' => '__glewSignalVkSemaphoreNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint64 vkSemaphore'
  },
  'glSpecializeShader' => {
    'argdata' => [
      [
        'shader',
        'GLuint '
      ],
      [
        'pEntryPoint',
        'const GLchar *'
      ],
      [
        'numSpecializationConstants',
        'GLuint '
      ],
      [
        'pConstantIndex',
        'const GLuint *'
      ],
      [
        'pConstantValue',
        'const GLuint *'
      ]
    ],
    'binding_name' => 'glSpecializeShader_c',
    'feature' => 'GL_VERSION_4_6',
    'glewImpl' => '__glewSpecializeShader',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue'
  },
  'glSpecializeShaderARB' => {
    'argdata' => [
      [
        'shader',
        'GLuint '
      ],
      [
        'pEntryPoint',
        'const GLchar* '
      ],
      [
        'numSpecializationConstants',
        'GLuint '
      ],
      [
        'pConstantIndex',
        'const GLuint* '
      ],
      [
        'pConstantValue',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glSpecializeShaderARB_c',
    'feature' => 'GL_ARB_gl_spirv',
    'glewImpl' => '__glewSpecializeShaderARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint shader, const GLchar* pEntryPoint, GLuint numSpecializationConstants, const GLuint* pConstantIndex, const GLuint* pConstantValue'
  },
  'glSpriteParameterfSGIX' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glSpriteParameterfSGIX',
    'feature' => 'GL_SGIX_sprite',
    'glewImpl' => '__glewSpriteParameterfSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfloat param'
  },
  'glSpriteParameterfvSGIX' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glSpriteParameterfvSGIX_c',
    'feature' => 'GL_SGIX_sprite',
    'glewImpl' => '__glewSpriteParameterfvSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfloat* params'
  },
  'glSpriteParameteriSGIX' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glSpriteParameteriSGIX',
    'feature' => 'GL_SGIX_sprite',
    'glewImpl' => '__glewSpriteParameteriSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint param'
  },
  'glSpriteParameterivSGIX' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'GLint* '
      ]
    ],
    'binding_name' => 'glSpriteParameterivSGIX_c',
    'feature' => 'GL_SGIX_sprite',
    'glewImpl' => '__glewSpriteParameterivSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint* params'
  },
  'glStartTilingQCOM' => {
    'argdata' => [
      [
        'x',
        'GLuint '
      ],
      [
        'y',
        'GLuint '
      ],
      [
        'width',
        'GLuint '
      ],
      [
        'height',
        'GLuint '
      ],
      [
        'preserveMask',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glStartTilingQCOM',
    'feature' => 'GL_QCOM_tiled_rendering',
    'glewImpl' => '__glewStartTilingQCOM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask'
  },
  'glStateCaptureNV' => {
    'argdata' => [
      [
        'state',
        'GLuint '
      ],
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glStateCaptureNV',
    'feature' => 'GL_NV_command_list',
    'glewImpl' => '__glewStateCaptureNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint state, GLenum mode'
  },
  'glStencilFillPathInstancedNV' => {
    'argdata' => [
      [
        'numPaths',
        'GLsizei '
      ],
      [
        'pathNameType',
        'GLenum '
      ],
      [
        'paths',
        'const void *'
      ],
      [
        'pathBase',
        'GLuint '
      ],
      [
        'fillMode',
        'GLenum '
      ],
      [
        'mask',
        'GLuint '
      ],
      [
        'transformType',
        'GLenum '
      ],
      [
        'transformValues',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glStencilFillPathInstancedNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewStencilFillPathInstancedNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues'
  },
  'glStencilFillPathNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'fillMode',
        'GLenum '
      ],
      [
        'mask',
        'GLuint '
      ]
    ],
    'binding_name' => 'glStencilFillPathNV',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewStencilFillPathNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint path, GLenum fillMode, GLuint mask'
  },
  'glStencilFunc' => {
    'argdata' => [
      [
        'func',
        'GLenum '
      ],
      [
        'ref',
        'GLint '
      ],
      [
        'mask',
        'GLuint '
      ]
    ],
    'binding_name' => 'glStencilFunc',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum func, GLint ref, GLuint mask'
  },
  'glStencilFuncSeparate' => {
    'argdata' => [
      [
        'frontfunc',
        'GLenum '
      ],
      [
        'backfunc',
        'GLenum '
      ],
      [
        'ref',
        'GLint '
      ],
      [
        'mask',
        'GLuint '
      ]
    ],
    'binding_name' => 'glStencilFuncSeparate',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewStencilFuncSeparate',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask'
  },
  'glStencilFuncSeparateATI' => {
    'argdata' => [
      [
        'frontfunc',
        'GLenum '
      ],
      [
        'backfunc',
        'GLenum '
      ],
      [
        'ref',
        'GLint '
      ],
      [
        'mask',
        'GLuint '
      ]
    ],
    'binding_name' => 'glStencilFuncSeparateATI',
    'feature' => 'GL_ATI_separate_stencil',
    'glewImpl' => '__glewStencilFuncSeparateATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask'
  },
  'glStencilMask' => {
    'argdata' => [
      [
        'mask',
        'GLuint '
      ]
    ],
    'binding_name' => 'glStencilMask',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint mask'
  },
  'glStencilMaskSeparate' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'mask',
        'GLuint '
      ]
    ],
    'binding_name' => 'glStencilMaskSeparate',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewStencilMaskSeparate',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLuint mask'
  },
  'glStencilOp' => {
    'argdata' => [
      [
        'fail',
        'GLenum '
      ],
      [
        'zfail',
        'GLenum '
      ],
      [
        'zpass',
        'GLenum '
      ]
    ],
    'binding_name' => 'glStencilOp',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum fail, GLenum zfail, GLenum zpass'
  },
  'glStencilOpSeparate' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'sfail',
        'GLenum '
      ],
      [
        'dpfail',
        'GLenum '
      ],
      [
        'dppass',
        'GLenum '
      ]
    ],
    'binding_name' => 'glStencilOpSeparate',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewStencilOpSeparate',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass'
  },
  'glStencilOpSeparateATI' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'sfail',
        'GLenum '
      ],
      [
        'dpfail',
        'GLenum '
      ],
      [
        'dppass',
        'GLenum '
      ]
    ],
    'binding_name' => 'glStencilOpSeparateATI',
    'feature' => 'GL_ATI_separate_stencil',
    'glewImpl' => '__glewStencilOpSeparateATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass'
  },
  'glStencilOpValueAMD' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'value',
        'GLuint '
      ]
    ],
    'binding_name' => 'glStencilOpValueAMD',
    'feature' => 'GL_AMD_stencil_operation_extended',
    'glewImpl' => '__glewStencilOpValueAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLuint value'
  },
  'glStencilStrokePathInstancedNV' => {
    'argdata' => [
      [
        'numPaths',
        'GLsizei '
      ],
      [
        'pathNameType',
        'GLenum '
      ],
      [
        'paths',
        'const void *'
      ],
      [
        'pathBase',
        'GLuint '
      ],
      [
        'reference',
        'GLint '
      ],
      [
        'mask',
        'GLuint '
      ],
      [
        'transformType',
        'GLenum '
      ],
      [
        'transformValues',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glStencilStrokePathInstancedNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewStencilStrokePathInstancedNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues'
  },
  'glStencilStrokePathNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'reference',
        'GLint '
      ],
      [
        'mask',
        'GLuint '
      ]
    ],
    'binding_name' => 'glStencilStrokePathNV',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewStencilStrokePathNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint path, GLint reference, GLuint mask'
  },
  'glStencilThenCoverFillPathInstancedNV' => {
    'argdata' => [
      [
        'numPaths',
        'GLsizei '
      ],
      [
        'pathNameType',
        'GLenum '
      ],
      [
        'paths',
        'const void *'
      ],
      [
        'pathBase',
        'GLuint '
      ],
      [
        'fillMode',
        'GLenum '
      ],
      [
        'mask',
        'GLuint '
      ],
      [
        'coverMode',
        'GLenum '
      ],
      [
        'transformType',
        'GLenum '
      ],
      [
        'transformValues',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glStencilThenCoverFillPathInstancedNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewStencilThenCoverFillPathInstancedNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues'
  },
  'glStencilThenCoverFillPathNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'fillMode',
        'GLenum '
      ],
      [
        'mask',
        'GLuint '
      ],
      [
        'coverMode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glStencilThenCoverFillPathNV',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewStencilThenCoverFillPathNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode'
  },
  'glStencilThenCoverStrokePathInstancedNV' => {
    'argdata' => [
      [
        'numPaths',
        'GLsizei '
      ],
      [
        'pathNameType',
        'GLenum '
      ],
      [
        'paths',
        'const void *'
      ],
      [
        'pathBase',
        'GLuint '
      ],
      [
        'reference',
        'GLint '
      ],
      [
        'mask',
        'GLuint '
      ],
      [
        'coverMode',
        'GLenum '
      ],
      [
        'transformType',
        'GLenum '
      ],
      [
        'transformValues',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glStencilThenCoverStrokePathInstancedNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewStencilThenCoverStrokePathInstancedNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues'
  },
  'glStencilThenCoverStrokePathNV' => {
    'argdata' => [
      [
        'path',
        'GLuint '
      ],
      [
        'reference',
        'GLint '
      ],
      [
        'mask',
        'GLuint '
      ],
      [
        'coverMode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glStencilThenCoverStrokePathNV',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewStencilThenCoverStrokePathNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint path, GLint reference, GLuint mask, GLenum coverMode'
  },
  'glStereoParameterfNV' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glStereoParameterfNV',
    'feature' => 'GL_NV_3dvision_settings',
    'glewImpl' => '__glewStereoParameterfNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfloat param'
  },
  'glStereoParameteriNV' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glStereoParameteriNV',
    'feature' => 'GL_NV_3dvision_settings',
    'glewImpl' => '__glewStereoParameteriNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint param'
  },
  'glStringMarkerGREMEDY' => {
    'argdata' => [
      [
        'len',
        'GLsizei '
      ],
      [
        'string',
        'const void *'
      ]
    ],
    'binding_name' => 'glStringMarkerGREMEDY_c',
    'feature' => 'GL_GREMEDY_string_marker',
    'glewImpl' => '__glewStringMarkerGREMEDY',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei len, const void *string'
  },
  'glSubpixelPrecisionBiasNV' => {
    'argdata' => [
      [
        'xbits',
        'GLuint '
      ],
      [
        'ybits',
        'GLuint '
      ]
    ],
    'binding_name' => 'glSubpixelPrecisionBiasNV',
    'feature' => 'GL_NV_conservative_raster',
    'glewImpl' => '__glewSubpixelPrecisionBiasNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint xbits, GLuint ybits'
  },
  'glSwapMPEGPredictorsSGIX' => {
    'argdata' => [
      [
        'target0',
        'GLenum '
      ],
      [
        'target1',
        'GLenum '
      ]
    ],
    'binding_name' => 'glSwapMPEGPredictorsSGIX',
    'feature' => 'GL_SGIX_mpeg1',
    'glewImpl' => '__glewSwapMPEGPredictorsSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target0, GLenum target1'
  },
  'glSwizzleEXT' => {
    'argdata' => [
      [
        'res',
        'GLuint '
      ],
      [
        'in',
        'GLuint '
      ],
      [
        'outX',
        'GLenum '
      ],
      [
        'outY',
        'GLenum '
      ],
      [
        'outZ',
        'GLenum '
      ],
      [
        'outW',
        'GLenum '
      ]
    ],
    'binding_name' => 'glSwizzleEXT',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewSwizzleEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW'
  },
  'glSyncTextureINTEL' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ]
    ],
    'binding_name' => 'glSyncTextureINTEL',
    'feature' => 'GL_LAYOUT_LINEAR_INTEL',
    'glewImpl' => '__glewSyncTextureINTEL',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture'
  },
  'glTagSampleBufferSGIX' => {
    'binding_name' => 'glTagSampleBufferSGIX',
    'feature' => 'GL_SGIX_tag_sample_buffer',
    'glewImpl' => '__glewTagSampleBufferSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glTangentPointerEXT' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'void *'
      ]
    ],
    'binding_name' => 'glTangentPointerEXT_c',
    'feature' => 'GL_EXT_coordinate_frame',
    'glewImpl' => '__glewTangentPointerEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLsizei stride, void *pointer'
  },
  'glTbufferMask3DFX' => {
    'argdata' => [
      [
        'mask',
        'GLuint '
      ]
    ],
    'binding_name' => 'glTbufferMask3DFX',
    'feature' => 'GL_3DFX_tbuffer',
    'glewImpl' => '__glewTbufferMask3DFX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint mask'
  },
  'glTessellationFactorAMD' => {
    'argdata' => [
      [
        'factor',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glTessellationFactorAMD',
    'feature' => 'GL_AMD_vertex_shader_tessellator',
    'glewImpl' => '__glewTessellationFactorAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat factor'
  },
  'glTessellationModeAMD' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glTessellationModeAMD',
    'feature' => 'GL_AMD_vertex_shader_tessellator',
    'glewImpl' => '__glewTessellationModeAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode'
  },
  'glTestFenceAPPLE' => {
    'argdata' => [
      [
        'fence',
        'GLuint '
      ]
    ],
    'binding_name' => 'glTestFenceAPPLE',
    'feature' => 'GL_APPLE_fence',
    'glewImpl' => '__glewTestFenceAPPLE',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint fence'
  },
  'glTestFenceNV' => {
    'argdata' => [
      [
        'fence',
        'GLuint '
      ]
    ],
    'binding_name' => 'glTestFenceNV',
    'feature' => 'GL_NV_fence',
    'glewImpl' => '__glewTestFenceNV',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint fence'
  },
  'glTestObjectAPPLE' => {
    'argdata' => [
      [
        'object',
        'GLenum '
      ],
      [
        'name',
        'GLuint '
      ]
    ],
    'binding_name' => 'glTestObjectAPPLE',
    'feature' => 'GL_APPLE_fence',
    'glewImpl' => '__glewTestObjectAPPLE',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLenum object, GLuint name'
  },
  'glTexBuffer' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalFormat',
        'GLenum '
      ],
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glTexBuffer',
    'feature' => 'GL_VERSION_3_1',
    'glewImpl' => '__glewTexBuffer',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalFormat, GLuint buffer'
  },
  'glTexBufferARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glTexBufferARB',
    'feature' => 'GL_ARB_texture_buffer_object',
    'glewImpl' => '__glewTexBufferARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLuint buffer'
  },
  'glTexBufferEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glTexBufferEXT',
    'feature' => 'GL_EXT_texture_buffer_object',
    'glewImpl' => '__glewTexBufferEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLuint buffer'
  },
  'glTexBufferRange' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ]
    ],
    'binding_name' => 'glTexBufferRange',
    'feature' => 'GL_ARB_texture_buffer_range',
    'glewImpl' => '__glewTexBufferRange',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size'
  },
  'glTexBumpParameterfvATI' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glTexBumpParameterfvATI_c',
    'feature' => 'GL_ATI_envmap_bumpmap',
    'glewImpl' => '__glewTexBumpParameterfvATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfloat *param'
  },
  'glTexBumpParameterivATI' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint *'
      ]
    ],
    'binding_name' => 'glTexBumpParameterivATI_c',
    'feature' => 'GL_ATI_envmap_bumpmap',
    'glewImpl' => '__glewTexBumpParameterivATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint *param'
  },
  'glTexCoord1d' => {
    'argdata' => [
      [
        's',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glTexCoord1d',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble s'
  },
  'glTexCoord1dv' => {
    'argdata' => [
      [
        'v',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glTexCoord1dv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble *v'
  },
  'glTexCoord1f' => {
    'argdata' => [
      [
        's',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glTexCoord1f',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat s'
  },
  'glTexCoord1fv' => {
    'argdata' => [
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glTexCoord1fv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat *v'
  },
  'glTexCoord1hNV' => {
    'argdata' => [
      [
        's',
        'GLhalf '
      ]
    ],
    'binding_name' => 'glTexCoord1hNV',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewTexCoord1hNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhalf s'
  },
  'glTexCoord1hvNV' => {
    'argdata' => [
      [
        'v',
        'const GLhalf* '
      ]
    ],
    'binding_name' => 'glTexCoord1hvNV_c',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewTexCoord1hvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLhalf* v'
  },
  'glTexCoord1i' => {
    'argdata' => [
      [
        's',
        'GLint '
      ]
    ],
    'binding_name' => 'glTexCoord1i',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint s'
  },
  'glTexCoord1iv' => {
    'argdata' => [
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glTexCoord1iv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLint *v'
  },
  'glTexCoord1s' => {
    'argdata' => [
      [
        's',
        'GLshort '
      ]
    ],
    'binding_name' => 'glTexCoord1s',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLshort s'
  },
  'glTexCoord1sv' => {
    'argdata' => [
      [
        'v',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glTexCoord1sv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLshort *v'
  },
  'glTexCoord2d' => {
    'argdata' => [
      [
        's',
        'GLdouble '
      ],
      [
        't',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glTexCoord2d',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble s, GLdouble t'
  },
  'glTexCoord2dv' => {
    'argdata' => [
      [
        'v',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glTexCoord2dv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble *v'
  },
  'glTexCoord2f' => {
    'argdata' => [
      [
        's',
        'GLfloat '
      ],
      [
        't',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glTexCoord2f',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat s, GLfloat t'
  },
  'glTexCoord2fColor3fVertex3fSUN' => {
    'argdata' => [
      [
        's',
        'GLfloat '
      ],
      [
        't',
        'GLfloat '
      ],
      [
        'r',
        'GLfloat '
      ],
      [
        'g',
        'GLfloat '
      ],
      [
        'b',
        'GLfloat '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glTexCoord2fColor3fVertex3fSUN',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewTexCoord2fColor3fVertex3fSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z'
  },
  'glTexCoord2fColor3fVertex3fvSUN' => {
    'argdata' => [
      [
        'tc',
        'const GLfloat* '
      ],
      [
        'c',
        'const GLfloat *'
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glTexCoord2fColor3fVertex3fvSUN_c',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewTexCoord2fColor3fVertex3fvSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat* tc, const GLfloat *c, const GLfloat *v'
  },
  'glTexCoord2fColor4fNormal3fVertex3fSUN' => {
    'argdata' => [
      [
        's',
        'GLfloat '
      ],
      [
        't',
        'GLfloat '
      ],
      [
        'r',
        'GLfloat '
      ],
      [
        'g',
        'GLfloat '
      ],
      [
        'b',
        'GLfloat '
      ],
      [
        'a',
        'GLfloat '
      ],
      [
        'nx',
        'GLfloat '
      ],
      [
        'ny',
        'GLfloat '
      ],
      [
        'nz',
        'GLfloat '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glTexCoord2fColor4fNormal3fVertex3fSUN',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewTexCoord2fColor4fNormal3fVertex3fSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z'
  },
  'glTexCoord2fColor4fNormal3fVertex3fvSUN' => {
    'argdata' => [
      [
        'tc',
        'const GLfloat* '
      ],
      [
        'c',
        'const GLfloat *'
      ],
      [
        'n',
        'const GLfloat *'
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glTexCoord2fColor4fNormal3fVertex3fvSUN_c',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewTexCoord2fColor4fNormal3fVertex3fvSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat* tc, const GLfloat *c, const GLfloat *n, const GLfloat *v'
  },
  'glTexCoord2fColor4ubVertex3fSUN' => {
    'argdata' => [
      [
        's',
        'GLfloat '
      ],
      [
        't',
        'GLfloat '
      ],
      [
        'r',
        'GLubyte '
      ],
      [
        'g',
        'GLubyte '
      ],
      [
        'b',
        'GLubyte '
      ],
      [
        'a',
        'GLubyte '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glTexCoord2fColor4ubVertex3fSUN',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewTexCoord2fColor4ubVertex3fSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z'
  },
  'glTexCoord2fColor4ubVertex3fvSUN' => {
    'argdata' => [
      [
        'tc',
        'const GLfloat* '
      ],
      [
        'c',
        'const GLubyte *'
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glTexCoord2fColor4ubVertex3fvSUN_c',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewTexCoord2fColor4ubVertex3fvSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat* tc, const GLubyte *c, const GLfloat *v'
  },
  'glTexCoord2fNormal3fVertex3fSUN' => {
    'argdata' => [
      [
        's',
        'GLfloat '
      ],
      [
        't',
        'GLfloat '
      ],
      [
        'nx',
        'GLfloat '
      ],
      [
        'ny',
        'GLfloat '
      ],
      [
        'nz',
        'GLfloat '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glTexCoord2fNormal3fVertex3fSUN',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewTexCoord2fNormal3fVertex3fSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z'
  },
  'glTexCoord2fNormal3fVertex3fvSUN' => {
    'argdata' => [
      [
        'tc',
        'const GLfloat* '
      ],
      [
        'n',
        'const GLfloat *'
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glTexCoord2fNormal3fVertex3fvSUN_c',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewTexCoord2fNormal3fVertex3fvSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat* tc, const GLfloat *n, const GLfloat *v'
  },
  'glTexCoord2fVertex3fSUN' => {
    'argdata' => [
      [
        's',
        'GLfloat '
      ],
      [
        't',
        'GLfloat '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glTexCoord2fVertex3fSUN',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewTexCoord2fVertex3fSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z'
  },
  'glTexCoord2fVertex3fvSUN' => {
    'argdata' => [
      [
        'tc',
        'const GLfloat* '
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glTexCoord2fVertex3fvSUN_c',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewTexCoord2fVertex3fvSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat* tc, const GLfloat *v'
  },
  'glTexCoord2fv' => {
    'argdata' => [
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glTexCoord2fv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat *v'
  },
  'glTexCoord2hNV' => {
    'argdata' => [
      [
        's',
        'GLhalf '
      ],
      [
        't',
        'GLhalf '
      ]
    ],
    'binding_name' => 'glTexCoord2hNV',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewTexCoord2hNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhalf s, GLhalf t'
  },
  'glTexCoord2hvNV' => {
    'argdata' => [
      [
        'v',
        'const GLhalf* '
      ]
    ],
    'binding_name' => 'glTexCoord2hvNV_c',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewTexCoord2hvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLhalf* v'
  },
  'glTexCoord2i' => {
    'argdata' => [
      [
        's',
        'GLint '
      ],
      [
        't',
        'GLint '
      ]
    ],
    'binding_name' => 'glTexCoord2i',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint s, GLint t'
  },
  'glTexCoord2iv' => {
    'argdata' => [
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glTexCoord2iv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLint *v'
  },
  'glTexCoord2s' => {
    'argdata' => [
      [
        's',
        'GLshort '
      ],
      [
        't',
        'GLshort '
      ]
    ],
    'binding_name' => 'glTexCoord2s',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLshort s, GLshort t'
  },
  'glTexCoord2sv' => {
    'argdata' => [
      [
        'v',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glTexCoord2sv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLshort *v'
  },
  'glTexCoord3d' => {
    'argdata' => [
      [
        's',
        'GLdouble '
      ],
      [
        't',
        'GLdouble '
      ],
      [
        'r',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glTexCoord3d',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble s, GLdouble t, GLdouble r'
  },
  'glTexCoord3dv' => {
    'argdata' => [
      [
        'v',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glTexCoord3dv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble *v'
  },
  'glTexCoord3f' => {
    'argdata' => [
      [
        's',
        'GLfloat '
      ],
      [
        't',
        'GLfloat '
      ],
      [
        'r',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glTexCoord3f',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat s, GLfloat t, GLfloat r'
  },
  'glTexCoord3fv' => {
    'argdata' => [
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glTexCoord3fv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat *v'
  },
  'glTexCoord3hNV' => {
    'argdata' => [
      [
        's',
        'GLhalf '
      ],
      [
        't',
        'GLhalf '
      ],
      [
        'r',
        'GLhalf '
      ]
    ],
    'binding_name' => 'glTexCoord3hNV',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewTexCoord3hNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhalf s, GLhalf t, GLhalf r'
  },
  'glTexCoord3hvNV' => {
    'argdata' => [
      [
        'v',
        'const GLhalf* '
      ]
    ],
    'binding_name' => 'glTexCoord3hvNV_c',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewTexCoord3hvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLhalf* v'
  },
  'glTexCoord3i' => {
    'argdata' => [
      [
        's',
        'GLint '
      ],
      [
        't',
        'GLint '
      ],
      [
        'r',
        'GLint '
      ]
    ],
    'binding_name' => 'glTexCoord3i',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint s, GLint t, GLint r'
  },
  'glTexCoord3iv' => {
    'argdata' => [
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glTexCoord3iv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLint *v'
  },
  'glTexCoord3s' => {
    'argdata' => [
      [
        's',
        'GLshort '
      ],
      [
        't',
        'GLshort '
      ],
      [
        'r',
        'GLshort '
      ]
    ],
    'binding_name' => 'glTexCoord3s',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLshort s, GLshort t, GLshort r'
  },
  'glTexCoord3sv' => {
    'argdata' => [
      [
        'v',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glTexCoord3sv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLshort *v'
  },
  'glTexCoord4d' => {
    'argdata' => [
      [
        's',
        'GLdouble '
      ],
      [
        't',
        'GLdouble '
      ],
      [
        'r',
        'GLdouble '
      ],
      [
        'q',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glTexCoord4d',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble s, GLdouble t, GLdouble r, GLdouble q'
  },
  'glTexCoord4dv' => {
    'argdata' => [
      [
        'v',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glTexCoord4dv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble *v'
  },
  'glTexCoord4f' => {
    'argdata' => [
      [
        's',
        'GLfloat '
      ],
      [
        't',
        'GLfloat '
      ],
      [
        'r',
        'GLfloat '
      ],
      [
        'q',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glTexCoord4f',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat s, GLfloat t, GLfloat r, GLfloat q'
  },
  'glTexCoord4fColor4fNormal3fVertex4fSUN' => {
    'argdata' => [
      [
        's',
        'GLfloat '
      ],
      [
        't',
        'GLfloat '
      ],
      [
        'p',
        'GLfloat '
      ],
      [
        'q',
        'GLfloat '
      ],
      [
        'r',
        'GLfloat '
      ],
      [
        'g',
        'GLfloat '
      ],
      [
        'b',
        'GLfloat '
      ],
      [
        'a',
        'GLfloat '
      ],
      [
        'nx',
        'GLfloat '
      ],
      [
        'ny',
        'GLfloat '
      ],
      [
        'nz',
        'GLfloat '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ],
      [
        'w',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glTexCoord4fColor4fNormal3fVertex4fSUN',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewTexCoord4fColor4fNormal3fVertex4fSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w'
  },
  'glTexCoord4fColor4fNormal3fVertex4fvSUN' => {
    'argdata' => [
      [
        'tc',
        'const GLfloat* '
      ],
      [
        'c',
        'const GLfloat *'
      ],
      [
        'n',
        'const GLfloat *'
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glTexCoord4fColor4fNormal3fVertex4fvSUN_c',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewTexCoord4fColor4fNormal3fVertex4fvSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat* tc, const GLfloat *c, const GLfloat *n, const GLfloat *v'
  },
  'glTexCoord4fVertex4fSUN' => {
    'argdata' => [
      [
        's',
        'GLfloat '
      ],
      [
        't',
        'GLfloat '
      ],
      [
        'p',
        'GLfloat '
      ],
      [
        'q',
        'GLfloat '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ],
      [
        'w',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glTexCoord4fVertex4fSUN',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewTexCoord4fVertex4fSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w'
  },
  'glTexCoord4fVertex4fvSUN' => {
    'argdata' => [
      [
        'tc',
        'const GLfloat* '
      ],
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glTexCoord4fVertex4fvSUN_c',
    'feature' => 'GL_SUN_vertex',
    'glewImpl' => '__glewTexCoord4fVertex4fvSUN',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat* tc, const GLfloat *v'
  },
  'glTexCoord4fv' => {
    'argdata' => [
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glTexCoord4fv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat *v'
  },
  'glTexCoord4hNV' => {
    'argdata' => [
      [
        's',
        'GLhalf '
      ],
      [
        't',
        'GLhalf '
      ],
      [
        'r',
        'GLhalf '
      ],
      [
        'q',
        'GLhalf '
      ]
    ],
    'binding_name' => 'glTexCoord4hNV',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewTexCoord4hNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhalf s, GLhalf t, GLhalf r, GLhalf q'
  },
  'glTexCoord4hvNV' => {
    'argdata' => [
      [
        'v',
        'const GLhalf* '
      ]
    ],
    'binding_name' => 'glTexCoord4hvNV_c',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewTexCoord4hvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLhalf* v'
  },
  'glTexCoord4i' => {
    'argdata' => [
      [
        's',
        'GLint '
      ],
      [
        't',
        'GLint '
      ],
      [
        'r',
        'GLint '
      ],
      [
        'q',
        'GLint '
      ]
    ],
    'binding_name' => 'glTexCoord4i',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint s, GLint t, GLint r, GLint q'
  },
  'glTexCoord4iv' => {
    'argdata' => [
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glTexCoord4iv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLint *v'
  },
  'glTexCoord4s' => {
    'argdata' => [
      [
        's',
        'GLshort '
      ],
      [
        't',
        'GLshort '
      ],
      [
        'r',
        'GLshort '
      ],
      [
        'q',
        'GLshort '
      ]
    ],
    'binding_name' => 'glTexCoord4s',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLshort s, GLshort t, GLshort r, GLshort q'
  },
  'glTexCoord4sv' => {
    'argdata' => [
      [
        'v',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glTexCoord4sv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLshort *v'
  },
  'glTexCoordFormatNV' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glTexCoordFormatNV',
    'feature' => 'GL_NV_vertex_buffer_unified_memory',
    'glewImpl' => '__glewTexCoordFormatNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLenum type, GLsizei stride'
  },
  'glTexCoordP1ui' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'coords',
        'GLuint '
      ]
    ],
    'binding_name' => 'glTexCoordP1ui',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewTexCoordP1ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLuint coords'
  },
  'glTexCoordP1uiv' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'coords',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glTexCoordP1uiv_c',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewTexCoordP1uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, const GLuint* coords'
  },
  'glTexCoordP2ui' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'coords',
        'GLuint '
      ]
    ],
    'binding_name' => 'glTexCoordP2ui',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewTexCoordP2ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLuint coords'
  },
  'glTexCoordP2uiv' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'coords',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glTexCoordP2uiv_c',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewTexCoordP2uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, const GLuint* coords'
  },
  'glTexCoordP3ui' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'coords',
        'GLuint '
      ]
    ],
    'binding_name' => 'glTexCoordP3ui',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewTexCoordP3ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLuint coords'
  },
  'glTexCoordP3uiv' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'coords',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glTexCoordP3uiv_c',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewTexCoordP3uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, const GLuint* coords'
  },
  'glTexCoordP4ui' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'coords',
        'GLuint '
      ]
    ],
    'binding_name' => 'glTexCoordP4ui',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewTexCoordP4ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLuint coords'
  },
  'glTexCoordP4uiv' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'coords',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glTexCoordP4uiv_c',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewTexCoordP4uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, const GLuint* coords'
  },
  'glTexCoordPointer' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'const void *'
      ]
    ],
    'binding_name' => 'glTexCoordPointer_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLenum type, GLsizei stride, const void *pointer'
  },
  'glTexCoordPointerEXT' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'pointer',
        'const void *'
      ]
    ],
    'binding_name' => 'glTexCoordPointerEXT_c',
    'feature' => 'GL_EXT_vertex_array',
    'glewImpl' => '__glewTexCoordPointerEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer'
  },
  'glTexCoordPointerListIBM' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLint '
      ],
      [
        'pointer',
        'const void** '
      ],
      [
        'ptrstride',
        'GLint '
      ]
    ],
    'binding_name' => 'glTexCoordPointerListIBM_c',
    'feature' => 'GL_IBM_vertex_array_lists',
    'glewImpl' => '__glewTexCoordPointerListIBM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride'
  },
  'glTexCoordPointervINTEL' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pointer',
        'const void** '
      ]
    ],
    'binding_name' => 'glTexCoordPointervINTEL_c',
    'feature' => 'GL_INTEL_parallel_arrays',
    'glewImpl' => '__glewTexCoordPointervINTEL',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLenum type, const void** pointer'
  },
  'glTexEnvf' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glTexEnvf',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLfloat param'
  },
  'glTexEnvfv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glTexEnvfv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLfloat *params'
  },
  'glTexEnvi' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glTexEnvi',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint param'
  },
  'glTexEnviv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glTexEnviv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLint *params'
  },
  'glTexEnvx' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfixed '
      ]
    ],
    'binding_name' => 'glTexEnvx',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewTexEnvx',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLfixed param'
  },
  'glTexEnvxv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfixed* '
      ]
    ],
    'binding_name' => 'glTexEnvxv_c',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewTexEnvxv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLfixed* params'
  },
  'glTexFilterFuncSGIS' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'filter',
        'GLenum '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'weights',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glTexFilterFuncSGIS_c',
    'feature' => 'GL_SGIS_texture_filter4',
    'glewImpl' => '__glewTexFilterFuncSGIS',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum filter, GLsizei n, const GLfloat* weights'
  },
  'glTexGend' => {
    'argdata' => [
      [
        'coord',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glTexGend',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum coord, GLenum pname, GLdouble param'
  },
  'glTexGendv' => {
    'argdata' => [
      [
        'coord',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glTexGendv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum coord, GLenum pname, const GLdouble *params'
  },
  'glTexGenf' => {
    'argdata' => [
      [
        'coord',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glTexGenf',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum coord, GLenum pname, GLfloat param'
  },
  'glTexGenfv' => {
    'argdata' => [
      [
        'coord',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glTexGenfv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum coord, GLenum pname, const GLfloat *params'
  },
  'glTexGeni' => {
    'argdata' => [
      [
        'coord',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glTexGeni',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum coord, GLenum pname, GLint param'
  },
  'glTexGeniv' => {
    'argdata' => [
      [
        'coord',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glTexGeniv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum coord, GLenum pname, const GLint *params'
  },
  'glTexImage1D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glTexImage1D_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels'
  },
  'glTexImage2D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glTexImage2D_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels'
  },
  'glTexImage2DMultisample' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'samples',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'fixedsamplelocations',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glTexImage2DMultisample',
    'feature' => 'GL_ARB_texture_multisample',
    'glewImpl' => '__glewTexImage2DMultisample',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations'
  },
  'glTexImage2DMultisampleCoverageNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'coverageSamples',
        'GLsizei '
      ],
      [
        'colorSamples',
        'GLsizei '
      ],
      [
        'internalFormat',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'fixedSampleLocations',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glTexImage2DMultisampleCoverageNV',
    'feature' => 'GL_NV_texture_multisample',
    'glewImpl' => '__glewTexImage2DMultisampleCoverageNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations'
  },
  'glTexImage3D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalFormat',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glTexImage3D_c',
    'feature' => 'GL_VERSION_1_2',
    'glewImpl' => '__glewTexImage3D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels'
  },
  'glTexImage3DEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glTexImage3DEXT_c',
    'feature' => 'GL_EXT_texture3D',
    'glewImpl' => '__glewTexImage3DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels'
  },
  'glTexImage3DMultisample' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'samples',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'fixedsamplelocations',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glTexImage3DMultisample',
    'feature' => 'GL_ARB_texture_multisample',
    'glewImpl' => '__glewTexImage3DMultisample',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations'
  },
  'glTexImage3DMultisampleCoverageNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'coverageSamples',
        'GLsizei '
      ],
      [
        'colorSamples',
        'GLsizei '
      ],
      [
        'internalFormat',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'fixedSampleLocations',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glTexImage3DMultisampleCoverageNV',
    'feature' => 'GL_NV_texture_multisample',
    'glewImpl' => '__glewTexImage3DMultisampleCoverageNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations'
  },
  'glTexImage3DNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalFormat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glTexImage3DNV_c',
    'feature' => 'GL_NV_texture_array',
    'glewImpl' => '__glewTexImage3DNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels'
  },
  'glTexImage4DSGIS' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'extent',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glTexImage4DSGIS_c',
    'feature' => 'GL_SGIS_texture4D',
    'glewImpl' => '__glewTexImage4DSGIS',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei extent, GLint border, GLenum format, GLenum type, const void *pixels'
  },
  'glTexPageCommitmentARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'commit',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glTexPageCommitmentARB',
    'feature' => 'GL_ARB_sparse_texture',
    'glewImpl' => '__glewTexPageCommitmentARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit'
  },
  'glTexPageCommitmentEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'commit',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glTexPageCommitmentEXT',
    'feature' => 'GL_EXT_sparse_texture',
    'glewImpl' => '__glewTexPageCommitmentEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit'
  },
  'glTexParameterIiv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glTexParameterIiv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewTexParameterIiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLint* params'
  },
  'glTexParameterIivEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glTexParameterIivEXT_c',
    'feature' => 'GL_EXT_texture_integer',
    'glewImpl' => '__glewTexParameterIivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLint *params'
  },
  'glTexParameterIuiv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glTexParameterIuiv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewTexParameterIuiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLuint* params'
  },
  'glTexParameterIuivEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLuint *'
      ]
    ],
    'binding_name' => 'glTexParameterIuivEXT_c',
    'feature' => 'GL_EXT_texture_integer',
    'glewImpl' => '__glewTexParameterIuivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLuint *params'
  },
  'glTexParameterf' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glTexParameterf',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLfloat param'
  },
  'glTexParameterfv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glTexParameterfv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLfloat *params'
  },
  'glTexParameteri' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glTexParameteri',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLint param'
  },
  'glTexParameteriv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glTexParameteriv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLint *params'
  },
  'glTexParameterx' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfixed '
      ]
    ],
    'binding_name' => 'glTexParameterx',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewTexParameterx',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, GLfixed param'
  },
  'glTexParameterxv' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfixed* '
      ]
    ],
    'binding_name' => 'glTexParameterxv_c',
    'feature' => 'GL_REGAL_ES1_1_compatibility',
    'glewImpl' => '__glewTexParameterxv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum pname, const GLfixed* params'
  },
  'glTexRenderbufferNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'renderbuffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glTexRenderbufferNV',
    'feature' => 'GL_NV_explicit_multisample',
    'glewImpl' => '__glewTexRenderbufferNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint renderbuffer'
  },
  'glTexScissorFuncINTEL' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'lfunc',
        'GLenum '
      ],
      [
        'hfunc',
        'GLenum '
      ]
    ],
    'binding_name' => 'glTexScissorFuncINTEL',
    'feature' => 'GL_INTEL_texture_scissor',
    'glewImpl' => '__glewTexScissorFuncINTEL',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum lfunc, GLenum hfunc'
  },
  'glTexScissorINTEL' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'tlow',
        'GLclampf '
      ],
      [
        'thigh',
        'GLclampf '
      ]
    ],
    'binding_name' => 'glTexScissorINTEL',
    'feature' => 'GL_INTEL_texture_scissor',
    'glewImpl' => '__glewTexScissorINTEL',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLclampf tlow, GLclampf thigh'
  },
  'glTexStorage1D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'levels',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glTexStorage1D',
    'feature' => 'GL_ARB_texture_storage',
    'glewImpl' => '__glewTexStorage1D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei levels, GLenum internalformat, GLsizei width'
  },
  'glTexStorage1DEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'levels',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glTexStorage1DEXT',
    'feature' => 'GL_EXT_texture_storage',
    'glewImpl' => '__glewTexStorage1DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei levels, GLenum internalformat, GLsizei width'
  },
  'glTexStorage2D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'levels',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glTexStorage2D',
    'feature' => 'GL_ARB_texture_storage',
    'glewImpl' => '__glewTexStorage2D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height'
  },
  'glTexStorage2DEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'levels',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glTexStorage2DEXT',
    'feature' => 'GL_EXT_texture_storage',
    'glewImpl' => '__glewTexStorage2DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height'
  },
  'glTexStorage2DMultisample' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'samples',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'fixedsamplelocations',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glTexStorage2DMultisample',
    'feature' => 'GL_ARB_texture_storage_multisample',
    'glewImpl' => '__glewTexStorage2DMultisample',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations'
  },
  'glTexStorage3D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'levels',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glTexStorage3D',
    'feature' => 'GL_ARB_texture_storage',
    'glewImpl' => '__glewTexStorage3D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth'
  },
  'glTexStorage3DEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'levels',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glTexStorage3DEXT',
    'feature' => 'GL_EXT_texture_storage',
    'glewImpl' => '__glewTexStorage3DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth'
  },
  'glTexStorage3DMultisample' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'samples',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'fixedsamplelocations',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glTexStorage3DMultisample',
    'feature' => 'GL_ARB_texture_storage_multisample',
    'glewImpl' => '__glewTexStorage3DMultisample',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations'
  },
  'glTexStorageMem1DEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'levels',
        'GLsizei '
      ],
      [
        'internalFormat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'memory',
        'GLuint '
      ],
      [
        'offset',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glTexStorageMem1DEXT',
    'feature' => 'GL_EXT_memory_object',
    'glewImpl' => '__glewTexStorageMem1DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset'
  },
  'glTexStorageMem2DEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'levels',
        'GLsizei '
      ],
      [
        'internalFormat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'memory',
        'GLuint '
      ],
      [
        'offset',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glTexStorageMem2DEXT',
    'feature' => 'GL_EXT_memory_object',
    'glewImpl' => '__glewTexStorageMem2DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset'
  },
  'glTexStorageMem2DMultisampleEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'samples',
        'GLsizei '
      ],
      [
        'internalFormat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'fixedSampleLocations',
        'GLboolean '
      ],
      [
        'memory',
        'GLuint '
      ],
      [
        'offset',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glTexStorageMem2DMultisampleEXT',
    'feature' => 'GL_EXT_memory_object',
    'glewImpl' => '__glewTexStorageMem2DMultisampleEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset'
  },
  'glTexStorageMem3DEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'levels',
        'GLsizei '
      ],
      [
        'internalFormat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'memory',
        'GLuint '
      ],
      [
        'offset',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glTexStorageMem3DEXT',
    'feature' => 'GL_EXT_memory_object',
    'glewImpl' => '__glewTexStorageMem3DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset'
  },
  'glTexStorageMem3DMultisampleEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'samples',
        'GLsizei '
      ],
      [
        'internalFormat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'fixedSampleLocations',
        'GLboolean '
      ],
      [
        'memory',
        'GLuint '
      ],
      [
        'offset',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glTexStorageMem3DMultisampleEXT',
    'feature' => 'GL_EXT_memory_object',
    'glewImpl' => '__glewTexStorageMem3DMultisampleEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset'
  },
  'glTexStorageSparseAMD' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'internalFormat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'layers',
        'GLsizei '
      ],
      [
        'flags',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glTexStorageSparseAMD',
    'feature' => 'GL_AMD_sparse_texture',
    'glewImpl' => '__glewTexStorageSparseAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags'
  },
  'glTexSubImage1D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glTexSubImage1D_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels'
  },
  'glTexSubImage1DEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glTexSubImage1DEXT_c',
    'feature' => 'GL_EXT_subtexture',
    'glewImpl' => '__glewTexSubImage1DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels'
  },
  'glTexSubImage2D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glTexSubImage2D_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels'
  },
  'glTexSubImage2DEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glTexSubImage2DEXT_c',
    'feature' => 'GL_EXT_subtexture',
    'glewImpl' => '__glewTexSubImage2DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels'
  },
  'glTexSubImage3D' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glTexSubImage3D_c',
    'feature' => 'GL_VERSION_1_2',
    'glewImpl' => '__glewTexSubImage3D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels'
  },
  'glTexSubImage3DEXT' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glTexSubImage3DEXT_c',
    'feature' => 'GL_EXT_subtexture',
    'glewImpl' => '__glewTexSubImage3DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels'
  },
  'glTexSubImage3DNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glTexSubImage3DNV_c',
    'feature' => 'GL_NV_texture_array',
    'glewImpl' => '__glewTexSubImage3DNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels'
  },
  'glTexSubImage4DSGIS' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'woffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'extent',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glTexSubImage4DSGIS_c',
    'feature' => 'GL_SGIS_texture4D',
    'glewImpl' => '__glewTexSubImage4DSGIS',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei extent, GLenum format, GLenum type, const void *pixels'
  },
  'glTextureBarrier' => {
    'binding_name' => 'glTextureBarrier',
    'feature' => 'GL_ARB_texture_barrier',
    'glewImpl' => '__glewTextureBarrier',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glTextureBarrierNV' => {
    'binding_name' => 'glTextureBarrierNV',
    'feature' => 'GL_NV_texture_barrier',
    'glewImpl' => '__glewTextureBarrierNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glTextureBuffer' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glTextureBuffer',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewTextureBuffer',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum internalformat, GLuint buffer'
  },
  'glTextureBufferEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glTextureBufferEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewTextureBufferEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLenum internalformat, GLuint buffer'
  },
  'glTextureBufferRange' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ]
    ],
    'binding_name' => 'glTextureBufferRange',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewTextureBufferRange',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size'
  },
  'glTextureBufferRangeEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ]
    ],
    'binding_name' => 'glTextureBufferRangeEXT',
    'feature' => 'GL_ARB_texture_buffer_range',
    'glewImpl' => '__glewTextureBufferRangeEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size'
  },
  'glTextureFogSGIX' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ]
    ],
    'binding_name' => 'glTextureFogSGIX',
    'feature' => 'GL_SGIX_fog_texture',
    'glewImpl' => '__glewTextureFogSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname'
  },
  'glTextureImage1DEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glTextureImage1DEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewTextureImage1DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels'
  },
  'glTextureImage2DEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glTextureImage2DEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewTextureImage2DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels'
  },
  'glTextureImage2DMultisampleCoverageNV' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'coverageSamples',
        'GLsizei '
      ],
      [
        'colorSamples',
        'GLsizei '
      ],
      [
        'internalFormat',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'fixedSampleLocations',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glTextureImage2DMultisampleCoverageNV',
    'feature' => 'GL_NV_texture_multisample',
    'glewImpl' => '__glewTextureImage2DMultisampleCoverageNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations'
  },
  'glTextureImage2DMultisampleNV' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'samples',
        'GLsizei '
      ],
      [
        'internalFormat',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'fixedSampleLocations',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glTextureImage2DMultisampleNV',
    'feature' => 'GL_NV_texture_multisample',
    'glewImpl' => '__glewTextureImage2DMultisampleNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations'
  },
  'glTextureImage3DEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'internalformat',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'border',
        'GLint '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glTextureImage3DEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewTextureImage3DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels'
  },
  'glTextureImage3DMultisampleCoverageNV' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'coverageSamples',
        'GLsizei '
      ],
      [
        'colorSamples',
        'GLsizei '
      ],
      [
        'internalFormat',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'fixedSampleLocations',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glTextureImage3DMultisampleCoverageNV',
    'feature' => 'GL_NV_texture_multisample',
    'glewImpl' => '__glewTextureImage3DMultisampleCoverageNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations'
  },
  'glTextureImage3DMultisampleNV' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'samples',
        'GLsizei '
      ],
      [
        'internalFormat',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'fixedSampleLocations',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glTextureImage3DMultisampleNV',
    'feature' => 'GL_NV_texture_multisample',
    'glewImpl' => '__glewTextureImage3DMultisampleNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations'
  },
  'glTextureLightEXT' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ]
    ],
    'binding_name' => 'glTextureLightEXT',
    'feature' => 'GL_EXT_light_texture',
    'glewImpl' => '__glewTextureLightEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname'
  },
  'glTextureMaterialEXT' => {
    'argdata' => [
      [
        'face',
        'GLenum '
      ],
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glTextureMaterialEXT',
    'feature' => 'GL_EXT_light_texture',
    'glewImpl' => '__glewTextureMaterialEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum face, GLenum mode'
  },
  'glTextureNormalEXT' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glTextureNormalEXT',
    'feature' => 'GL_EXT_texture_perturb_normal',
    'glewImpl' => '__glewTextureNormalEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode'
  },
  'glTexturePageCommitmentEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'commit',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glTexturePageCommitmentEXT',
    'feature' => 'GL_EXT_sparse_texture',
    'glewImpl' => '__glewTexturePageCommitmentEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit'
  },
  'glTextureParameterIiv' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glTextureParameterIiv_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewTextureParameterIiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum pname, const GLint* params'
  },
  'glTextureParameterIivEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glTextureParameterIivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewTextureParameterIivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLenum pname, const GLint* params'
  },
  'glTextureParameterIuiv' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glTextureParameterIuiv_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewTextureParameterIuiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum pname, const GLuint* params'
  },
  'glTextureParameterIuivEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glTextureParameterIuivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewTextureParameterIuivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLenum pname, const GLuint* params'
  },
  'glTextureParameterf' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glTextureParameterf',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewTextureParameterf',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum pname, GLfloat param'
  },
  'glTextureParameterfEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glTextureParameterfEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewTextureParameterfEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLenum pname, GLfloat param'
  },
  'glTextureParameterfv' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glTextureParameterfv_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewTextureParameterfv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum pname, const GLfloat* param'
  },
  'glTextureParameterfvEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glTextureParameterfvEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewTextureParameterfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLenum pname, const GLfloat* param'
  },
  'glTextureParameteri' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glTextureParameteri',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewTextureParameteri',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum pname, GLint param'
  },
  'glTextureParameteriEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glTextureParameteriEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewTextureParameteriEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLenum pname, GLint param'
  },
  'glTextureParameteriv' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glTextureParameteriv_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewTextureParameteriv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum pname, const GLint* param'
  },
  'glTextureParameterivEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glTextureParameterivEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewTextureParameterivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLenum pname, const GLint* param'
  },
  'glTextureRangeAPPLE' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'length',
        'GLsizei '
      ],
      [
        'pointer',
        'void *'
      ]
    ],
    'binding_name' => 'glTextureRangeAPPLE_c',
    'feature' => 'GL_APPLE_texture_range',
    'glewImpl' => '__glewTextureRangeAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLsizei length, void *pointer'
  },
  'glTextureRenderbufferEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'renderbuffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glTextureRenderbufferEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewTextureRenderbufferEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLuint renderbuffer'
  },
  'glTextureStorage1D' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'levels',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glTextureStorage1D',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewTextureStorage1D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width'
  },
  'glTextureStorage1DEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'levels',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glTextureStorage1DEXT',
    'feature' => 'GL_EXT_texture_storage',
    'glewImpl' => '__glewTextureStorage1DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width'
  },
  'glTextureStorage2D' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'levels',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glTextureStorage2D',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewTextureStorage2D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height'
  },
  'glTextureStorage2DEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'levels',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glTextureStorage2DEXT',
    'feature' => 'GL_EXT_texture_storage',
    'glewImpl' => '__glewTextureStorage2DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height'
  },
  'glTextureStorage2DMultisample' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'samples',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'fixedsamplelocations',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glTextureStorage2DMultisample',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewTextureStorage2DMultisample',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations'
  },
  'glTextureStorage2DMultisampleEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'samples',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'fixedsamplelocations',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glTextureStorage2DMultisampleEXT',
    'feature' => 'GL_ARB_texture_storage_multisample',
    'glewImpl' => '__glewTextureStorage2DMultisampleEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations'
  },
  'glTextureStorage3D' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'levels',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glTextureStorage3D',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewTextureStorage3D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth'
  },
  'glTextureStorage3DEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'levels',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glTextureStorage3DEXT',
    'feature' => 'GL_EXT_texture_storage',
    'glewImpl' => '__glewTextureStorage3DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth'
  },
  'glTextureStorage3DMultisample' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'samples',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'fixedsamplelocations',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glTextureStorage3DMultisample',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewTextureStorage3DMultisample',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations'
  },
  'glTextureStorage3DMultisampleEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'samples',
        'GLsizei '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'fixedsamplelocations',
        'GLboolean '
      ]
    ],
    'binding_name' => 'glTextureStorage3DMultisampleEXT',
    'feature' => 'GL_ARB_texture_storage_multisample',
    'glewImpl' => '__glewTextureStorage3DMultisampleEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations'
  },
  'glTextureStorageMem1DEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'levels',
        'GLsizei '
      ],
      [
        'internalFormat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'memory',
        'GLuint '
      ],
      [
        'offset',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glTextureStorageMem1DEXT',
    'feature' => 'GL_EXT_memory_object',
    'glewImpl' => '__glewTextureStorageMem1DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset'
  },
  'glTextureStorageMem2DEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'levels',
        'GLsizei '
      ],
      [
        'internalFormat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'memory',
        'GLuint '
      ],
      [
        'offset',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glTextureStorageMem2DEXT',
    'feature' => 'GL_EXT_memory_object',
    'glewImpl' => '__glewTextureStorageMem2DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset'
  },
  'glTextureStorageMem2DMultisampleEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'samples',
        'GLsizei '
      ],
      [
        'internalFormat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'fixedSampleLocations',
        'GLboolean '
      ],
      [
        'memory',
        'GLuint '
      ],
      [
        'offset',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glTextureStorageMem2DMultisampleEXT',
    'feature' => 'GL_EXT_memory_object',
    'glewImpl' => '__glewTextureStorageMem2DMultisampleEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset'
  },
  'glTextureStorageMem3DEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'levels',
        'GLsizei '
      ],
      [
        'internalFormat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'memory',
        'GLuint '
      ],
      [
        'offset',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glTextureStorageMem3DEXT',
    'feature' => 'GL_EXT_memory_object',
    'glewImpl' => '__glewTextureStorageMem3DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset'
  },
  'glTextureStorageMem3DMultisampleEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'samples',
        'GLsizei '
      ],
      [
        'internalFormat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'fixedSampleLocations',
        'GLboolean '
      ],
      [
        'memory',
        'GLuint '
      ],
      [
        'offset',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glTextureStorageMem3DMultisampleEXT',
    'feature' => 'GL_EXT_memory_object',
    'glewImpl' => '__glewTextureStorageMem3DMultisampleEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset'
  },
  'glTextureStorageSparseAMD' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'internalFormat',
        'GLenum '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'layers',
        'GLsizei '
      ],
      [
        'flags',
        'GLbitfield '
      ]
    ],
    'binding_name' => 'glTextureStorageSparseAMD',
    'feature' => 'GL_AMD_sparse_texture',
    'glewImpl' => '__glewTextureStorageSparseAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags'
  },
  'glTextureSubImage1D' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glTextureSubImage1D_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewTextureSubImage1D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels'
  },
  'glTextureSubImage1DEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glTextureSubImage1DEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewTextureSubImage1DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels'
  },
  'glTextureSubImage2D' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glTextureSubImage2D_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewTextureSubImage2D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels'
  },
  'glTextureSubImage2DEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glTextureSubImage2DEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewTextureSubImage2DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels'
  },
  'glTextureSubImage3D' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glTextureSubImage3D_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewTextureSubImage3D',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels'
  },
  'glTextureSubImage3DEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'level',
        'GLint '
      ],
      [
        'xoffset',
        'GLint '
      ],
      [
        'yoffset',
        'GLint '
      ],
      [
        'zoffset',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ],
      [
        'depth',
        'GLsizei '
      ],
      [
        'format',
        'GLenum '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pixels',
        'const void *'
      ]
    ],
    'binding_name' => 'glTextureSubImage3DEXT_c',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewTextureSubImage3DEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels'
  },
  'glTextureView' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'origtexture',
        'GLuint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'minlevel',
        'GLuint '
      ],
      [
        'numlevels',
        'GLuint '
      ],
      [
        'minlayer',
        'GLuint '
      ],
      [
        'numlayers',
        'GLuint '
      ]
    ],
    'binding_name' => 'glTextureView',
    'feature' => 'GL_ARB_texture_view',
    'glewImpl' => '__glewTextureView',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers'
  },
  'glTextureViewEXT' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'origtexture',
        'GLuint '
      ],
      [
        'internalformat',
        'GLenum '
      ],
      [
        'minlevel',
        'GLuint '
      ],
      [
        'numlevels',
        'GLuint '
      ],
      [
        'minlayer',
        'GLuint '
      ],
      [
        'numlayers',
        'GLuint '
      ]
    ],
    'binding_name' => 'glTextureViewEXT',
    'feature' => 'GL_EXT_texture_view',
    'glewImpl' => '__glewTextureViewEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers'
  },
  'glTrackMatrixNV' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ],
      [
        'address',
        'GLuint '
      ],
      [
        'matrix',
        'GLenum '
      ],
      [
        'transform',
        'GLenum '
      ]
    ],
    'binding_name' => 'glTrackMatrixNV',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewTrackMatrixNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum target, GLuint address, GLenum matrix, GLenum transform'
  },
  'glTransformFeedbackAttribsNV' => {
    'argdata' => [
      [
        'count',
        'GLuint '
      ],
      [
        'attribs',
        'const GLint *'
      ],
      [
        'bufferMode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glTransformFeedbackAttribsNV_c',
    'feature' => 'GL_NV_transform_feedback',
    'glewImpl' => '__glewTransformFeedbackAttribsNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint count, const GLint *attribs, GLenum bufferMode'
  },
  'glTransformFeedbackBufferBase' => {
    'argdata' => [
      [
        'xfb',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glTransformFeedbackBufferBase',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewTransformFeedbackBufferBase',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint xfb, GLuint index, GLuint buffer'
  },
  'glTransformFeedbackBufferRange' => {
    'argdata' => [
      [
        'xfb',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'size',
        'GLsizeiptr '
      ]
    ],
    'binding_name' => 'glTransformFeedbackBufferRange',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewTransformFeedbackBufferRange',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size'
  },
  'glTransformFeedbackVaryings' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'varyings',
        'const GLchar *const* '
      ],
      [
        'bufferMode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glTransformFeedbackVaryings_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewTransformFeedbackVaryings',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode'
  },
  'glTransformFeedbackVaryingsEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'varyings',
        'const GLchar * const* '
      ],
      [
        'bufferMode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glTransformFeedbackVaryingsEXT_c',
    'feature' => 'GL_EXT_transform_feedback',
    'glewImpl' => '__glewTransformFeedbackVaryingsEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLsizei count, const GLchar * const* varyings, GLenum bufferMode'
  },
  'glTransformFeedbackVaryingsNV' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'locations',
        'const GLint *'
      ],
      [
        'bufferMode',
        'GLenum '
      ]
    ],
    'binding_name' => 'glTransformFeedbackVaryingsNV_c',
    'feature' => 'GL_NV_transform_feedback',
    'glewImpl' => '__glewTransformFeedbackVaryingsNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode'
  },
  'glTransformPathNV' => {
    'argdata' => [
      [
        'resultPath',
        'GLuint '
      ],
      [
        'srcPath',
        'GLuint '
      ],
      [
        'transformType',
        'GLenum '
      ],
      [
        'transformValues',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glTransformPathNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewTransformPathNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat* transformValues'
  },
  'glTranslated' => {
    'argdata' => [
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glTranslated',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble x, GLdouble y, GLdouble z'
  },
  'glTranslatef' => {
    'argdata' => [
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glTranslatef',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat x, GLfloat y, GLfloat z'
  },
  'glTranslatex' => {
    'argdata' => [
      [
        'x',
        'GLfixed '
      ],
      [
        'y',
        'GLfixed '
      ],
      [
        'z',
        'GLfixed '
      ]
    ],
    'binding_name' => 'glTranslatex',
    'feature' => 'GL_REGAL_ES1_0_compatibility',
    'glewImpl' => '__glewTranslatex',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfixed x, GLfixed y, GLfixed z'
  },
  'glUniform1d' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glUniform1d',
    'feature' => 'GL_ARB_gpu_shader_fp64',
    'glewImpl' => '__glewUniform1d',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLdouble x'
  },
  'glUniform1dv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glUniform1dv_c',
    'feature' => 'GL_ARB_gpu_shader_fp64',
    'glewImpl' => '__glewUniform1dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLdouble* value'
  },
  'glUniform1f' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glUniform1f',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewUniform1f',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLfloat v0'
  },
  'glUniform1fARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glUniform1fARB',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewUniform1fARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLfloat v0'
  },
  'glUniform1fv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glUniform1fv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewUniform1fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLfloat* value'
  },
  'glUniform1fvARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glUniform1fvARB_c',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewUniform1fvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLfloat* value'
  },
  'glUniform1i' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLint '
      ]
    ],
    'binding_name' => 'glUniform1i',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewUniform1i',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLint v0'
  },
  'glUniform1i64ARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLint64 '
      ]
    ],
    'binding_name' => 'glUniform1i64ARB',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewUniform1i64ARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLint64 x'
  },
  'glUniform1i64NV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLint64EXT '
      ]
    ],
    'binding_name' => 'glUniform1i64NV',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewUniform1i64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLint64EXT x'
  },
  'glUniform1i64vARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint64* '
      ]
    ],
    'binding_name' => 'glUniform1i64vARB_c',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewUniform1i64vARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLint64* value'
  },
  'glUniform1i64vNV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint64EXT* '
      ]
    ],
    'binding_name' => 'glUniform1i64vNV_c',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewUniform1i64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLint64EXT* value'
  },
  'glUniform1iARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLint '
      ]
    ],
    'binding_name' => 'glUniform1iARB',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewUniform1iARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLint v0'
  },
  'glUniform1iv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glUniform1iv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewUniform1iv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLint* value'
  },
  'glUniform1ivARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glUniform1ivARB_c',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewUniform1ivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLint* value'
  },
  'glUniform1ui' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLuint '
      ]
    ],
    'binding_name' => 'glUniform1ui',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewUniform1ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLuint v0'
  },
  'glUniform1ui64ARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glUniform1ui64ARB',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewUniform1ui64ARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLuint64 x'
  },
  'glUniform1ui64NV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLuint64EXT '
      ]
    ],
    'binding_name' => 'glUniform1ui64NV',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewUniform1ui64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLuint64EXT x'
  },
  'glUniform1ui64vARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint64* '
      ]
    ],
    'binding_name' => 'glUniform1ui64vARB_c',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewUniform1ui64vARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLuint64* value'
  },
  'glUniform1ui64vNV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint64EXT* '
      ]
    ],
    'binding_name' => 'glUniform1ui64vNV_c',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewUniform1ui64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLuint64EXT* value'
  },
  'glUniform1uiEXT' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLuint '
      ]
    ],
    'binding_name' => 'glUniform1uiEXT',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewUniform1uiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLuint v0'
  },
  'glUniform1uiv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glUniform1uiv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewUniform1uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLuint* value'
  },
  'glUniform1uivEXT' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint *'
      ]
    ],
    'binding_name' => 'glUniform1uivEXT_c',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewUniform1uivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLuint *value'
  },
  'glUniform2d' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glUniform2d',
    'feature' => 'GL_ARB_gpu_shader_fp64',
    'glewImpl' => '__glewUniform2d',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLdouble x, GLdouble y'
  },
  'glUniform2dv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glUniform2dv_c',
    'feature' => 'GL_ARB_gpu_shader_fp64',
    'glewImpl' => '__glewUniform2dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLdouble* value'
  },
  'glUniform2f' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLfloat '
      ],
      [
        'v1',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glUniform2f',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewUniform2f',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLfloat v0, GLfloat v1'
  },
  'glUniform2fARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLfloat '
      ],
      [
        'v1',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glUniform2fARB',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewUniform2fARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLfloat v0, GLfloat v1'
  },
  'glUniform2fv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glUniform2fv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewUniform2fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLfloat* value'
  },
  'glUniform2fvARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glUniform2fvARB_c',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewUniform2fvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLfloat* value'
  },
  'glUniform2i' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLint '
      ],
      [
        'v1',
        'GLint '
      ]
    ],
    'binding_name' => 'glUniform2i',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewUniform2i',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLint v0, GLint v1'
  },
  'glUniform2i64ARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLint64 '
      ],
      [
        'y',
        'GLint64 '
      ]
    ],
    'binding_name' => 'glUniform2i64ARB',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewUniform2i64ARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLint64 x, GLint64 y'
  },
  'glUniform2i64NV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLint64EXT '
      ],
      [
        'y',
        'GLint64EXT '
      ]
    ],
    'binding_name' => 'glUniform2i64NV',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewUniform2i64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLint64EXT x, GLint64EXT y'
  },
  'glUniform2i64vARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint64* '
      ]
    ],
    'binding_name' => 'glUniform2i64vARB_c',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewUniform2i64vARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLint64* value'
  },
  'glUniform2i64vNV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint64EXT* '
      ]
    ],
    'binding_name' => 'glUniform2i64vNV_c',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewUniform2i64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLint64EXT* value'
  },
  'glUniform2iARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLint '
      ],
      [
        'v1',
        'GLint '
      ]
    ],
    'binding_name' => 'glUniform2iARB',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewUniform2iARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLint v0, GLint v1'
  },
  'glUniform2iv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glUniform2iv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewUniform2iv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLint* value'
  },
  'glUniform2ivARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glUniform2ivARB_c',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewUniform2ivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLint* value'
  },
  'glUniform2ui' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLuint '
      ],
      [
        'v1',
        'GLuint '
      ]
    ],
    'binding_name' => 'glUniform2ui',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewUniform2ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLuint v0, GLuint v1'
  },
  'glUniform2ui64ARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLuint64 '
      ],
      [
        'y',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glUniform2ui64ARB',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewUniform2ui64ARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLuint64 x, GLuint64 y'
  },
  'glUniform2ui64NV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLuint64EXT '
      ],
      [
        'y',
        'GLuint64EXT '
      ]
    ],
    'binding_name' => 'glUniform2ui64NV',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewUniform2ui64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLuint64EXT x, GLuint64EXT y'
  },
  'glUniform2ui64vARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint64* '
      ]
    ],
    'binding_name' => 'glUniform2ui64vARB_c',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewUniform2ui64vARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLuint64* value'
  },
  'glUniform2ui64vNV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint64EXT* '
      ]
    ],
    'binding_name' => 'glUniform2ui64vNV_c',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewUniform2ui64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLuint64EXT* value'
  },
  'glUniform2uiEXT' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLuint '
      ],
      [
        'v1',
        'GLuint '
      ]
    ],
    'binding_name' => 'glUniform2uiEXT',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewUniform2uiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLuint v0, GLuint v1'
  },
  'glUniform2uiv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glUniform2uiv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewUniform2uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLuint* value'
  },
  'glUniform2uivEXT' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint *'
      ]
    ],
    'binding_name' => 'glUniform2uivEXT_c',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewUniform2uivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLuint *value'
  },
  'glUniform3d' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glUniform3d',
    'feature' => 'GL_ARB_gpu_shader_fp64',
    'glewImpl' => '__glewUniform3d',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLdouble x, GLdouble y, GLdouble z'
  },
  'glUniform3dv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glUniform3dv_c',
    'feature' => 'GL_ARB_gpu_shader_fp64',
    'glewImpl' => '__glewUniform3dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLdouble* value'
  },
  'glUniform3f' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLfloat '
      ],
      [
        'v1',
        'GLfloat '
      ],
      [
        'v2',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glUniform3f',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewUniform3f',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLfloat v0, GLfloat v1, GLfloat v2'
  },
  'glUniform3fARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLfloat '
      ],
      [
        'v1',
        'GLfloat '
      ],
      [
        'v2',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glUniform3fARB',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewUniform3fARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLfloat v0, GLfloat v1, GLfloat v2'
  },
  'glUniform3fv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glUniform3fv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewUniform3fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLfloat* value'
  },
  'glUniform3fvARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glUniform3fvARB_c',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewUniform3fvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLfloat* value'
  },
  'glUniform3i' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLint '
      ],
      [
        'v1',
        'GLint '
      ],
      [
        'v2',
        'GLint '
      ]
    ],
    'binding_name' => 'glUniform3i',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewUniform3i',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLint v0, GLint v1, GLint v2'
  },
  'glUniform3i64ARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLint64 '
      ],
      [
        'y',
        'GLint64 '
      ],
      [
        'z',
        'GLint64 '
      ]
    ],
    'binding_name' => 'glUniform3i64ARB',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewUniform3i64ARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLint64 x, GLint64 y, GLint64 z'
  },
  'glUniform3i64NV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLint64EXT '
      ],
      [
        'y',
        'GLint64EXT '
      ],
      [
        'z',
        'GLint64EXT '
      ]
    ],
    'binding_name' => 'glUniform3i64NV',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewUniform3i64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z'
  },
  'glUniform3i64vARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint64* '
      ]
    ],
    'binding_name' => 'glUniform3i64vARB_c',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewUniform3i64vARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLint64* value'
  },
  'glUniform3i64vNV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint64EXT* '
      ]
    ],
    'binding_name' => 'glUniform3i64vNV_c',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewUniform3i64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLint64EXT* value'
  },
  'glUniform3iARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLint '
      ],
      [
        'v1',
        'GLint '
      ],
      [
        'v2',
        'GLint '
      ]
    ],
    'binding_name' => 'glUniform3iARB',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewUniform3iARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLint v0, GLint v1, GLint v2'
  },
  'glUniform3iv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glUniform3iv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewUniform3iv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLint* value'
  },
  'glUniform3ivARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glUniform3ivARB_c',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewUniform3ivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLint* value'
  },
  'glUniform3ui' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLuint '
      ],
      [
        'v1',
        'GLuint '
      ],
      [
        'v2',
        'GLuint '
      ]
    ],
    'binding_name' => 'glUniform3ui',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewUniform3ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLuint v0, GLuint v1, GLuint v2'
  },
  'glUniform3ui64ARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLuint64 '
      ],
      [
        'y',
        'GLuint64 '
      ],
      [
        'z',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glUniform3ui64ARB',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewUniform3ui64ARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLuint64 x, GLuint64 y, GLuint64 z'
  },
  'glUniform3ui64NV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLuint64EXT '
      ],
      [
        'y',
        'GLuint64EXT '
      ],
      [
        'z',
        'GLuint64EXT '
      ]
    ],
    'binding_name' => 'glUniform3ui64NV',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewUniform3ui64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z'
  },
  'glUniform3ui64vARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint64* '
      ]
    ],
    'binding_name' => 'glUniform3ui64vARB_c',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewUniform3ui64vARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLuint64* value'
  },
  'glUniform3ui64vNV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint64EXT* '
      ]
    ],
    'binding_name' => 'glUniform3ui64vNV_c',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewUniform3ui64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLuint64EXT* value'
  },
  'glUniform3uiEXT' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLuint '
      ],
      [
        'v1',
        'GLuint '
      ],
      [
        'v2',
        'GLuint '
      ]
    ],
    'binding_name' => 'glUniform3uiEXT',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewUniform3uiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLuint v0, GLuint v1, GLuint v2'
  },
  'glUniform3uiv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glUniform3uiv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewUniform3uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLuint* value'
  },
  'glUniform3uivEXT' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint *'
      ]
    ],
    'binding_name' => 'glUniform3uivEXT_c',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewUniform3uivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLuint *value'
  },
  'glUniform4d' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ],
      [
        'w',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glUniform4d',
    'feature' => 'GL_ARB_gpu_shader_fp64',
    'glewImpl' => '__glewUniform4d',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w'
  },
  'glUniform4dv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glUniform4dv_c',
    'feature' => 'GL_ARB_gpu_shader_fp64',
    'glewImpl' => '__glewUniform4dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLdouble* value'
  },
  'glUniform4f' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLfloat '
      ],
      [
        'v1',
        'GLfloat '
      ],
      [
        'v2',
        'GLfloat '
      ],
      [
        'v3',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glUniform4f',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewUniform4f',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3'
  },
  'glUniform4fARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLfloat '
      ],
      [
        'v1',
        'GLfloat '
      ],
      [
        'v2',
        'GLfloat '
      ],
      [
        'v3',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glUniform4fARB',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewUniform4fARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3'
  },
  'glUniform4fv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glUniform4fv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewUniform4fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLfloat* value'
  },
  'glUniform4fvARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glUniform4fvARB_c',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewUniform4fvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLfloat* value'
  },
  'glUniform4i' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLint '
      ],
      [
        'v1',
        'GLint '
      ],
      [
        'v2',
        'GLint '
      ],
      [
        'v3',
        'GLint '
      ]
    ],
    'binding_name' => 'glUniform4i',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewUniform4i',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLint v0, GLint v1, GLint v2, GLint v3'
  },
  'glUniform4i64ARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLint64 '
      ],
      [
        'y',
        'GLint64 '
      ],
      [
        'z',
        'GLint64 '
      ],
      [
        'w',
        'GLint64 '
      ]
    ],
    'binding_name' => 'glUniform4i64ARB',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewUniform4i64ARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w'
  },
  'glUniform4i64NV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLint64EXT '
      ],
      [
        'y',
        'GLint64EXT '
      ],
      [
        'z',
        'GLint64EXT '
      ],
      [
        'w',
        'GLint64EXT '
      ]
    ],
    'binding_name' => 'glUniform4i64NV',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewUniform4i64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w'
  },
  'glUniform4i64vARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint64* '
      ]
    ],
    'binding_name' => 'glUniform4i64vARB_c',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewUniform4i64vARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLint64* value'
  },
  'glUniform4i64vNV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint64EXT* '
      ]
    ],
    'binding_name' => 'glUniform4i64vNV_c',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewUniform4i64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLint64EXT* value'
  },
  'glUniform4iARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLint '
      ],
      [
        'v1',
        'GLint '
      ],
      [
        'v2',
        'GLint '
      ],
      [
        'v3',
        'GLint '
      ]
    ],
    'binding_name' => 'glUniform4iARB',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewUniform4iARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLint v0, GLint v1, GLint v2, GLint v3'
  },
  'glUniform4iv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glUniform4iv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewUniform4iv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLint* value'
  },
  'glUniform4ivARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glUniform4ivARB_c',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewUniform4ivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLint* value'
  },
  'glUniform4ui' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLuint '
      ],
      [
        'v1',
        'GLuint '
      ],
      [
        'v2',
        'GLuint '
      ],
      [
        'v3',
        'GLuint '
      ]
    ],
    'binding_name' => 'glUniform4ui',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewUniform4ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3'
  },
  'glUniform4ui64ARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLuint64 '
      ],
      [
        'y',
        'GLuint64 '
      ],
      [
        'z',
        'GLuint64 '
      ],
      [
        'w',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glUniform4ui64ARB',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewUniform4ui64ARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w'
  },
  'glUniform4ui64NV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'x',
        'GLuint64EXT '
      ],
      [
        'y',
        'GLuint64EXT '
      ],
      [
        'z',
        'GLuint64EXT '
      ],
      [
        'w',
        'GLuint64EXT '
      ]
    ],
    'binding_name' => 'glUniform4ui64NV',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewUniform4ui64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w'
  },
  'glUniform4ui64vARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint64* '
      ]
    ],
    'binding_name' => 'glUniform4ui64vARB_c',
    'feature' => 'GL_ARB_gpu_shader_int64',
    'glewImpl' => '__glewUniform4ui64vARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLuint64* value'
  },
  'glUniform4ui64vNV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint64EXT* '
      ]
    ],
    'binding_name' => 'glUniform4ui64vNV_c',
    'feature' => 'GL_NV_gpu_shader5',
    'glewImpl' => '__glewUniform4ui64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLuint64EXT* value'
  },
  'glUniform4uiEXT' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'v0',
        'GLuint '
      ],
      [
        'v1',
        'GLuint '
      ],
      [
        'v2',
        'GLuint '
      ],
      [
        'v3',
        'GLuint '
      ]
    ],
    'binding_name' => 'glUniform4uiEXT',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewUniform4uiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3'
  },
  'glUniform4uiv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glUniform4uiv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewUniform4uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLuint* value'
  },
  'glUniform4uivEXT' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint *'
      ]
    ],
    'binding_name' => 'glUniform4uivEXT_c',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewUniform4uivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLuint *value'
  },
  'glUniformBlockBinding' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'uniformBlockIndex',
        'GLuint '
      ],
      [
        'uniformBlockBinding',
        'GLuint '
      ]
    ],
    'binding_name' => 'glUniformBlockBinding',
    'feature' => 'GL_ARB_uniform_buffer_object',
    'glewImpl' => '__glewUniformBlockBinding',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding'
  },
  'glUniformBufferEXT' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ],
      [
        'location',
        'GLint '
      ],
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glUniformBufferEXT',
    'feature' => 'GL_EXT_bindable_uniform',
    'glewImpl' => '__glewUniformBufferEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program, GLint location, GLuint buffer'
  },
  'glUniformHandleui64ARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'value',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glUniformHandleui64ARB',
    'feature' => 'GL_ARB_bindless_texture',
    'glewImpl' => '__glewUniformHandleui64ARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLuint64 value'
  },
  'glUniformHandleui64NV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'value',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glUniformHandleui64NV',
    'feature' => 'GL_NV_bindless_texture',
    'glewImpl' => '__glewUniformHandleui64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLuint64 value'
  },
  'glUniformHandleui64vARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint64* '
      ]
    ],
    'binding_name' => 'glUniformHandleui64vARB_c',
    'feature' => 'GL_ARB_bindless_texture',
    'glewImpl' => '__glewUniformHandleui64vARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLuint64* value'
  },
  'glUniformHandleui64vNV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint64* '
      ]
    ],
    'binding_name' => 'glUniformHandleui64vNV_c',
    'feature' => 'GL_NV_bindless_texture',
    'glewImpl' => '__glewUniformHandleui64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLuint64* value'
  },
  'glUniformMatrix2dv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glUniformMatrix2dv_c',
    'feature' => 'GL_ARB_gpu_shader_fp64',
    'glewImpl' => '__glewUniformMatrix2dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLdouble* value'
  },
  'glUniformMatrix2fv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glUniformMatrix2fv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewUniformMatrix2fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glUniformMatrix2fvARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glUniformMatrix2fvARB_c',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewUniformMatrix2fvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glUniformMatrix2x3dv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glUniformMatrix2x3dv_c',
    'feature' => 'GL_ARB_gpu_shader_fp64',
    'glewImpl' => '__glewUniformMatrix2x3dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLdouble* value'
  },
  'glUniformMatrix2x3fv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glUniformMatrix2x3fv_c',
    'feature' => 'GL_VERSION_2_1',
    'glewImpl' => '__glewUniformMatrix2x3fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLfloat *value'
  },
  'glUniformMatrix2x3fvNV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glUniformMatrix2x3fvNV_c',
    'feature' => 'GL_NV_non_square_matrices',
    'glewImpl' => '__glewUniformMatrix2x3fvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glUniformMatrix2x4dv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glUniformMatrix2x4dv_c',
    'feature' => 'GL_ARB_gpu_shader_fp64',
    'glewImpl' => '__glewUniformMatrix2x4dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLdouble* value'
  },
  'glUniformMatrix2x4fv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glUniformMatrix2x4fv_c',
    'feature' => 'GL_VERSION_2_1',
    'glewImpl' => '__glewUniformMatrix2x4fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLfloat *value'
  },
  'glUniformMatrix2x4fvNV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glUniformMatrix2x4fvNV_c',
    'feature' => 'GL_NV_non_square_matrices',
    'glewImpl' => '__glewUniformMatrix2x4fvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glUniformMatrix3dv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glUniformMatrix3dv_c',
    'feature' => 'GL_ARB_gpu_shader_fp64',
    'glewImpl' => '__glewUniformMatrix3dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLdouble* value'
  },
  'glUniformMatrix3fv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glUniformMatrix3fv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewUniformMatrix3fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glUniformMatrix3fvARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glUniformMatrix3fvARB_c',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewUniformMatrix3fvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glUniformMatrix3x2dv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glUniformMatrix3x2dv_c',
    'feature' => 'GL_ARB_gpu_shader_fp64',
    'glewImpl' => '__glewUniformMatrix3x2dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLdouble* value'
  },
  'glUniformMatrix3x2fv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glUniformMatrix3x2fv_c',
    'feature' => 'GL_VERSION_2_1',
    'glewImpl' => '__glewUniformMatrix3x2fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLfloat *value'
  },
  'glUniformMatrix3x2fvNV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glUniformMatrix3x2fvNV_c',
    'feature' => 'GL_NV_non_square_matrices',
    'glewImpl' => '__glewUniformMatrix3x2fvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glUniformMatrix3x4dv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glUniformMatrix3x4dv_c',
    'feature' => 'GL_ARB_gpu_shader_fp64',
    'glewImpl' => '__glewUniformMatrix3x4dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLdouble* value'
  },
  'glUniformMatrix3x4fv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glUniformMatrix3x4fv_c',
    'feature' => 'GL_VERSION_2_1',
    'glewImpl' => '__glewUniformMatrix3x4fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLfloat *value'
  },
  'glUniformMatrix3x4fvNV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glUniformMatrix3x4fvNV_c',
    'feature' => 'GL_NV_non_square_matrices',
    'glewImpl' => '__glewUniformMatrix3x4fvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glUniformMatrix4dv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glUniformMatrix4dv_c',
    'feature' => 'GL_ARB_gpu_shader_fp64',
    'glewImpl' => '__glewUniformMatrix4dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLdouble* value'
  },
  'glUniformMatrix4fv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glUniformMatrix4fv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewUniformMatrix4fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glUniformMatrix4fvARB' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glUniformMatrix4fvARB_c',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewUniformMatrix4fvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glUniformMatrix4x2dv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glUniformMatrix4x2dv_c',
    'feature' => 'GL_ARB_gpu_shader_fp64',
    'glewImpl' => '__glewUniformMatrix4x2dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLdouble* value'
  },
  'glUniformMatrix4x2fv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glUniformMatrix4x2fv_c',
    'feature' => 'GL_VERSION_2_1',
    'glewImpl' => '__glewUniformMatrix4x2fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLfloat *value'
  },
  'glUniformMatrix4x2fvNV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glUniformMatrix4x2fvNV_c',
    'feature' => 'GL_NV_non_square_matrices',
    'glewImpl' => '__glewUniformMatrix4x2fvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glUniformMatrix4x3dv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glUniformMatrix4x3dv_c',
    'feature' => 'GL_ARB_gpu_shader_fp64',
    'glewImpl' => '__glewUniformMatrix4x3dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLdouble* value'
  },
  'glUniformMatrix4x3fv' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glUniformMatrix4x3fv_c',
    'feature' => 'GL_VERSION_2_1',
    'glewImpl' => '__glewUniformMatrix4x3fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLfloat *value'
  },
  'glUniformMatrix4x3fvNV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'transpose',
        'GLboolean '
      ],
      [
        'value',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glUniformMatrix4x3fvNV_c',
    'feature' => 'GL_NV_non_square_matrices',
    'glewImpl' => '__glewUniformMatrix4x3fvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, GLboolean transpose, const GLfloat* value'
  },
  'glUniformSubroutinesuiv' => {
    'argdata' => [
      [
        'shadertype',
        'GLenum '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'indices',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glUniformSubroutinesuiv_c',
    'feature' => 'GL_ARB_shader_subroutine',
    'glewImpl' => '__glewUniformSubroutinesuiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum shadertype, GLsizei count, const GLuint* indices'
  },
  'glUniformui64NV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'value',
        'GLuint64EXT '
      ]
    ],
    'binding_name' => 'glUniformui64NV',
    'feature' => 'GL_NV_shader_buffer_load',
    'glewImpl' => '__glewUniformui64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLuint64EXT value'
  },
  'glUniformui64vNV' => {
    'argdata' => [
      [
        'location',
        'GLint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'value',
        'const GLuint64EXT* '
      ]
    ],
    'binding_name' => 'glUniformui64vNV_c',
    'feature' => 'GL_NV_shader_buffer_load',
    'glewImpl' => '__glewUniformui64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint location, GLsizei count, const GLuint64EXT* value'
  },
  'glUnlockArraysEXT' => {
    'binding_name' => 'glUnlockArraysEXT',
    'feature' => 'GL_EXT_compiled_vertex_array',
    'glewImpl' => '__glewUnlockArraysEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glUnmapBuffer' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glUnmapBuffer',
    'feature' => 'GL_VERSION_1_5',
    'glewImpl' => '__glewUnmapBuffer',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLenum target'
  },
  'glUnmapBufferARB' => {
    'argdata' => [
      [
        'target',
        'GLenum '
      ]
    ],
    'binding_name' => 'glUnmapBufferARB',
    'feature' => 'GL_ARB_vertex_buffer_object',
    'glewImpl' => '__glewUnmapBufferARB',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLenum target'
  },
  'glUnmapNamedBuffer' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glUnmapNamedBuffer',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewUnmapNamedBuffer',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint buffer'
  },
  'glUnmapNamedBufferEXT' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glUnmapNamedBufferEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewUnmapNamedBufferEXT',
    'glewtype' => 'fun',
    'restype' => 'GLboolean',
    'signature' => 'GLuint buffer'
  },
  'glUnmapObjectBufferATI' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glUnmapObjectBufferATI',
    'feature' => 'GL_ATI_map_object_buffer',
    'glewImpl' => '__glewUnmapObjectBufferATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer'
  },
  'glUnmapTexture2DINTEL' => {
    'argdata' => [
      [
        'texture',
        'GLuint '
      ],
      [
        'level',
        'GLint '
      ]
    ],
    'binding_name' => 'glUnmapTexture2DINTEL',
    'feature' => 'GL_LAYOUT_LINEAR_INTEL',
    'glewImpl' => '__glewUnmapTexture2DINTEL',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint texture, GLint level'
  },
  'glUpdateObjectBufferATI' => {
    'argdata' => [
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLuint '
      ],
      [
        'size',
        'GLsizei '
      ],
      [
        'pointer',
        'const void *'
      ],
      [
        'preserve',
        'GLenum '
      ]
    ],
    'binding_name' => 'glUpdateObjectBufferATI_c',
    'feature' => 'GL_ATI_vertex_array_object',
    'glewImpl' => '__glewUpdateObjectBufferATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve'
  },
  'glUseProgram' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ]
    ],
    'binding_name' => 'glUseProgram',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewUseProgram',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program'
  },
  'glUseProgramObjectARB' => {
    'argdata' => [
      [
        'programObj',
        'GLhandleARB '
      ]
    ],
    'binding_name' => 'glUseProgramObjectARB',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewUseProgramObjectARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhandleARB programObj'
  },
  'glUseProgramStages' => {
    'argdata' => [
      [
        'pipeline',
        'GLuint '
      ],
      [
        'stages',
        'GLbitfield '
      ],
      [
        'program',
        'GLuint '
      ]
    ],
    'binding_name' => 'glUseProgramStages',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewUseProgramStages',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint pipeline, GLbitfield stages, GLuint program'
  },
  'glUseShaderProgramEXT' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'program',
        'GLuint '
      ]
    ],
    'binding_name' => 'glUseShaderProgramEXT',
    'feature' => 'GL_EXT_separate_shader_objects',
    'glewImpl' => '__glewUseShaderProgramEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLuint program'
  },
  'glVDPAUFiniNV' => {
    'binding_name' => 'glVDPAUFiniNV',
    'feature' => 'GL_NV_vdpau_interop',
    'glewImpl' => '__glewVDPAUFiniNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'void'
  },
  'glVDPAUGetSurfaceivNV' => {
    'argdata' => [
      [
        'surface',
        'GLvdpauSurfaceNV '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'bufSize',
        'GLsizei '
      ],
      [
        'length',
        'GLsizei* '
      ],
      [
        'values',
        'GLint *'
      ]
    ],
    'binding_name' => 'glVDPAUGetSurfaceivNV_c',
    'feature' => 'GL_NV_vdpau_interop',
    'glewImpl' => '__glewVDPAUGetSurfaceivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei* length, GLint *values'
  },
  'glVDPAUInitNV' => {
    'argdata' => [
      [
        'vdpDevice',
        'const void* '
      ],
      [
        'getProcAddress',
        'const void*'
      ]
    ],
    'binding_name' => 'glVDPAUInitNV_c',
    'feature' => 'GL_NV_vdpau_interop',
    'glewImpl' => '__glewVDPAUInitNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const void* vdpDevice, const void*getProcAddress'
  },
  'glVDPAUIsSurfaceNV' => {
    'argdata' => [
      [
        'surface',
        'GLvdpauSurfaceNV '
      ]
    ],
    'binding_name' => 'glVDPAUIsSurfaceNV',
    'feature' => 'GL_NV_vdpau_interop',
    'glewImpl' => '__glewVDPAUIsSurfaceNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLvdpauSurfaceNV surface'
  },
  'glVDPAUMapSurfacesNV' => {
    'argdata' => [
      [
        'numSurfaces',
        'GLsizei '
      ],
      [
        'surfaces',
        'const GLvdpauSurfaceNV* '
      ]
    ],
    'binding_name' => 'glVDPAUMapSurfacesNV_c',
    'feature' => 'GL_NV_vdpau_interop',
    'glewImpl' => '__glewVDPAUMapSurfacesNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei numSurfaces, const GLvdpauSurfaceNV* surfaces'
  },
  'glVDPAURegisterOutputSurfaceNV' => {
    'argdata' => [
      [
        'vdpSurface',
        'const void* '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'numTextureNames',
        'GLsizei '
      ],
      [
        'textureNames',
        'const GLuint *'
      ]
    ],
    'binding_name' => 'glVDPAURegisterOutputSurfaceNV_c',
    'feature' => 'GL_NV_vdpau_interop',
    'glewImpl' => '__glewVDPAURegisterOutputSurfaceNV',
    'glewtype' => 'fun',
    'restype' => 'GLvdpauSurfaceNV',
    'signature' => 'const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames'
  },
  'glVDPAURegisterVideoSurfaceNV' => {
    'argdata' => [
      [
        'vdpSurface',
        'const void* '
      ],
      [
        'target',
        'GLenum '
      ],
      [
        'numTextureNames',
        'GLsizei '
      ],
      [
        'textureNames',
        'const GLuint *'
      ]
    ],
    'binding_name' => 'glVDPAURegisterVideoSurfaceNV_c',
    'feature' => 'GL_NV_vdpau_interop',
    'glewImpl' => '__glewVDPAURegisterVideoSurfaceNV',
    'glewtype' => 'fun',
    'restype' => 'GLvdpauSurfaceNV',
    'signature' => 'const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames'
  },
  'glVDPAUSurfaceAccessNV' => {
    'argdata' => [
      [
        'surface',
        'GLvdpauSurfaceNV '
      ],
      [
        'access',
        'GLenum '
      ]
    ],
    'binding_name' => 'glVDPAUSurfaceAccessNV',
    'feature' => 'GL_NV_vdpau_interop',
    'glewImpl' => '__glewVDPAUSurfaceAccessNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLvdpauSurfaceNV surface, GLenum access'
  },
  'glVDPAUUnmapSurfacesNV' => {
    'argdata' => [
      [
        'numSurface',
        'GLsizei '
      ],
      [
        'surfaces',
        'const GLvdpauSurfaceNV* '
      ]
    ],
    'binding_name' => 'glVDPAUUnmapSurfacesNV_c',
    'feature' => 'GL_NV_vdpau_interop',
    'glewImpl' => '__glewVDPAUUnmapSurfacesNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei numSurface, const GLvdpauSurfaceNV* surfaces'
  },
  'glVDPAUUnregisterSurfaceNV' => {
    'argdata' => [
      [
        'surface',
        'GLvdpauSurfaceNV '
      ]
    ],
    'binding_name' => 'glVDPAUUnregisterSurfaceNV',
    'feature' => 'GL_NV_vdpau_interop',
    'glewImpl' => '__glewVDPAUUnregisterSurfaceNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLvdpauSurfaceNV surface'
  },
  'glValidateProgram' => {
    'argdata' => [
      [
        'program',
        'GLuint '
      ]
    ],
    'binding_name' => 'glValidateProgram',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewValidateProgram',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint program'
  },
  'glValidateProgramARB' => {
    'argdata' => [
      [
        'programObj',
        'GLhandleARB '
      ]
    ],
    'binding_name' => 'glValidateProgramARB',
    'feature' => 'GL_ARB_shader_objects',
    'glewImpl' => '__glewValidateProgramARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhandleARB programObj'
  },
  'glValidateProgramPipeline' => {
    'argdata' => [
      [
        'pipeline',
        'GLuint '
      ]
    ],
    'binding_name' => 'glValidateProgramPipeline',
    'feature' => 'GL_ARB_separate_shader_objects',
    'glewImpl' => '__glewValidateProgramPipeline',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint pipeline'
  },
  'glVariantArrayObjectATI' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVariantArrayObjectATI',
    'feature' => 'GL_ATI_vertex_array_object',
    'glewImpl' => '__glewVariantArrayObjectATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset'
  },
  'glVariantPointerEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLuint '
      ],
      [
        'addr',
        'void *'
      ]
    ],
    'binding_name' => 'glVariantPointerEXT_c',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewVariantPointerEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLenum type, GLuint stride, void *addr'
  },
  'glVariantbvEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'addr',
        'GLbyte *'
      ]
    ],
    'binding_name' => 'glVariantbvEXT_c',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewVariantbvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLbyte *addr'
  },
  'glVariantdvEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'addr',
        'GLdouble *'
      ]
    ],
    'binding_name' => 'glVariantdvEXT_c',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewVariantdvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLdouble *addr'
  },
  'glVariantfvEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'addr',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glVariantfvEXT_c',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewVariantfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLfloat *addr'
  },
  'glVariantivEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'addr',
        'GLint *'
      ]
    ],
    'binding_name' => 'glVariantivEXT_c',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewVariantivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLint *addr'
  },
  'glVariantsvEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'addr',
        'GLshort *'
      ]
    ],
    'binding_name' => 'glVariantsvEXT_c',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewVariantsvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLshort *addr'
  },
  'glVariantubvEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'addr',
        'GLubyte *'
      ]
    ],
    'binding_name' => 'glVariantubvEXT_c',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewVariantubvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLubyte *addr'
  },
  'glVariantuivEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'addr',
        'GLuint *'
      ]
    ],
    'binding_name' => 'glVariantuivEXT_c',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewVariantuivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLuint *addr'
  },
  'glVariantusvEXT' => {
    'argdata' => [
      [
        'id',
        'GLuint '
      ],
      [
        'addr',
        'GLushort *'
      ]
    ],
    'binding_name' => 'glVariantusvEXT_c',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewVariantusvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint id, GLushort *addr'
  },
  'glVectorOperationSGIX' => {
    'argdata' => [
      [
        'operation',
        'GLenum '
      ]
    ],
    'binding_name' => 'glVectorOperationSGIX',
    'feature' => 'GL_SGIX_vector_ops',
    'glewImpl' => '__glewVectorOperationSGIX',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum operation'
  },
  'glVertex2d' => {
    'argdata' => [
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertex2d',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble x, GLdouble y'
  },
  'glVertex2dv' => {
    'argdata' => [
      [
        'v',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glVertex2dv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble *v'
  },
  'glVertex2f' => {
    'argdata' => [
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glVertex2f',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat x, GLfloat y'
  },
  'glVertex2fv' => {
    'argdata' => [
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glVertex2fv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat *v'
  },
  'glVertex2hNV' => {
    'argdata' => [
      [
        'x',
        'GLhalf '
      ],
      [
        'y',
        'GLhalf '
      ]
    ],
    'binding_name' => 'glVertex2hNV',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewVertex2hNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhalf x, GLhalf y'
  },
  'glVertex2hvNV' => {
    'argdata' => [
      [
        'v',
        'const GLhalf* '
      ]
    ],
    'binding_name' => 'glVertex2hvNV_c',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewVertex2hvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLhalf* v'
  },
  'glVertex2i' => {
    'argdata' => [
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ]
    ],
    'binding_name' => 'glVertex2i',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint x, GLint y'
  },
  'glVertex2iv' => {
    'argdata' => [
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glVertex2iv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLint *v'
  },
  'glVertex2s' => {
    'argdata' => [
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ]
    ],
    'binding_name' => 'glVertex2s',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLshort x, GLshort y'
  },
  'glVertex2sv' => {
    'argdata' => [
      [
        'v',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glVertex2sv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLshort *v'
  },
  'glVertex3d' => {
    'argdata' => [
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertex3d',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble x, GLdouble y, GLdouble z'
  },
  'glVertex3dv' => {
    'argdata' => [
      [
        'v',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glVertex3dv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble *v'
  },
  'glVertex3f' => {
    'argdata' => [
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glVertex3f',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat x, GLfloat y, GLfloat z'
  },
  'glVertex3fv' => {
    'argdata' => [
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glVertex3fv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat *v'
  },
  'glVertex3hNV' => {
    'argdata' => [
      [
        'x',
        'GLhalf '
      ],
      [
        'y',
        'GLhalf '
      ],
      [
        'z',
        'GLhalf '
      ]
    ],
    'binding_name' => 'glVertex3hNV',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewVertex3hNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhalf x, GLhalf y, GLhalf z'
  },
  'glVertex3hvNV' => {
    'argdata' => [
      [
        'v',
        'const GLhalf* '
      ]
    ],
    'binding_name' => 'glVertex3hvNV_c',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewVertex3hvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLhalf* v'
  },
  'glVertex3i' => {
    'argdata' => [
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'z',
        'GLint '
      ]
    ],
    'binding_name' => 'glVertex3i',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint x, GLint y, GLint z'
  },
  'glVertex3iv' => {
    'argdata' => [
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glVertex3iv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLint *v'
  },
  'glVertex3s' => {
    'argdata' => [
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ],
      [
        'z',
        'GLshort '
      ]
    ],
    'binding_name' => 'glVertex3s',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLshort x, GLshort y, GLshort z'
  },
  'glVertex3sv' => {
    'argdata' => [
      [
        'v',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glVertex3sv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLshort *v'
  },
  'glVertex4d' => {
    'argdata' => [
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ],
      [
        'w',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertex4d',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble x, GLdouble y, GLdouble z, GLdouble w'
  },
  'glVertex4dv' => {
    'argdata' => [
      [
        'v',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glVertex4dv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble *v'
  },
  'glVertex4f' => {
    'argdata' => [
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ],
      [
        'w',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glVertex4f',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat x, GLfloat y, GLfloat z, GLfloat w'
  },
  'glVertex4fv' => {
    'argdata' => [
      [
        'v',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glVertex4fv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat *v'
  },
  'glVertex4hNV' => {
    'argdata' => [
      [
        'x',
        'GLhalf '
      ],
      [
        'y',
        'GLhalf '
      ],
      [
        'z',
        'GLhalf '
      ],
      [
        'w',
        'GLhalf '
      ]
    ],
    'binding_name' => 'glVertex4hNV',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewVertex4hNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhalf x, GLhalf y, GLhalf z, GLhalf w'
  },
  'glVertex4hvNV' => {
    'argdata' => [
      [
        'v',
        'const GLhalf* '
      ]
    ],
    'binding_name' => 'glVertex4hvNV_c',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewVertex4hvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLhalf* v'
  },
  'glVertex4i' => {
    'argdata' => [
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'z',
        'GLint '
      ],
      [
        'w',
        'GLint '
      ]
    ],
    'binding_name' => 'glVertex4i',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint x, GLint y, GLint z, GLint w'
  },
  'glVertex4iv' => {
    'argdata' => [
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glVertex4iv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLint *v'
  },
  'glVertex4s' => {
    'argdata' => [
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ],
      [
        'z',
        'GLshort '
      ],
      [
        'w',
        'GLshort '
      ]
    ],
    'binding_name' => 'glVertex4s',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLshort x, GLshort y, GLshort z, GLshort w'
  },
  'glVertex4sv' => {
    'argdata' => [
      [
        'v',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glVertex4sv_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLshort *v'
  },
  'glVertexArrayAttribBinding' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'attribindex',
        'GLuint '
      ],
      [
        'bindingindex',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexArrayAttribBinding',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewVertexArrayAttribBinding',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint attribindex, GLuint bindingindex'
  },
  'glVertexArrayAttribFormat' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'attribindex',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'normalized',
        'GLboolean '
      ],
      [
        'relativeoffset',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexArrayAttribFormat',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewVertexArrayAttribFormat',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset'
  },
  'glVertexArrayAttribIFormat' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'attribindex',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'relativeoffset',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexArrayAttribIFormat',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewVertexArrayAttribIFormat',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset'
  },
  'glVertexArrayAttribLFormat' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'attribindex',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'relativeoffset',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexArrayAttribLFormat',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewVertexArrayAttribLFormat',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset'
  },
  'glVertexArrayBindVertexBufferEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'bindingindex',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'stride',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glVertexArrayBindVertexBufferEXT',
    'feature' => 'GL_ARB_vertex_attrib_binding',
    'glewImpl' => '__glewVertexArrayBindVertexBufferEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride'
  },
  'glVertexArrayBindingDivisor' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'bindingindex',
        'GLuint '
      ],
      [
        'divisor',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexArrayBindingDivisor',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewVertexArrayBindingDivisor',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint bindingindex, GLuint divisor'
  },
  'glVertexArrayColorOffsetEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'offset',
        'GLintptr '
      ]
    ],
    'binding_name' => 'glVertexArrayColorOffsetEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewVertexArrayColorOffsetEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset'
  },
  'glVertexArrayEdgeFlagOffsetEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'offset',
        'GLintptr '
      ]
    ],
    'binding_name' => 'glVertexArrayEdgeFlagOffsetEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewVertexArrayEdgeFlagOffsetEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset'
  },
  'glVertexArrayElementBuffer' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexArrayElementBuffer',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewVertexArrayElementBuffer',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint buffer'
  },
  'glVertexArrayFogCoordOffsetEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'offset',
        'GLintptr '
      ]
    ],
    'binding_name' => 'glVertexArrayFogCoordOffsetEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewVertexArrayFogCoordOffsetEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset'
  },
  'glVertexArrayIndexOffsetEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'offset',
        'GLintptr '
      ]
    ],
    'binding_name' => 'glVertexArrayIndexOffsetEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewVertexArrayIndexOffsetEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset'
  },
  'glVertexArrayMultiTexCoordOffsetEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'texunit',
        'GLenum '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'offset',
        'GLintptr '
      ]
    ],
    'binding_name' => 'glVertexArrayMultiTexCoordOffsetEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewVertexArrayMultiTexCoordOffsetEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset'
  },
  'glVertexArrayNormalOffsetEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'offset',
        'GLintptr '
      ]
    ],
    'binding_name' => 'glVertexArrayNormalOffsetEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewVertexArrayNormalOffsetEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset'
  },
  'glVertexArrayParameteriAPPLE' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glVertexArrayParameteriAPPLE',
    'feature' => 'GL_APPLE_vertex_array_range',
    'glewImpl' => '__glewVertexArrayParameteriAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint param'
  },
  'glVertexArrayRangeAPPLE' => {
    'argdata' => [
      [
        'length',
        'GLsizei '
      ],
      [
        'pointer',
        'void *'
      ]
    ],
    'binding_name' => 'glVertexArrayRangeAPPLE_c',
    'feature' => 'GL_APPLE_vertex_array_range',
    'glewImpl' => '__glewVertexArrayRangeAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei length, void *pointer'
  },
  'glVertexArrayRangeNV' => {
    'argdata' => [
      [
        'length',
        'GLsizei '
      ],
      [
        'pointer',
        'void *'
      ]
    ],
    'binding_name' => 'glVertexArrayRangeNV_c',
    'feature' => 'GL_NV_vertex_array_range',
    'glewImpl' => '__glewVertexArrayRangeNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsizei length, void *pointer'
  },
  'glVertexArraySecondaryColorOffsetEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'offset',
        'GLintptr '
      ]
    ],
    'binding_name' => 'glVertexArraySecondaryColorOffsetEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewVertexArraySecondaryColorOffsetEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset'
  },
  'glVertexArrayTexCoordOffsetEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'offset',
        'GLintptr '
      ]
    ],
    'binding_name' => 'glVertexArrayTexCoordOffsetEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewVertexArrayTexCoordOffsetEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset'
  },
  'glVertexArrayVertexAttribBindingEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'attribindex',
        'GLuint '
      ],
      [
        'bindingindex',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexArrayVertexAttribBindingEXT',
    'feature' => 'GL_ARB_vertex_attrib_binding',
    'glewImpl' => '__glewVertexArrayVertexAttribBindingEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint attribindex, GLuint bindingindex'
  },
  'glVertexArrayVertexAttribDivisorEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'divisor',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexArrayVertexAttribDivisorEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewVertexArrayVertexAttribDivisorEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint index, GLuint divisor'
  },
  'glVertexArrayVertexAttribFormatEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'attribindex',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'normalized',
        'GLboolean '
      ],
      [
        'relativeoffset',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexArrayVertexAttribFormatEXT',
    'feature' => 'GL_ARB_vertex_attrib_binding',
    'glewImpl' => '__glewVertexArrayVertexAttribFormatEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset'
  },
  'glVertexArrayVertexAttribIFormatEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'attribindex',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'relativeoffset',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexArrayVertexAttribIFormatEXT',
    'feature' => 'GL_ARB_vertex_attrib_binding',
    'glewImpl' => '__glewVertexArrayVertexAttribIFormatEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset'
  },
  'glVertexArrayVertexAttribIOffsetEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'offset',
        'GLintptr '
      ]
    ],
    'binding_name' => 'glVertexArrayVertexAttribIOffsetEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewVertexArrayVertexAttribIOffsetEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset'
  },
  'glVertexArrayVertexAttribLFormatEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'attribindex',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'relativeoffset',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexArrayVertexAttribLFormatEXT',
    'feature' => 'GL_ARB_vertex_attrib_binding',
    'glewImpl' => '__glewVertexArrayVertexAttribLFormatEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset'
  },
  'glVertexArrayVertexAttribLOffsetEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'offset',
        'GLintptr '
      ]
    ],
    'binding_name' => 'glVertexArrayVertexAttribLOffsetEXT',
    'feature' => 'GL_EXT_vertex_attrib_64bit',
    'glewImpl' => '__glewVertexArrayVertexAttribLOffsetEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset'
  },
  'glVertexArrayVertexAttribOffsetEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'index',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'normalized',
        'GLboolean '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'offset',
        'GLintptr '
      ]
    ],
    'binding_name' => 'glVertexArrayVertexAttribOffsetEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewVertexArrayVertexAttribOffsetEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset'
  },
  'glVertexArrayVertexBindingDivisorEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'bindingindex',
        'GLuint '
      ],
      [
        'divisor',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexArrayVertexBindingDivisorEXT',
    'feature' => 'GL_ARB_vertex_attrib_binding',
    'glewImpl' => '__glewVertexArrayVertexBindingDivisorEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint bindingindex, GLuint divisor'
  },
  'glVertexArrayVertexBuffer' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'bindingindex',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLintptr '
      ],
      [
        'stride',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glVertexArrayVertexBuffer',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewVertexArrayVertexBuffer',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride'
  },
  'glVertexArrayVertexBuffers' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'first',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'buffers',
        'const GLuint* '
      ],
      [
        'offsets',
        'const GLintptr *'
      ],
      [
        'strides',
        'const GLsizei *'
      ]
    ],
    'binding_name' => 'glVertexArrayVertexBuffers_c',
    'feature' => 'GL_ARB_direct_state_access',
    'glewImpl' => '__glewVertexArrayVertexBuffers',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr *offsets, const GLsizei *strides'
  },
  'glVertexArrayVertexOffsetEXT' => {
    'argdata' => [
      [
        'vaobj',
        'GLuint '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'offset',
        'GLintptr '
      ]
    ],
    'binding_name' => 'glVertexArrayVertexOffsetEXT',
    'feature' => 'GL_EXT_direct_state_access',
    'glewImpl' => '__glewVertexArrayVertexOffsetEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset'
  },
  'glVertexAttrib1d' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertexAttrib1d',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib1d',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLdouble x'
  },
  'glVertexAttrib1dARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertexAttrib1dARB',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib1dARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLdouble x'
  },
  'glVertexAttrib1dNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertexAttrib1dNV',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib1dNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLdouble x'
  },
  'glVertexAttrib1dv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glVertexAttrib1dv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib1dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLdouble* v'
  },
  'glVertexAttrib1dvARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glVertexAttrib1dvARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib1dvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLdouble* v'
  },
  'glVertexAttrib1dvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glVertexAttrib1dvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib1dvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLdouble* v'
  },
  'glVertexAttrib1f' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glVertexAttrib1f',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib1f',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLfloat x'
  },
  'glVertexAttrib1fARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glVertexAttrib1fARB',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib1fARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLfloat x'
  },
  'glVertexAttrib1fNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glVertexAttrib1fNV',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib1fNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLfloat x'
  },
  'glVertexAttrib1fv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glVertexAttrib1fv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib1fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLfloat* v'
  },
  'glVertexAttrib1fvARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glVertexAttrib1fvARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib1fvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLfloat* v'
  },
  'glVertexAttrib1fvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glVertexAttrib1fvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib1fvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLfloat* v'
  },
  'glVertexAttrib1hNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLhalf '
      ]
    ],
    'binding_name' => 'glVertexAttrib1hNV',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewVertexAttrib1hNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLhalf x'
  },
  'glVertexAttrib1hvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLhalf* '
      ]
    ],
    'binding_name' => 'glVertexAttrib1hvNV_c',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewVertexAttrib1hvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLhalf* v'
  },
  'glVertexAttrib1s' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLshort '
      ]
    ],
    'binding_name' => 'glVertexAttrib1s',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib1s',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLshort x'
  },
  'glVertexAttrib1sARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLshort '
      ]
    ],
    'binding_name' => 'glVertexAttrib1sARB',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib1sARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLshort x'
  },
  'glVertexAttrib1sNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLshort '
      ]
    ],
    'binding_name' => 'glVertexAttrib1sNV',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib1sNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLshort x'
  },
  'glVertexAttrib1sv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLshort* '
      ]
    ],
    'binding_name' => 'glVertexAttrib1sv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib1sv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLshort* v'
  },
  'glVertexAttrib1svARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLshort* '
      ]
    ],
    'binding_name' => 'glVertexAttrib1svARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib1svARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLshort* v'
  },
  'glVertexAttrib1svNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLshort* '
      ]
    ],
    'binding_name' => 'glVertexAttrib1svNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib1svNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLshort* v'
  },
  'glVertexAttrib2d' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertexAttrib2d',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib2d',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLdouble x, GLdouble y'
  },
  'glVertexAttrib2dARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertexAttrib2dARB',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib2dARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLdouble x, GLdouble y'
  },
  'glVertexAttrib2dNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertexAttrib2dNV',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib2dNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLdouble x, GLdouble y'
  },
  'glVertexAttrib2dv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glVertexAttrib2dv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib2dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLdouble* v'
  },
  'glVertexAttrib2dvARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glVertexAttrib2dvARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib2dvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLdouble* v'
  },
  'glVertexAttrib2dvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glVertexAttrib2dvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib2dvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLdouble* v'
  },
  'glVertexAttrib2f' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glVertexAttrib2f',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib2f',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLfloat x, GLfloat y'
  },
  'glVertexAttrib2fARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glVertexAttrib2fARB',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib2fARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLfloat x, GLfloat y'
  },
  'glVertexAttrib2fNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glVertexAttrib2fNV',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib2fNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLfloat x, GLfloat y'
  },
  'glVertexAttrib2fv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glVertexAttrib2fv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib2fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLfloat* v'
  },
  'glVertexAttrib2fvARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glVertexAttrib2fvARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib2fvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLfloat* v'
  },
  'glVertexAttrib2fvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glVertexAttrib2fvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib2fvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLfloat* v'
  },
  'glVertexAttrib2hNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLhalf '
      ],
      [
        'y',
        'GLhalf '
      ]
    ],
    'binding_name' => 'glVertexAttrib2hNV',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewVertexAttrib2hNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLhalf x, GLhalf y'
  },
  'glVertexAttrib2hvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLhalf* '
      ]
    ],
    'binding_name' => 'glVertexAttrib2hvNV_c',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewVertexAttrib2hvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLhalf* v'
  },
  'glVertexAttrib2s' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ]
    ],
    'binding_name' => 'glVertexAttrib2s',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib2s',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLshort x, GLshort y'
  },
  'glVertexAttrib2sARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ]
    ],
    'binding_name' => 'glVertexAttrib2sARB',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib2sARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLshort x, GLshort y'
  },
  'glVertexAttrib2sNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ]
    ],
    'binding_name' => 'glVertexAttrib2sNV',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib2sNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLshort x, GLshort y'
  },
  'glVertexAttrib2sv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLshort* '
      ]
    ],
    'binding_name' => 'glVertexAttrib2sv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib2sv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLshort* v'
  },
  'glVertexAttrib2svARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLshort* '
      ]
    ],
    'binding_name' => 'glVertexAttrib2svARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib2svARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLshort* v'
  },
  'glVertexAttrib2svNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLshort* '
      ]
    ],
    'binding_name' => 'glVertexAttrib2svNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib2svNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLshort* v'
  },
  'glVertexAttrib3d' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertexAttrib3d',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib3d',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLdouble x, GLdouble y, GLdouble z'
  },
  'glVertexAttrib3dARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertexAttrib3dARB',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib3dARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLdouble x, GLdouble y, GLdouble z'
  },
  'glVertexAttrib3dNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertexAttrib3dNV',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib3dNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLdouble x, GLdouble y, GLdouble z'
  },
  'glVertexAttrib3dv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glVertexAttrib3dv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib3dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLdouble* v'
  },
  'glVertexAttrib3dvARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glVertexAttrib3dvARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib3dvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLdouble* v'
  },
  'glVertexAttrib3dvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glVertexAttrib3dvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib3dvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLdouble* v'
  },
  'glVertexAttrib3f' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glVertexAttrib3f',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib3f',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLfloat x, GLfloat y, GLfloat z'
  },
  'glVertexAttrib3fARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glVertexAttrib3fARB',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib3fARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLfloat x, GLfloat y, GLfloat z'
  },
  'glVertexAttrib3fNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glVertexAttrib3fNV',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib3fNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLfloat x, GLfloat y, GLfloat z'
  },
  'glVertexAttrib3fv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glVertexAttrib3fv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib3fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLfloat* v'
  },
  'glVertexAttrib3fvARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glVertexAttrib3fvARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib3fvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLfloat* v'
  },
  'glVertexAttrib3fvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glVertexAttrib3fvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib3fvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLfloat* v'
  },
  'glVertexAttrib3hNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLhalf '
      ],
      [
        'y',
        'GLhalf '
      ],
      [
        'z',
        'GLhalf '
      ]
    ],
    'binding_name' => 'glVertexAttrib3hNV',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewVertexAttrib3hNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLhalf x, GLhalf y, GLhalf z'
  },
  'glVertexAttrib3hvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLhalf* '
      ]
    ],
    'binding_name' => 'glVertexAttrib3hvNV_c',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewVertexAttrib3hvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLhalf* v'
  },
  'glVertexAttrib3s' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ],
      [
        'z',
        'GLshort '
      ]
    ],
    'binding_name' => 'glVertexAttrib3s',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib3s',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLshort x, GLshort y, GLshort z'
  },
  'glVertexAttrib3sARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ],
      [
        'z',
        'GLshort '
      ]
    ],
    'binding_name' => 'glVertexAttrib3sARB',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib3sARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLshort x, GLshort y, GLshort z'
  },
  'glVertexAttrib3sNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ],
      [
        'z',
        'GLshort '
      ]
    ],
    'binding_name' => 'glVertexAttrib3sNV',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib3sNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLshort x, GLshort y, GLshort z'
  },
  'glVertexAttrib3sv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLshort* '
      ]
    ],
    'binding_name' => 'glVertexAttrib3sv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib3sv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLshort* v'
  },
  'glVertexAttrib3svARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLshort* '
      ]
    ],
    'binding_name' => 'glVertexAttrib3svARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib3svARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLshort* v'
  },
  'glVertexAttrib3svNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLshort* '
      ]
    ],
    'binding_name' => 'glVertexAttrib3svNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib3svNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLshort* v'
  },
  'glVertexAttrib4Nbv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLbyte* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4Nbv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib4Nbv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLbyte* v'
  },
  'glVertexAttrib4NbvARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLbyte* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4NbvARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib4NbvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLbyte* v'
  },
  'glVertexAttrib4Niv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4Niv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib4Niv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLint* v'
  },
  'glVertexAttrib4NivARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4NivARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib4NivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLint* v'
  },
  'glVertexAttrib4Nsv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLshort* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4Nsv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib4Nsv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLshort* v'
  },
  'glVertexAttrib4NsvARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLshort* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4NsvARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib4NsvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLshort* v'
  },
  'glVertexAttrib4Nub' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLubyte '
      ],
      [
        'y',
        'GLubyte '
      ],
      [
        'z',
        'GLubyte '
      ],
      [
        'w',
        'GLubyte '
      ]
    ],
    'binding_name' => 'glVertexAttrib4Nub',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib4Nub',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w'
  },
  'glVertexAttrib4NubARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLubyte '
      ],
      [
        'y',
        'GLubyte '
      ],
      [
        'z',
        'GLubyte '
      ],
      [
        'w',
        'GLubyte '
      ]
    ],
    'binding_name' => 'glVertexAttrib4NubARB',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib4NubARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w'
  },
  'glVertexAttrib4Nubv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLubyte* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4Nubv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib4Nubv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLubyte* v'
  },
  'glVertexAttrib4NubvARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLubyte* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4NubvARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib4NubvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLubyte* v'
  },
  'glVertexAttrib4Nuiv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4Nuiv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib4Nuiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLuint* v'
  },
  'glVertexAttrib4NuivARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4NuivARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib4NuivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLuint* v'
  },
  'glVertexAttrib4Nusv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLushort* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4Nusv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib4Nusv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLushort* v'
  },
  'glVertexAttrib4NusvARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLushort* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4NusvARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib4NusvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLushort* v'
  },
  'glVertexAttrib4bv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLbyte* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4bv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib4bv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLbyte* v'
  },
  'glVertexAttrib4bvARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLbyte* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4bvARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib4bvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLbyte* v'
  },
  'glVertexAttrib4d' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ],
      [
        'w',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertexAttrib4d',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib4d',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w'
  },
  'glVertexAttrib4dARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ],
      [
        'w',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertexAttrib4dARB',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib4dARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w'
  },
  'glVertexAttrib4dNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ],
      [
        'w',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertexAttrib4dNV',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib4dNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w'
  },
  'glVertexAttrib4dv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4dv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib4dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLdouble* v'
  },
  'glVertexAttrib4dvARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4dvARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib4dvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLdouble* v'
  },
  'glVertexAttrib4dvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4dvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib4dvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLdouble* v'
  },
  'glVertexAttrib4f' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ],
      [
        'w',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glVertexAttrib4f',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib4f',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w'
  },
  'glVertexAttrib4fARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ],
      [
        'w',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glVertexAttrib4fARB',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib4fARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w'
  },
  'glVertexAttrib4fNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ],
      [
        'w',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glVertexAttrib4fNV',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib4fNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w'
  },
  'glVertexAttrib4fv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4fv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib4fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLfloat* v'
  },
  'glVertexAttrib4fvARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4fvARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib4fvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLfloat* v'
  },
  'glVertexAttrib4fvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4fvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib4fvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLfloat* v'
  },
  'glVertexAttrib4hNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLhalf '
      ],
      [
        'y',
        'GLhalf '
      ],
      [
        'z',
        'GLhalf '
      ],
      [
        'w',
        'GLhalf '
      ]
    ],
    'binding_name' => 'glVertexAttrib4hNV',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewVertexAttrib4hNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLhalf x, GLhalf y, GLhalf z, GLhalf w'
  },
  'glVertexAttrib4hvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLhalf* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4hvNV_c',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewVertexAttrib4hvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLhalf* v'
  },
  'glVertexAttrib4iv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4iv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib4iv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLint* v'
  },
  'glVertexAttrib4ivARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4ivARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib4ivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLint* v'
  },
  'glVertexAttrib4s' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ],
      [
        'z',
        'GLshort '
      ],
      [
        'w',
        'GLshort '
      ]
    ],
    'binding_name' => 'glVertexAttrib4s',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib4s',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLshort x, GLshort y, GLshort z, GLshort w'
  },
  'glVertexAttrib4sARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ],
      [
        'z',
        'GLshort '
      ],
      [
        'w',
        'GLshort '
      ]
    ],
    'binding_name' => 'glVertexAttrib4sARB',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib4sARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLshort x, GLshort y, GLshort z, GLshort w'
  },
  'glVertexAttrib4sNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ],
      [
        'z',
        'GLshort '
      ],
      [
        'w',
        'GLshort '
      ]
    ],
    'binding_name' => 'glVertexAttrib4sNV',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib4sNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLshort x, GLshort y, GLshort z, GLshort w'
  },
  'glVertexAttrib4sv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLshort* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4sv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib4sv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLshort* v'
  },
  'glVertexAttrib4svARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLshort* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4svARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib4svARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLshort* v'
  },
  'glVertexAttrib4svNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLshort* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4svNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib4svNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLshort* v'
  },
  'glVertexAttrib4ubNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLubyte '
      ],
      [
        'y',
        'GLubyte '
      ],
      [
        'z',
        'GLubyte '
      ],
      [
        'w',
        'GLubyte '
      ]
    ],
    'binding_name' => 'glVertexAttrib4ubNV',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib4ubNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w'
  },
  'glVertexAttrib4ubv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLubyte* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4ubv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib4ubv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLubyte* v'
  },
  'glVertexAttrib4ubvARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLubyte* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4ubvARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib4ubvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLubyte* v'
  },
  'glVertexAttrib4ubvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLubyte* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4ubvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttrib4ubvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLubyte* v'
  },
  'glVertexAttrib4uiv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4uiv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib4uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLuint* v'
  },
  'glVertexAttrib4uivARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4uivARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib4uivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLuint* v'
  },
  'glVertexAttrib4usv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLushort* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4usv_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttrib4usv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLushort* v'
  },
  'glVertexAttrib4usvARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLushort* '
      ]
    ],
    'binding_name' => 'glVertexAttrib4usvARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttrib4usvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLushort* v'
  },
  'glVertexAttribArrayObjectATI' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'normalized',
        'GLboolean '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'buffer',
        'GLuint '
      ],
      [
        'offset',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexAttribArrayObjectATI',
    'feature' => 'GL_ATI_vertex_attrib_array_object',
    'glewImpl' => '__glewVertexAttribArrayObjectATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset'
  },
  'glVertexAttribBinding' => {
    'argdata' => [
      [
        'attribindex',
        'GLuint '
      ],
      [
        'bindingindex',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexAttribBinding',
    'feature' => 'GL_ARB_vertex_attrib_binding',
    'glewImpl' => '__glewVertexAttribBinding',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint attribindex, GLuint bindingindex'
  },
  'glVertexAttribDivisor' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'divisor',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexAttribDivisor',
    'feature' => 'GL_VERSION_3_3',
    'glewImpl' => '__glewVertexAttribDivisor',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLuint divisor'
  },
  'glVertexAttribDivisorANGLE' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'divisor',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexAttribDivisorANGLE',
    'feature' => 'GL_ANGLE_instanced_arrays',
    'glewImpl' => '__glewVertexAttribDivisorANGLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLuint divisor'
  },
  'glVertexAttribDivisorARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'divisor',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexAttribDivisorARB',
    'feature' => 'GL_ARB_instanced_arrays',
    'glewImpl' => '__glewVertexAttribDivisorARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLuint divisor'
  },
  'glVertexAttribDivisorEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'divisor',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexAttribDivisorEXT',
    'feature' => 'GL_EXT_instanced_arrays',
    'glewImpl' => '__glewVertexAttribDivisorEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLuint divisor'
  },
  'glVertexAttribDivisorNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'divisor',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexAttribDivisorNV',
    'feature' => 'GL_NV_instanced_arrays',
    'glewImpl' => '__glewVertexAttribDivisorNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLuint divisor'
  },
  'glVertexAttribFormat' => {
    'argdata' => [
      [
        'attribindex',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'normalized',
        'GLboolean '
      ],
      [
        'relativeoffset',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexAttribFormat',
    'feature' => 'GL_ARB_vertex_attrib_binding',
    'glewImpl' => '__glewVertexAttribFormat',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset'
  },
  'glVertexAttribFormatNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'normalized',
        'GLboolean '
      ],
      [
        'stride',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glVertexAttribFormatNV',
    'feature' => 'GL_NV_vertex_buffer_unified_memory',
    'glewImpl' => '__glewVertexAttribFormatNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride'
  },
  'glVertexAttribI1i' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v0',
        'GLint '
      ]
    ],
    'binding_name' => 'glVertexAttribI1i',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewVertexAttribI1i',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLint v0'
  },
  'glVertexAttribI1iEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLint '
      ]
    ],
    'binding_name' => 'glVertexAttribI1iEXT',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewVertexAttribI1iEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLint x'
  },
  'glVertexAttribI1iv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v0',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glVertexAttribI1iv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewVertexAttribI1iv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLint* v0'
  },
  'glVertexAttribI1ivEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glVertexAttribI1ivEXT_c',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewVertexAttribI1ivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLint *v'
  },
  'glVertexAttribI1ui' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v0',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexAttribI1ui',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewVertexAttribI1ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLuint v0'
  },
  'glVertexAttribI1uiEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexAttribI1uiEXT',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewVertexAttribI1uiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLuint x'
  },
  'glVertexAttribI1uiv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v0',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glVertexAttribI1uiv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewVertexAttribI1uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLuint* v0'
  },
  'glVertexAttribI1uivEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLuint *'
      ]
    ],
    'binding_name' => 'glVertexAttribI1uivEXT_c',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewVertexAttribI1uivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLuint *v'
  },
  'glVertexAttribI2i' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v0',
        'GLint '
      ],
      [
        'v1',
        'GLint '
      ]
    ],
    'binding_name' => 'glVertexAttribI2i',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewVertexAttribI2i',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLint v0, GLint v1'
  },
  'glVertexAttribI2iEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ]
    ],
    'binding_name' => 'glVertexAttribI2iEXT',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewVertexAttribI2iEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLint x, GLint y'
  },
  'glVertexAttribI2iv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v0',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glVertexAttribI2iv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewVertexAttribI2iv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLint* v0'
  },
  'glVertexAttribI2ivEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glVertexAttribI2ivEXT_c',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewVertexAttribI2ivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLint *v'
  },
  'glVertexAttribI2ui' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v0',
        'GLuint '
      ],
      [
        'v1',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexAttribI2ui',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewVertexAttribI2ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLuint v0, GLuint v1'
  },
  'glVertexAttribI2uiEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLuint '
      ],
      [
        'y',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexAttribI2uiEXT',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewVertexAttribI2uiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLuint x, GLuint y'
  },
  'glVertexAttribI2uiv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v0',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glVertexAttribI2uiv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewVertexAttribI2uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLuint* v0'
  },
  'glVertexAttribI2uivEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLuint *'
      ]
    ],
    'binding_name' => 'glVertexAttribI2uivEXT_c',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewVertexAttribI2uivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLuint *v'
  },
  'glVertexAttribI3i' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v0',
        'GLint '
      ],
      [
        'v1',
        'GLint '
      ],
      [
        'v2',
        'GLint '
      ]
    ],
    'binding_name' => 'glVertexAttribI3i',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewVertexAttribI3i',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLint v0, GLint v1, GLint v2'
  },
  'glVertexAttribI3iEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'z',
        'GLint '
      ]
    ],
    'binding_name' => 'glVertexAttribI3iEXT',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewVertexAttribI3iEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLint x, GLint y, GLint z'
  },
  'glVertexAttribI3iv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v0',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glVertexAttribI3iv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewVertexAttribI3iv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLint* v0'
  },
  'glVertexAttribI3ivEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glVertexAttribI3ivEXT_c',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewVertexAttribI3ivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLint *v'
  },
  'glVertexAttribI3ui' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v0',
        'GLuint '
      ],
      [
        'v1',
        'GLuint '
      ],
      [
        'v2',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexAttribI3ui',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewVertexAttribI3ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLuint v0, GLuint v1, GLuint v2'
  },
  'glVertexAttribI3uiEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLuint '
      ],
      [
        'y',
        'GLuint '
      ],
      [
        'z',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexAttribI3uiEXT',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewVertexAttribI3uiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLuint x, GLuint y, GLuint z'
  },
  'glVertexAttribI3uiv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v0',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glVertexAttribI3uiv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewVertexAttribI3uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLuint* v0'
  },
  'glVertexAttribI3uivEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLuint *'
      ]
    ],
    'binding_name' => 'glVertexAttribI3uivEXT_c',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewVertexAttribI3uivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLuint *v'
  },
  'glVertexAttribI4bv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v0',
        'const GLbyte* '
      ]
    ],
    'binding_name' => 'glVertexAttribI4bv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewVertexAttribI4bv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLbyte* v0'
  },
  'glVertexAttribI4bvEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLbyte *'
      ]
    ],
    'binding_name' => 'glVertexAttribI4bvEXT_c',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewVertexAttribI4bvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLbyte *v'
  },
  'glVertexAttribI4i' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v0',
        'GLint '
      ],
      [
        'v1',
        'GLint '
      ],
      [
        'v2',
        'GLint '
      ],
      [
        'v3',
        'GLint '
      ]
    ],
    'binding_name' => 'glVertexAttribI4i',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewVertexAttribI4i',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLint v0, GLint v1, GLint v2, GLint v3'
  },
  'glVertexAttribI4iEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'z',
        'GLint '
      ],
      [
        'w',
        'GLint '
      ]
    ],
    'binding_name' => 'glVertexAttribI4iEXT',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewVertexAttribI4iEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLint x, GLint y, GLint z, GLint w'
  },
  'glVertexAttribI4iv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v0',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glVertexAttribI4iv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewVertexAttribI4iv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLint* v0'
  },
  'glVertexAttribI4ivEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glVertexAttribI4ivEXT_c',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewVertexAttribI4ivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLint *v'
  },
  'glVertexAttribI4sv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v0',
        'const GLshort* '
      ]
    ],
    'binding_name' => 'glVertexAttribI4sv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewVertexAttribI4sv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLshort* v0'
  },
  'glVertexAttribI4svEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glVertexAttribI4svEXT_c',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewVertexAttribI4svEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLshort *v'
  },
  'glVertexAttribI4ubv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v0',
        'const GLubyte* '
      ]
    ],
    'binding_name' => 'glVertexAttribI4ubv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewVertexAttribI4ubv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLubyte* v0'
  },
  'glVertexAttribI4ubvEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLubyte *'
      ]
    ],
    'binding_name' => 'glVertexAttribI4ubvEXT_c',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewVertexAttribI4ubvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLubyte *v'
  },
  'glVertexAttribI4ui' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v0',
        'GLuint '
      ],
      [
        'v1',
        'GLuint '
      ],
      [
        'v2',
        'GLuint '
      ],
      [
        'v3',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexAttribI4ui',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewVertexAttribI4ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLuint v0, GLuint v1, GLuint v2, GLuint v3'
  },
  'glVertexAttribI4uiEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLuint '
      ],
      [
        'y',
        'GLuint '
      ],
      [
        'z',
        'GLuint '
      ],
      [
        'w',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexAttribI4uiEXT',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewVertexAttribI4uiEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLuint x, GLuint y, GLuint z, GLuint w'
  },
  'glVertexAttribI4uiv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v0',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glVertexAttribI4uiv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewVertexAttribI4uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLuint* v0'
  },
  'glVertexAttribI4uivEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLuint *'
      ]
    ],
    'binding_name' => 'glVertexAttribI4uivEXT_c',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewVertexAttribI4uivEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLuint *v'
  },
  'glVertexAttribI4usv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v0',
        'const GLushort* '
      ]
    ],
    'binding_name' => 'glVertexAttribI4usv_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewVertexAttribI4usv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLushort* v0'
  },
  'glVertexAttribI4usvEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLushort *'
      ]
    ],
    'binding_name' => 'glVertexAttribI4usvEXT_c',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewVertexAttribI4usvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLushort *v'
  },
  'glVertexAttribIFormat' => {
    'argdata' => [
      [
        'attribindex',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'relativeoffset',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexAttribIFormat',
    'feature' => 'GL_ARB_vertex_attrib_binding',
    'glewImpl' => '__glewVertexAttribIFormat',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset'
  },
  'glVertexAttribIFormatNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glVertexAttribIFormatNV',
    'feature' => 'GL_NV_vertex_buffer_unified_memory',
    'glewImpl' => '__glewVertexAttribIFormatNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLint size, GLenum type, GLsizei stride'
  },
  'glVertexAttribIPointer' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'const void*'
      ]
    ],
    'binding_name' => 'glVertexAttribIPointer_c',
    'feature' => 'GL_VERSION_3_0',
    'glewImpl' => '__glewVertexAttribIPointer',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLint size, GLenum type, GLsizei stride, const void*pointer'
  },
  'glVertexAttribIPointerEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'const void *'
      ]
    ],
    'binding_name' => 'glVertexAttribIPointerEXT_c',
    'feature' => 'GL_EXT_gpu_shader4',
    'glewImpl' => '__glewVertexAttribIPointerEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer'
  },
  'glVertexAttribL1d' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertexAttribL1d',
    'feature' => 'GL_ARB_vertex_attrib_64bit',
    'glewImpl' => '__glewVertexAttribL1d',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLdouble x'
  },
  'glVertexAttribL1dEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertexAttribL1dEXT',
    'feature' => 'GL_EXT_vertex_attrib_64bit',
    'glewImpl' => '__glewVertexAttribL1dEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLdouble x'
  },
  'glVertexAttribL1dv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glVertexAttribL1dv_c',
    'feature' => 'GL_ARB_vertex_attrib_64bit',
    'glewImpl' => '__glewVertexAttribL1dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLdouble* v'
  },
  'glVertexAttribL1dvEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glVertexAttribL1dvEXT_c',
    'feature' => 'GL_EXT_vertex_attrib_64bit',
    'glewImpl' => '__glewVertexAttribL1dvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLdouble* v'
  },
  'glVertexAttribL1i64NV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLint64EXT '
      ]
    ],
    'binding_name' => 'glVertexAttribL1i64NV',
    'feature' => 'GL_NV_vertex_attrib_integer_64bit',
    'glewImpl' => '__glewVertexAttribL1i64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLint64EXT x'
  },
  'glVertexAttribL1i64vNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLint64EXT* '
      ]
    ],
    'binding_name' => 'glVertexAttribL1i64vNV_c',
    'feature' => 'GL_NV_vertex_attrib_integer_64bit',
    'glewImpl' => '__glewVertexAttribL1i64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLint64EXT* v'
  },
  'glVertexAttribL1ui64ARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLuint64EXT '
      ]
    ],
    'binding_name' => 'glVertexAttribL1ui64ARB',
    'feature' => 'GL_ARB_bindless_texture',
    'glewImpl' => '__glewVertexAttribL1ui64ARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLuint64EXT x'
  },
  'glVertexAttribL1ui64NV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLuint64EXT '
      ]
    ],
    'binding_name' => 'glVertexAttribL1ui64NV',
    'feature' => 'GL_NV_vertex_attrib_integer_64bit',
    'glewImpl' => '__glewVertexAttribL1ui64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLuint64EXT x'
  },
  'glVertexAttribL1ui64vARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLuint64EXT* '
      ]
    ],
    'binding_name' => 'glVertexAttribL1ui64vARB_c',
    'feature' => 'GL_ARB_bindless_texture',
    'glewImpl' => '__glewVertexAttribL1ui64vARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLuint64EXT* v'
  },
  'glVertexAttribL1ui64vNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLuint64EXT* '
      ]
    ],
    'binding_name' => 'glVertexAttribL1ui64vNV_c',
    'feature' => 'GL_NV_vertex_attrib_integer_64bit',
    'glewImpl' => '__glewVertexAttribL1ui64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLuint64EXT* v'
  },
  'glVertexAttribL2d' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertexAttribL2d',
    'feature' => 'GL_ARB_vertex_attrib_64bit',
    'glewImpl' => '__glewVertexAttribL2d',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLdouble x, GLdouble y'
  },
  'glVertexAttribL2dEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertexAttribL2dEXT',
    'feature' => 'GL_EXT_vertex_attrib_64bit',
    'glewImpl' => '__glewVertexAttribL2dEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLdouble x, GLdouble y'
  },
  'glVertexAttribL2dv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glVertexAttribL2dv_c',
    'feature' => 'GL_ARB_vertex_attrib_64bit',
    'glewImpl' => '__glewVertexAttribL2dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLdouble* v'
  },
  'glVertexAttribL2dvEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glVertexAttribL2dvEXT_c',
    'feature' => 'GL_EXT_vertex_attrib_64bit',
    'glewImpl' => '__glewVertexAttribL2dvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLdouble* v'
  },
  'glVertexAttribL2i64NV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLint64EXT '
      ],
      [
        'y',
        'GLint64EXT '
      ]
    ],
    'binding_name' => 'glVertexAttribL2i64NV',
    'feature' => 'GL_NV_vertex_attrib_integer_64bit',
    'glewImpl' => '__glewVertexAttribL2i64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLint64EXT x, GLint64EXT y'
  },
  'glVertexAttribL2i64vNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLint64EXT* '
      ]
    ],
    'binding_name' => 'glVertexAttribL2i64vNV_c',
    'feature' => 'GL_NV_vertex_attrib_integer_64bit',
    'glewImpl' => '__glewVertexAttribL2i64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLint64EXT* v'
  },
  'glVertexAttribL2ui64NV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLuint64EXT '
      ],
      [
        'y',
        'GLuint64EXT '
      ]
    ],
    'binding_name' => 'glVertexAttribL2ui64NV',
    'feature' => 'GL_NV_vertex_attrib_integer_64bit',
    'glewImpl' => '__glewVertexAttribL2ui64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLuint64EXT x, GLuint64EXT y'
  },
  'glVertexAttribL2ui64vNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLuint64EXT* '
      ]
    ],
    'binding_name' => 'glVertexAttribL2ui64vNV_c',
    'feature' => 'GL_NV_vertex_attrib_integer_64bit',
    'glewImpl' => '__glewVertexAttribL2ui64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLuint64EXT* v'
  },
  'glVertexAttribL3d' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertexAttribL3d',
    'feature' => 'GL_ARB_vertex_attrib_64bit',
    'glewImpl' => '__glewVertexAttribL3d',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLdouble x, GLdouble y, GLdouble z'
  },
  'glVertexAttribL3dEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertexAttribL3dEXT',
    'feature' => 'GL_EXT_vertex_attrib_64bit',
    'glewImpl' => '__glewVertexAttribL3dEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLdouble x, GLdouble y, GLdouble z'
  },
  'glVertexAttribL3dv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glVertexAttribL3dv_c',
    'feature' => 'GL_ARB_vertex_attrib_64bit',
    'glewImpl' => '__glewVertexAttribL3dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLdouble* v'
  },
  'glVertexAttribL3dvEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glVertexAttribL3dvEXT_c',
    'feature' => 'GL_EXT_vertex_attrib_64bit',
    'glewImpl' => '__glewVertexAttribL3dvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLdouble* v'
  },
  'glVertexAttribL3i64NV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLint64EXT '
      ],
      [
        'y',
        'GLint64EXT '
      ],
      [
        'z',
        'GLint64EXT '
      ]
    ],
    'binding_name' => 'glVertexAttribL3i64NV',
    'feature' => 'GL_NV_vertex_attrib_integer_64bit',
    'glewImpl' => '__glewVertexAttribL3i64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z'
  },
  'glVertexAttribL3i64vNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLint64EXT* '
      ]
    ],
    'binding_name' => 'glVertexAttribL3i64vNV_c',
    'feature' => 'GL_NV_vertex_attrib_integer_64bit',
    'glewImpl' => '__glewVertexAttribL3i64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLint64EXT* v'
  },
  'glVertexAttribL3ui64NV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLuint64EXT '
      ],
      [
        'y',
        'GLuint64EXT '
      ],
      [
        'z',
        'GLuint64EXT '
      ]
    ],
    'binding_name' => 'glVertexAttribL3ui64NV',
    'feature' => 'GL_NV_vertex_attrib_integer_64bit',
    'glewImpl' => '__glewVertexAttribL3ui64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z'
  },
  'glVertexAttribL3ui64vNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLuint64EXT* '
      ]
    ],
    'binding_name' => 'glVertexAttribL3ui64vNV_c',
    'feature' => 'GL_NV_vertex_attrib_integer_64bit',
    'glewImpl' => '__glewVertexAttribL3ui64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLuint64EXT* v'
  },
  'glVertexAttribL4d' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ],
      [
        'w',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertexAttribL4d',
    'feature' => 'GL_ARB_vertex_attrib_64bit',
    'glewImpl' => '__glewVertexAttribL4d',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w'
  },
  'glVertexAttribL4dEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ],
      [
        'w',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertexAttribL4dEXT',
    'feature' => 'GL_EXT_vertex_attrib_64bit',
    'glewImpl' => '__glewVertexAttribL4dEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w'
  },
  'glVertexAttribL4dv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glVertexAttribL4dv_c',
    'feature' => 'GL_ARB_vertex_attrib_64bit',
    'glewImpl' => '__glewVertexAttribL4dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLdouble* v'
  },
  'glVertexAttribL4dvEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glVertexAttribL4dvEXT_c',
    'feature' => 'GL_EXT_vertex_attrib_64bit',
    'glewImpl' => '__glewVertexAttribL4dvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLdouble* v'
  },
  'glVertexAttribL4i64NV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLint64EXT '
      ],
      [
        'y',
        'GLint64EXT '
      ],
      [
        'z',
        'GLint64EXT '
      ],
      [
        'w',
        'GLint64EXT '
      ]
    ],
    'binding_name' => 'glVertexAttribL4i64NV',
    'feature' => 'GL_NV_vertex_attrib_integer_64bit',
    'glewImpl' => '__glewVertexAttribL4i64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w'
  },
  'glVertexAttribL4i64vNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLint64EXT* '
      ]
    ],
    'binding_name' => 'glVertexAttribL4i64vNV_c',
    'feature' => 'GL_NV_vertex_attrib_integer_64bit',
    'glewImpl' => '__glewVertexAttribL4i64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLint64EXT* v'
  },
  'glVertexAttribL4ui64NV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLuint64EXT '
      ],
      [
        'y',
        'GLuint64EXT '
      ],
      [
        'z',
        'GLuint64EXT '
      ],
      [
        'w',
        'GLuint64EXT '
      ]
    ],
    'binding_name' => 'glVertexAttribL4ui64NV',
    'feature' => 'GL_NV_vertex_attrib_integer_64bit',
    'glewImpl' => '__glewVertexAttribL4ui64NV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w'
  },
  'glVertexAttribL4ui64vNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLuint64EXT* '
      ]
    ],
    'binding_name' => 'glVertexAttribL4ui64vNV_c',
    'feature' => 'GL_NV_vertex_attrib_integer_64bit',
    'glewImpl' => '__glewVertexAttribL4ui64vNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLuint64EXT* v'
  },
  'glVertexAttribLFormat' => {
    'argdata' => [
      [
        'attribindex',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'relativeoffset',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexAttribLFormat',
    'feature' => 'GL_ARB_vertex_attrib_binding',
    'glewImpl' => '__glewVertexAttribLFormat',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset'
  },
  'glVertexAttribLFormatNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glVertexAttribLFormatNV',
    'feature' => 'GL_NV_vertex_attrib_integer_64bit',
    'glewImpl' => '__glewVertexAttribLFormatNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLint size, GLenum type, GLsizei stride'
  },
  'glVertexAttribLPointer' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'const void* '
      ]
    ],
    'binding_name' => 'glVertexAttribLPointer_c',
    'feature' => 'GL_ARB_vertex_attrib_64bit',
    'glewImpl' => '__glewVertexAttribLPointer',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer'
  },
  'glVertexAttribLPointerEXT' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'const void *'
      ]
    ],
    'binding_name' => 'glVertexAttribLPointerEXT_c',
    'feature' => 'GL_EXT_vertex_attrib_64bit',
    'glewImpl' => '__glewVertexAttribLPointerEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer'
  },
  'glVertexAttribP1ui' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'normalized',
        'GLboolean '
      ],
      [
        'value',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexAttribP1ui',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewVertexAttribP1ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum type, GLboolean normalized, GLuint value'
  },
  'glVertexAttribP1uiv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'normalized',
        'GLboolean '
      ],
      [
        'value',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glVertexAttribP1uiv_c',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewVertexAttribP1uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum type, GLboolean normalized, const GLuint* value'
  },
  'glVertexAttribP2ui' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'normalized',
        'GLboolean '
      ],
      [
        'value',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexAttribP2ui',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewVertexAttribP2ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum type, GLboolean normalized, GLuint value'
  },
  'glVertexAttribP2uiv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'normalized',
        'GLboolean '
      ],
      [
        'value',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glVertexAttribP2uiv_c',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewVertexAttribP2uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum type, GLboolean normalized, const GLuint* value'
  },
  'glVertexAttribP3ui' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'normalized',
        'GLboolean '
      ],
      [
        'value',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexAttribP3ui',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewVertexAttribP3ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum type, GLboolean normalized, GLuint value'
  },
  'glVertexAttribP3uiv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'normalized',
        'GLboolean '
      ],
      [
        'value',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glVertexAttribP3uiv_c',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewVertexAttribP3uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum type, GLboolean normalized, const GLuint* value'
  },
  'glVertexAttribP4ui' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'normalized',
        'GLboolean '
      ],
      [
        'value',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexAttribP4ui',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewVertexAttribP4ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum type, GLboolean normalized, GLuint value'
  },
  'glVertexAttribP4uiv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'normalized',
        'GLboolean '
      ],
      [
        'value',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glVertexAttribP4uiv_c',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewVertexAttribP4uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum type, GLboolean normalized, const GLuint* value'
  },
  'glVertexAttribParameteriAMD' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glVertexAttribParameteriAMD',
    'feature' => 'GL_AMD_interleaved_elements',
    'glewImpl' => '__glewVertexAttribParameteriAMD',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum pname, GLint param'
  },
  'glVertexAttribPointer' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'normalized',
        'GLboolean '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'const void* '
      ]
    ],
    'binding_name' => 'glVertexAttribPointer_c',
    'feature' => 'GL_VERSION_2_0',
    'glewImpl' => '__glewVertexAttribPointer',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer'
  },
  'glVertexAttribPointerARB' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'normalized',
        'GLboolean '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'const void *'
      ]
    ],
    'binding_name' => 'glVertexAttribPointerARB_c',
    'feature' => 'GL_ARB_vertex_program',
    'glewImpl' => '__glewVertexAttribPointerARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer'
  },
  'glVertexAttribPointerNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'const void *'
      ]
    ],
    'binding_name' => 'glVertexAttribPointerNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttribPointerNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer'
  },
  'glVertexAttribs1dvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'v',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glVertexAttribs1dvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttribs1dvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLsizei n, const GLdouble* v'
  },
  'glVertexAttribs1fvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'v',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glVertexAttribs1fvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttribs1fvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLsizei n, const GLfloat* v'
  },
  'glVertexAttribs1hvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'v',
        'const GLhalf* '
      ]
    ],
    'binding_name' => 'glVertexAttribs1hvNV_c',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewVertexAttribs1hvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLsizei n, const GLhalf* v'
  },
  'glVertexAttribs1svNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'v',
        'const GLshort* '
      ]
    ],
    'binding_name' => 'glVertexAttribs1svNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttribs1svNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLsizei n, const GLshort* v'
  },
  'glVertexAttribs2dvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'v',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glVertexAttribs2dvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttribs2dvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLsizei n, const GLdouble* v'
  },
  'glVertexAttribs2fvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'v',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glVertexAttribs2fvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttribs2fvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLsizei n, const GLfloat* v'
  },
  'glVertexAttribs2hvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'v',
        'const GLhalf* '
      ]
    ],
    'binding_name' => 'glVertexAttribs2hvNV_c',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewVertexAttribs2hvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLsizei n, const GLhalf* v'
  },
  'glVertexAttribs2svNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'v',
        'const GLshort* '
      ]
    ],
    'binding_name' => 'glVertexAttribs2svNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttribs2svNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLsizei n, const GLshort* v'
  },
  'glVertexAttribs3dvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'v',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glVertexAttribs3dvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttribs3dvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLsizei n, const GLdouble* v'
  },
  'glVertexAttribs3fvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'v',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glVertexAttribs3fvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttribs3fvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLsizei n, const GLfloat* v'
  },
  'glVertexAttribs3hvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'v',
        'const GLhalf* '
      ]
    ],
    'binding_name' => 'glVertexAttribs3hvNV_c',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewVertexAttribs3hvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLsizei n, const GLhalf* v'
  },
  'glVertexAttribs3svNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'v',
        'const GLshort* '
      ]
    ],
    'binding_name' => 'glVertexAttribs3svNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttribs3svNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLsizei n, const GLshort* v'
  },
  'glVertexAttribs4dvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'v',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glVertexAttribs4dvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttribs4dvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLsizei n, const GLdouble* v'
  },
  'glVertexAttribs4fvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'v',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glVertexAttribs4fvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttribs4fvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLsizei n, const GLfloat* v'
  },
  'glVertexAttribs4hvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'v',
        'const GLhalf* '
      ]
    ],
    'binding_name' => 'glVertexAttribs4hvNV_c',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewVertexAttribs4hvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLsizei n, const GLhalf* v'
  },
  'glVertexAttribs4svNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'v',
        'const GLshort* '
      ]
    ],
    'binding_name' => 'glVertexAttribs4svNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttribs4svNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLsizei n, const GLshort* v'
  },
  'glVertexAttribs4ubvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'n',
        'GLsizei '
      ],
      [
        'v',
        'const GLubyte* '
      ]
    ],
    'binding_name' => 'glVertexAttribs4ubvNV_c',
    'feature' => 'GL_NV_vertex_program',
    'glewImpl' => '__glewVertexAttribs4ubvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLsizei n, const GLubyte* v'
  },
  'glVertexBindingDivisor' => {
    'argdata' => [
      [
        'bindingindex',
        'GLuint '
      ],
      [
        'divisor',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexBindingDivisor',
    'feature' => 'GL_ARB_vertex_attrib_binding',
    'glewImpl' => '__glewVertexBindingDivisor',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint bindingindex, GLuint divisor'
  },
  'glVertexBlendARB' => {
    'argdata' => [
      [
        'count',
        'GLint '
      ]
    ],
    'binding_name' => 'glVertexBlendARB',
    'feature' => 'GL_ARB_vertex_blend',
    'glewImpl' => '__glewVertexBlendARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint count'
  },
  'glVertexBlendEnvfATI' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glVertexBlendEnvfATI',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexBlendEnvfATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLfloat param'
  },
  'glVertexBlendEnviATI' => {
    'argdata' => [
      [
        'pname',
        'GLenum '
      ],
      [
        'param',
        'GLint '
      ]
    ],
    'binding_name' => 'glVertexBlendEnviATI',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexBlendEnviATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum pname, GLint param'
  },
  'glVertexFormatNV' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glVertexFormatNV',
    'feature' => 'GL_NV_vertex_buffer_unified_memory',
    'glewImpl' => '__glewVertexFormatNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLenum type, GLsizei stride'
  },
  'glVertexP2ui' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'value',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexP2ui',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewVertexP2ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLuint value'
  },
  'glVertexP2uiv' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'value',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glVertexP2uiv_c',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewVertexP2uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, const GLuint* value'
  },
  'glVertexP3ui' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'value',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexP3ui',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewVertexP3ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLuint value'
  },
  'glVertexP3uiv' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'value',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glVertexP3uiv_c',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewVertexP3uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, const GLuint* value'
  },
  'glVertexP4ui' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'value',
        'GLuint '
      ]
    ],
    'binding_name' => 'glVertexP4ui',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewVertexP4ui',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, GLuint value'
  },
  'glVertexP4uiv' => {
    'argdata' => [
      [
        'type',
        'GLenum '
      ],
      [
        'value',
        'const GLuint* '
      ]
    ],
    'binding_name' => 'glVertexP4uiv_c',
    'feature' => 'GL_ARB_vertex_type_2_10_10_10_rev',
    'glewImpl' => '__glewVertexP4uiv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum type, const GLuint* value'
  },
  'glVertexPointer' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'const void *'
      ]
    ],
    'binding_name' => 'glVertexPointer_c',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLenum type, GLsizei stride, const void *pointer'
  },
  'glVertexPointerEXT' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'pointer',
        'const void *'
      ]
    ],
    'binding_name' => 'glVertexPointerEXT_c',
    'feature' => 'GL_EXT_vertex_array',
    'glewImpl' => '__glewVertexPointerEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer'
  },
  'glVertexPointerListIBM' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLint '
      ],
      [
        'pointer',
        'const void** '
      ],
      [
        'ptrstride',
        'GLint '
      ]
    ],
    'binding_name' => 'glVertexPointerListIBM_c',
    'feature' => 'GL_IBM_vertex_array_lists',
    'glewImpl' => '__glewVertexPointerListIBM',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride'
  },
  'glVertexPointervINTEL' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'pointer',
        'const void** '
      ]
    ],
    'binding_name' => 'glVertexPointervINTEL_c',
    'feature' => 'GL_INTEL_parallel_arrays',
    'glewImpl' => '__glewVertexPointervINTEL',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLenum type, const void** pointer'
  },
  'glVertexStream1dATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'x',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertexStream1dATI',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream1dATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, GLdouble x'
  },
  'glVertexStream1dvATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'coords',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glVertexStream1dvATI_c',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream1dvATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, const GLdouble *coords'
  },
  'glVertexStream1fATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'x',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glVertexStream1fATI',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream1fATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, GLfloat x'
  },
  'glVertexStream1fvATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'coords',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glVertexStream1fvATI_c',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream1fvATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, const GLfloat *coords'
  },
  'glVertexStream1iATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'x',
        'GLint '
      ]
    ],
    'binding_name' => 'glVertexStream1iATI',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream1iATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, GLint x'
  },
  'glVertexStream1ivATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'coords',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glVertexStream1ivATI_c',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream1ivATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, const GLint *coords'
  },
  'glVertexStream1sATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'x',
        'GLshort '
      ]
    ],
    'binding_name' => 'glVertexStream1sATI',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream1sATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, GLshort x'
  },
  'glVertexStream1svATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'coords',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glVertexStream1svATI_c',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream1svATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, const GLshort *coords'
  },
  'glVertexStream2dATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertexStream2dATI',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream2dATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, GLdouble x, GLdouble y'
  },
  'glVertexStream2dvATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'coords',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glVertexStream2dvATI_c',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream2dvATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, const GLdouble *coords'
  },
  'glVertexStream2fATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glVertexStream2fATI',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream2fATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, GLfloat x, GLfloat y'
  },
  'glVertexStream2fvATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'coords',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glVertexStream2fvATI_c',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream2fvATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, const GLfloat *coords'
  },
  'glVertexStream2iATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ]
    ],
    'binding_name' => 'glVertexStream2iATI',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream2iATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, GLint x, GLint y'
  },
  'glVertexStream2ivATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'coords',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glVertexStream2ivATI_c',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream2ivATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, const GLint *coords'
  },
  'glVertexStream2sATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ]
    ],
    'binding_name' => 'glVertexStream2sATI',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream2sATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, GLshort x, GLshort y'
  },
  'glVertexStream2svATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'coords',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glVertexStream2svATI_c',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream2svATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, const GLshort *coords'
  },
  'glVertexStream3dATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertexStream3dATI',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream3dATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, GLdouble x, GLdouble y, GLdouble z'
  },
  'glVertexStream3dvATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'coords',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glVertexStream3dvATI_c',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream3dvATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, const GLdouble *coords'
  },
  'glVertexStream3fATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glVertexStream3fATI',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream3fATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, GLfloat x, GLfloat y, GLfloat z'
  },
  'glVertexStream3fvATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'coords',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glVertexStream3fvATI_c',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream3fvATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, const GLfloat *coords'
  },
  'glVertexStream3iATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'z',
        'GLint '
      ]
    ],
    'binding_name' => 'glVertexStream3iATI',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream3iATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, GLint x, GLint y, GLint z'
  },
  'glVertexStream3ivATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'coords',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glVertexStream3ivATI_c',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream3ivATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, const GLint *coords'
  },
  'glVertexStream3sATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ],
      [
        'z',
        'GLshort '
      ]
    ],
    'binding_name' => 'glVertexStream3sATI',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream3sATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, GLshort x, GLshort y, GLshort z'
  },
  'glVertexStream3svATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'coords',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glVertexStream3svATI_c',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream3svATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, const GLshort *coords'
  },
  'glVertexStream4dATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ],
      [
        'w',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glVertexStream4dATI',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream4dATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w'
  },
  'glVertexStream4dvATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'coords',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glVertexStream4dvATI_c',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream4dvATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, const GLdouble *coords'
  },
  'glVertexStream4fATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ],
      [
        'w',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glVertexStream4fATI',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream4fATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w'
  },
  'glVertexStream4fvATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'coords',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glVertexStream4fvATI_c',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream4fvATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, const GLfloat *coords'
  },
  'glVertexStream4iATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'z',
        'GLint '
      ],
      [
        'w',
        'GLint '
      ]
    ],
    'binding_name' => 'glVertexStream4iATI',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream4iATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, GLint x, GLint y, GLint z, GLint w'
  },
  'glVertexStream4ivATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'coords',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glVertexStream4ivATI_c',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream4ivATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, const GLint *coords'
  },
  'glVertexStream4sATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ],
      [
        'z',
        'GLshort '
      ],
      [
        'w',
        'GLshort '
      ]
    ],
    'binding_name' => 'glVertexStream4sATI',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream4sATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w'
  },
  'glVertexStream4svATI' => {
    'argdata' => [
      [
        'stream',
        'GLenum '
      ],
      [
        'coords',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glVertexStream4svATI_c',
    'feature' => 'GL_ATI_vertex_streams',
    'glewImpl' => '__glewVertexStream4svATI',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum stream, const GLshort *coords'
  },
  'glVertexWeightPointerEXT' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'void *'
      ]
    ],
    'binding_name' => 'glVertexWeightPointerEXT_c',
    'feature' => 'GL_EXT_vertex_weighting',
    'glewImpl' => '__glewVertexWeightPointerEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLenum type, GLsizei stride, void *pointer'
  },
  'glVertexWeightfEXT' => {
    'argdata' => [
      [
        'weight',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glVertexWeightfEXT',
    'feature' => 'GL_EXT_vertex_weighting',
    'glewImpl' => '__glewVertexWeightfEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat weight'
  },
  'glVertexWeightfvEXT' => {
    'argdata' => [
      [
        'weight',
        'GLfloat* '
      ]
    ],
    'binding_name' => 'glVertexWeightfvEXT_c',
    'feature' => 'GL_EXT_vertex_weighting',
    'glewImpl' => '__glewVertexWeightfvEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat* weight'
  },
  'glVertexWeighthNV' => {
    'argdata' => [
      [
        'weight',
        'GLhalf '
      ]
    ],
    'binding_name' => 'glVertexWeighthNV',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewVertexWeighthNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLhalf weight'
  },
  'glVertexWeighthvNV' => {
    'argdata' => [
      [
        'weight',
        'const GLhalf* '
      ]
    ],
    'binding_name' => 'glVertexWeighthvNV_c',
    'feature' => 'GL_NV_half_float',
    'glewImpl' => '__glewVertexWeighthvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLhalf* weight'
  },
  'glVideoCaptureNV' => {
    'argdata' => [
      [
        'video_capture_slot',
        'GLuint '
      ],
      [
        'sequence_num',
        'GLuint* '
      ],
      [
        'capture_time',
        'GLuint64EXT *'
      ]
    ],
    'binding_name' => 'glVideoCaptureNV_c',
    'feature' => 'GL_NV_video_capture',
    'glewImpl' => '__glewVideoCaptureNV',
    'glewtype' => 'fun',
    'restype' => 'GLenum',
    'signature' => 'GLuint video_capture_slot, GLuint* sequence_num, GLuint64EXT *capture_time'
  },
  'glVideoCaptureStreamParameterdvNV' => {
    'argdata' => [
      [
        'video_capture_slot',
        'GLuint '
      ],
      [
        'stream',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glVideoCaptureStreamParameterdvNV_c',
    'feature' => 'GL_NV_video_capture',
    'glewImpl' => '__glewVideoCaptureStreamParameterdvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble* params'
  },
  'glVideoCaptureStreamParameterfvNV' => {
    'argdata' => [
      [
        'video_capture_slot',
        'GLuint '
      ],
      [
        'stream',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glVideoCaptureStreamParameterfvNV_c',
    'feature' => 'GL_NV_video_capture',
    'glewImpl' => '__glewVideoCaptureStreamParameterfvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat* params'
  },
  'glVideoCaptureStreamParameterivNV' => {
    'argdata' => [
      [
        'video_capture_slot',
        'GLuint '
      ],
      [
        'stream',
        'GLuint '
      ],
      [
        'pname',
        'GLenum '
      ],
      [
        'params',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glVideoCaptureStreamParameterivNV_c',
    'feature' => 'GL_NV_video_capture',
    'glewImpl' => '__glewVideoCaptureStreamParameterivNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint* params'
  },
  'glViewport' => {
    'argdata' => [
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'width',
        'GLsizei '
      ],
      [
        'height',
        'GLsizei '
      ]
    ],
    'binding_name' => 'glViewport',
    'feature' => 'GL_VERSION_1_1',
    'glewImpl' => undef,
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint x, GLint y, GLsizei width, GLsizei height'
  },
  'glViewportArrayv' => {
    'argdata' => [
      [
        'first',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'v',
        'const GLfloat * '
      ]
    ],
    'binding_name' => 'glViewportArrayv_c',
    'feature' => 'GL_ARB_viewport_array',
    'glewImpl' => '__glewViewportArrayv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint first, GLsizei count, const GLfloat * v'
  },
  'glViewportArrayvNV' => {
    'argdata' => [
      [
        'first',
        'GLuint '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'v',
        'const GLfloat * '
      ]
    ],
    'binding_name' => 'glViewportArrayvNV_c',
    'feature' => 'GL_NV_viewport_array',
    'glewImpl' => '__glewViewportArrayvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint first, GLsizei count, const GLfloat * v'
  },
  'glViewportIndexedf' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'w',
        'GLfloat '
      ],
      [
        'h',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glViewportIndexedf',
    'feature' => 'GL_ARB_viewport_array',
    'glewImpl' => '__glewViewportIndexedf',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h'
  },
  'glViewportIndexedfNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'w',
        'GLfloat '
      ],
      [
        'h',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glViewportIndexedfNV',
    'feature' => 'GL_NV_viewport_array',
    'glewImpl' => '__glewViewportIndexedfNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h'
  },
  'glViewportIndexedfv' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLfloat * '
      ]
    ],
    'binding_name' => 'glViewportIndexedfv_c',
    'feature' => 'GL_ARB_viewport_array',
    'glewImpl' => '__glewViewportIndexedfv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLfloat * v'
  },
  'glViewportIndexedfvNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'v',
        'const GLfloat * '
      ]
    ],
    'binding_name' => 'glViewportIndexedfvNV_c',
    'feature' => 'GL_NV_viewport_array',
    'glewImpl' => '__glewViewportIndexedfvNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, const GLfloat * v'
  },
  'glViewportPositionWScaleNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'xcoeff',
        'GLfloat '
      ],
      [
        'ycoeff',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glViewportPositionWScaleNV',
    'feature' => 'GL_NV_clip_space_w_scaling',
    'glewImpl' => '__glewViewportPositionWScaleNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLfloat xcoeff, GLfloat ycoeff'
  },
  'glViewportSwizzleNV' => {
    'argdata' => [
      [
        'index',
        'GLuint '
      ],
      [
        'swizzlex',
        'GLenum '
      ],
      [
        'swizzley',
        'GLenum '
      ],
      [
        'swizzlez',
        'GLenum '
      ],
      [
        'swizzlew',
        'GLenum '
      ]
    ],
    'binding_name' => 'glViewportSwizzleNV',
    'feature' => 'GL_NV_viewport_swizzle',
    'glewImpl' => '__glewViewportSwizzleNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew'
  },
  'glWaitSemaphoreEXT' => {
    'argdata' => [
      [
        'semaphore',
        'GLuint '
      ],
      [
        'numBufferBarriers',
        'GLuint '
      ],
      [
        'buffers',
        'const GLuint* '
      ],
      [
        'numTextureBarriers',
        'GLuint '
      ],
      [
        'textures',
        'const GLuint *'
      ],
      [
        'srcLayouts',
        'const GLenum *'
      ]
    ],
    'binding_name' => 'glWaitSemaphoreEXT_c',
    'feature' => 'GL_EXT_semaphore',
    'glewImpl' => '__glewWaitSemaphoreEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint semaphore, GLuint numBufferBarriers, const GLuint* buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts'
  },
  'glWaitSync' => {
    'argdata' => [
      [
        'myGLsync',
        'GLsync '
      ],
      [
        'flags',
        'GLbitfield '
      ],
      [
        'timeout',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glWaitSync',
    'feature' => 'GL_ARB_sync',
    'glewImpl' => '__glewWaitSync',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsync GLsync,GLbitfield flags,GLuint64 timeout'
  },
  'glWaitSyncAPPLE' => {
    'argdata' => [
      [
        'myGLsync',
        'GLsync '
      ],
      [
        'flags',
        'GLbitfield '
      ],
      [
        'timeout',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glWaitSyncAPPLE',
    'feature' => 'GL_APPLE_sync',
    'glewImpl' => '__glewWaitSyncAPPLE',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLsync GLsync, GLbitfield flags, GLuint64 timeout'
  },
  'glWaitVkSemaphoreNV' => {
    'argdata' => [
      [
        'vkSemaphore',
        'GLuint64 '
      ]
    ],
    'binding_name' => 'glWaitVkSemaphoreNV',
    'feature' => 'GL_NV_draw_vulkan_image',
    'glewImpl' => '__glewWaitVkSemaphoreNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint64 vkSemaphore'
  },
  'glWeightPathsNV' => {
    'argdata' => [
      [
        'resultPath',
        'GLuint '
      ],
      [
        'numPaths',
        'GLsizei '
      ],
      [
        'paths',
        'const GLuint * '
      ],
      [
        'weights',
        'const GLfloat * '
      ]
    ],
    'binding_name' => 'glWeightPathsNV_c',
    'feature' => 'GL_NV_path_rendering',
    'glewImpl' => '__glewWeightPathsNV',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint resultPath, GLsizei numPaths, const GLuint paths[], const GLfloat weights[]'
  },
  'glWeightPointerARB' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'type',
        'GLenum '
      ],
      [
        'stride',
        'GLsizei '
      ],
      [
        'pointer',
        'void *'
      ]
    ],
    'binding_name' => 'glWeightPointerARB_c',
    'feature' => 'GL_ARB_vertex_blend',
    'glewImpl' => '__glewWeightPointerARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLenum type, GLsizei stride, void *pointer'
  },
  'glWeightbvARB' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'weights',
        'GLbyte *'
      ]
    ],
    'binding_name' => 'glWeightbvARB_c',
    'feature' => 'GL_ARB_vertex_blend',
    'glewImpl' => '__glewWeightbvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLbyte *weights'
  },
  'glWeightdvARB' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'weights',
        'GLdouble *'
      ]
    ],
    'binding_name' => 'glWeightdvARB_c',
    'feature' => 'GL_ARB_vertex_blend',
    'glewImpl' => '__glewWeightdvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLdouble *weights'
  },
  'glWeightfvARB' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'weights',
        'GLfloat *'
      ]
    ],
    'binding_name' => 'glWeightfvARB_c',
    'feature' => 'GL_ARB_vertex_blend',
    'glewImpl' => '__glewWeightfvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLfloat *weights'
  },
  'glWeightivARB' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'weights',
        'GLint *'
      ]
    ],
    'binding_name' => 'glWeightivARB_c',
    'feature' => 'GL_ARB_vertex_blend',
    'glewImpl' => '__glewWeightivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLint *weights'
  },
  'glWeightsvARB' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'weights',
        'GLshort *'
      ]
    ],
    'binding_name' => 'glWeightsvARB_c',
    'feature' => 'GL_ARB_vertex_blend',
    'glewImpl' => '__glewWeightsvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLshort *weights'
  },
  'glWeightubvARB' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'weights',
        'GLubyte *'
      ]
    ],
    'binding_name' => 'glWeightubvARB_c',
    'feature' => 'GL_ARB_vertex_blend',
    'glewImpl' => '__glewWeightubvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLubyte *weights'
  },
  'glWeightuivARB' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'weights',
        'GLuint *'
      ]
    ],
    'binding_name' => 'glWeightuivARB_c',
    'feature' => 'GL_ARB_vertex_blend',
    'glewImpl' => '__glewWeightuivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLuint *weights'
  },
  'glWeightusvARB' => {
    'argdata' => [
      [
        'size',
        'GLint '
      ],
      [
        'weights',
        'GLushort *'
      ]
    ],
    'binding_name' => 'glWeightusvARB_c',
    'feature' => 'GL_ARB_vertex_blend',
    'glewImpl' => '__glewWeightusvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint size, GLushort *weights'
  },
  'glWindowPos2d' => {
    'argdata' => [
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glWindowPos2d',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewWindowPos2d',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble x, GLdouble y'
  },
  'glWindowPos2dARB' => {
    'argdata' => [
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glWindowPos2dARB',
    'feature' => 'GL_ARB_window_pos',
    'glewImpl' => '__glewWindowPos2dARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble x, GLdouble y'
  },
  'glWindowPos2dMESA' => {
    'argdata' => [
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glWindowPos2dMESA',
    'feature' => 'GL_MESA_window_pos',
    'glewImpl' => '__glewWindowPos2dMESA',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble x, GLdouble y'
  },
  'glWindowPos2dv' => {
    'argdata' => [
      [
        'p',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glWindowPos2dv_c',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewWindowPos2dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble *p'
  },
  'glWindowPos2dvARB' => {
    'argdata' => [
      [
        'p',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glWindowPos2dvARB_c',
    'feature' => 'GL_ARB_window_pos',
    'glewImpl' => '__glewWindowPos2dvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble* p'
  },
  'glWindowPos2dvMESA' => {
    'argdata' => [
      [
        'p',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glWindowPos2dvMESA_c',
    'feature' => 'GL_MESA_window_pos',
    'glewImpl' => '__glewWindowPos2dvMESA',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble* p'
  },
  'glWindowPos2f' => {
    'argdata' => [
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glWindowPos2f',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewWindowPos2f',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat x, GLfloat y'
  },
  'glWindowPos2fARB' => {
    'argdata' => [
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glWindowPos2fARB',
    'feature' => 'GL_ARB_window_pos',
    'glewImpl' => '__glewWindowPos2fARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat x, GLfloat y'
  },
  'glWindowPos2fMESA' => {
    'argdata' => [
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glWindowPos2fMESA',
    'feature' => 'GL_MESA_window_pos',
    'glewImpl' => '__glewWindowPos2fMESA',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat x, GLfloat y'
  },
  'glWindowPos2fv' => {
    'argdata' => [
      [
        'p',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glWindowPos2fv_c',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewWindowPos2fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat *p'
  },
  'glWindowPos2fvARB' => {
    'argdata' => [
      [
        'p',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glWindowPos2fvARB_c',
    'feature' => 'GL_ARB_window_pos',
    'glewImpl' => '__glewWindowPos2fvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat* p'
  },
  'glWindowPos2fvMESA' => {
    'argdata' => [
      [
        'p',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glWindowPos2fvMESA_c',
    'feature' => 'GL_MESA_window_pos',
    'glewImpl' => '__glewWindowPos2fvMESA',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat* p'
  },
  'glWindowPos2i' => {
    'argdata' => [
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ]
    ],
    'binding_name' => 'glWindowPos2i',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewWindowPos2i',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint x, GLint y'
  },
  'glWindowPos2iARB' => {
    'argdata' => [
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ]
    ],
    'binding_name' => 'glWindowPos2iARB',
    'feature' => 'GL_ARB_window_pos',
    'glewImpl' => '__glewWindowPos2iARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint x, GLint y'
  },
  'glWindowPos2iMESA' => {
    'argdata' => [
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ]
    ],
    'binding_name' => 'glWindowPos2iMESA',
    'feature' => 'GL_MESA_window_pos',
    'glewImpl' => '__glewWindowPos2iMESA',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint x, GLint y'
  },
  'glWindowPos2iv' => {
    'argdata' => [
      [
        'p',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glWindowPos2iv_c',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewWindowPos2iv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLint *p'
  },
  'glWindowPos2ivARB' => {
    'argdata' => [
      [
        'p',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glWindowPos2ivARB_c',
    'feature' => 'GL_ARB_window_pos',
    'glewImpl' => '__glewWindowPos2ivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLint* p'
  },
  'glWindowPos2ivMESA' => {
    'argdata' => [
      [
        'p',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glWindowPos2ivMESA_c',
    'feature' => 'GL_MESA_window_pos',
    'glewImpl' => '__glewWindowPos2ivMESA',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLint* p'
  },
  'glWindowPos2s' => {
    'argdata' => [
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ]
    ],
    'binding_name' => 'glWindowPos2s',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewWindowPos2s',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLshort x, GLshort y'
  },
  'glWindowPos2sARB' => {
    'argdata' => [
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ]
    ],
    'binding_name' => 'glWindowPos2sARB',
    'feature' => 'GL_ARB_window_pos',
    'glewImpl' => '__glewWindowPos2sARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLshort x, GLshort y'
  },
  'glWindowPos2sMESA' => {
    'argdata' => [
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ]
    ],
    'binding_name' => 'glWindowPos2sMESA',
    'feature' => 'GL_MESA_window_pos',
    'glewImpl' => '__glewWindowPos2sMESA',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLshort x, GLshort y'
  },
  'glWindowPos2sv' => {
    'argdata' => [
      [
        'p',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glWindowPos2sv_c',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewWindowPos2sv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLshort *p'
  },
  'glWindowPos2svARB' => {
    'argdata' => [
      [
        'p',
        'const GLshort* '
      ]
    ],
    'binding_name' => 'glWindowPos2svARB_c',
    'feature' => 'GL_ARB_window_pos',
    'glewImpl' => '__glewWindowPos2svARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLshort* p'
  },
  'glWindowPos2svMESA' => {
    'argdata' => [
      [
        'p',
        'const GLshort* '
      ]
    ],
    'binding_name' => 'glWindowPos2svMESA_c',
    'feature' => 'GL_MESA_window_pos',
    'glewImpl' => '__glewWindowPos2svMESA',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLshort* p'
  },
  'glWindowPos3d' => {
    'argdata' => [
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glWindowPos3d',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewWindowPos3d',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble x, GLdouble y, GLdouble z'
  },
  'glWindowPos3dARB' => {
    'argdata' => [
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glWindowPos3dARB',
    'feature' => 'GL_ARB_window_pos',
    'glewImpl' => '__glewWindowPos3dARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble x, GLdouble y, GLdouble z'
  },
  'glWindowPos3dMESA' => {
    'argdata' => [
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glWindowPos3dMESA',
    'feature' => 'GL_MESA_window_pos',
    'glewImpl' => '__glewWindowPos3dMESA',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble x, GLdouble y, GLdouble z'
  },
  'glWindowPos3dv' => {
    'argdata' => [
      [
        'p',
        'const GLdouble *'
      ]
    ],
    'binding_name' => 'glWindowPos3dv_c',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewWindowPos3dv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble *p'
  },
  'glWindowPos3dvARB' => {
    'argdata' => [
      [
        'p',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glWindowPos3dvARB_c',
    'feature' => 'GL_ARB_window_pos',
    'glewImpl' => '__glewWindowPos3dvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble* p'
  },
  'glWindowPos3dvMESA' => {
    'argdata' => [
      [
        'p',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glWindowPos3dvMESA_c',
    'feature' => 'GL_MESA_window_pos',
    'glewImpl' => '__glewWindowPos3dvMESA',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble* p'
  },
  'glWindowPos3f' => {
    'argdata' => [
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glWindowPos3f',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewWindowPos3f',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat x, GLfloat y, GLfloat z'
  },
  'glWindowPos3fARB' => {
    'argdata' => [
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glWindowPos3fARB',
    'feature' => 'GL_ARB_window_pos',
    'glewImpl' => '__glewWindowPos3fARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat x, GLfloat y, GLfloat z'
  },
  'glWindowPos3fMESA' => {
    'argdata' => [
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glWindowPos3fMESA',
    'feature' => 'GL_MESA_window_pos',
    'glewImpl' => '__glewWindowPos3fMESA',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat x, GLfloat y, GLfloat z'
  },
  'glWindowPos3fv' => {
    'argdata' => [
      [
        'p',
        'const GLfloat *'
      ]
    ],
    'binding_name' => 'glWindowPos3fv_c',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewWindowPos3fv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat *p'
  },
  'glWindowPos3fvARB' => {
    'argdata' => [
      [
        'p',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glWindowPos3fvARB_c',
    'feature' => 'GL_ARB_window_pos',
    'glewImpl' => '__glewWindowPos3fvARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat* p'
  },
  'glWindowPos3fvMESA' => {
    'argdata' => [
      [
        'p',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glWindowPos3fvMESA_c',
    'feature' => 'GL_MESA_window_pos',
    'glewImpl' => '__glewWindowPos3fvMESA',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat* p'
  },
  'glWindowPos3i' => {
    'argdata' => [
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'z',
        'GLint '
      ]
    ],
    'binding_name' => 'glWindowPos3i',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewWindowPos3i',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint x, GLint y, GLint z'
  },
  'glWindowPos3iARB' => {
    'argdata' => [
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'z',
        'GLint '
      ]
    ],
    'binding_name' => 'glWindowPos3iARB',
    'feature' => 'GL_ARB_window_pos',
    'glewImpl' => '__glewWindowPos3iARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint x, GLint y, GLint z'
  },
  'glWindowPos3iMESA' => {
    'argdata' => [
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'z',
        'GLint '
      ]
    ],
    'binding_name' => 'glWindowPos3iMESA',
    'feature' => 'GL_MESA_window_pos',
    'glewImpl' => '__glewWindowPos3iMESA',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint x, GLint y, GLint z'
  },
  'glWindowPos3iv' => {
    'argdata' => [
      [
        'p',
        'const GLint *'
      ]
    ],
    'binding_name' => 'glWindowPos3iv_c',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewWindowPos3iv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLint *p'
  },
  'glWindowPos3ivARB' => {
    'argdata' => [
      [
        'p',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glWindowPos3ivARB_c',
    'feature' => 'GL_ARB_window_pos',
    'glewImpl' => '__glewWindowPos3ivARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLint* p'
  },
  'glWindowPos3ivMESA' => {
    'argdata' => [
      [
        'p',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glWindowPos3ivMESA_c',
    'feature' => 'GL_MESA_window_pos',
    'glewImpl' => '__glewWindowPos3ivMESA',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLint* p'
  },
  'glWindowPos3s' => {
    'argdata' => [
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ],
      [
        'z',
        'GLshort '
      ]
    ],
    'binding_name' => 'glWindowPos3s',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewWindowPos3s',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLshort x, GLshort y, GLshort z'
  },
  'glWindowPos3sARB' => {
    'argdata' => [
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ],
      [
        'z',
        'GLshort '
      ]
    ],
    'binding_name' => 'glWindowPos3sARB',
    'feature' => 'GL_ARB_window_pos',
    'glewImpl' => '__glewWindowPos3sARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLshort x, GLshort y, GLshort z'
  },
  'glWindowPos3sMESA' => {
    'argdata' => [
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ],
      [
        'z',
        'GLshort '
      ]
    ],
    'binding_name' => 'glWindowPos3sMESA',
    'feature' => 'GL_MESA_window_pos',
    'glewImpl' => '__glewWindowPos3sMESA',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLshort x, GLshort y, GLshort z'
  },
  'glWindowPos3sv' => {
    'argdata' => [
      [
        'p',
        'const GLshort *'
      ]
    ],
    'binding_name' => 'glWindowPos3sv_c',
    'feature' => 'GL_VERSION_1_4',
    'glewImpl' => '__glewWindowPos3sv',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLshort *p'
  },
  'glWindowPos3svARB' => {
    'argdata' => [
      [
        'p',
        'const GLshort* '
      ]
    ],
    'binding_name' => 'glWindowPos3svARB_c',
    'feature' => 'GL_ARB_window_pos',
    'glewImpl' => '__glewWindowPos3svARB',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLshort* p'
  },
  'glWindowPos3svMESA' => {
    'argdata' => [
      [
        'p',
        'const GLshort* '
      ]
    ],
    'binding_name' => 'glWindowPos3svMESA_c',
    'feature' => 'GL_MESA_window_pos',
    'glewImpl' => '__glewWindowPos3svMESA',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLshort* p'
  },
  'glWindowPos4dMESA' => {
    'argdata' => [
      [
        'x',
        'GLdouble '
      ],
      [
        'y',
        'GLdouble '
      ],
      [
        'z',
        'GLdouble '
      ],
      [
        'w',
        'GLdouble '
      ]
    ],
    'binding_name' => 'glWindowPos4dMESA',
    'feature' => 'GL_MESA_window_pos',
    'glewImpl' => '__glewWindowPos4dMESA',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLdouble x, GLdouble y, GLdouble z, GLdouble w'
  },
  'glWindowPos4dvMESA' => {
    'argdata' => [
      [
        'p',
        'const GLdouble* '
      ]
    ],
    'binding_name' => 'glWindowPos4dvMESA_c',
    'feature' => 'GL_MESA_window_pos',
    'glewImpl' => '__glewWindowPos4dvMESA',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLdouble* p'
  },
  'glWindowPos4fMESA' => {
    'argdata' => [
      [
        'x',
        'GLfloat '
      ],
      [
        'y',
        'GLfloat '
      ],
      [
        'z',
        'GLfloat '
      ],
      [
        'w',
        'GLfloat '
      ]
    ],
    'binding_name' => 'glWindowPos4fMESA',
    'feature' => 'GL_MESA_window_pos',
    'glewImpl' => '__glewWindowPos4fMESA',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLfloat x, GLfloat y, GLfloat z, GLfloat w'
  },
  'glWindowPos4fvMESA' => {
    'argdata' => [
      [
        'p',
        'const GLfloat* '
      ]
    ],
    'binding_name' => 'glWindowPos4fvMESA_c',
    'feature' => 'GL_MESA_window_pos',
    'glewImpl' => '__glewWindowPos4fvMESA',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLfloat* p'
  },
  'glWindowPos4iMESA' => {
    'argdata' => [
      [
        'x',
        'GLint '
      ],
      [
        'y',
        'GLint '
      ],
      [
        'z',
        'GLint '
      ],
      [
        'w',
        'GLint '
      ]
    ],
    'binding_name' => 'glWindowPos4iMESA',
    'feature' => 'GL_MESA_window_pos',
    'glewImpl' => '__glewWindowPos4iMESA',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLint x, GLint y, GLint z, GLint w'
  },
  'glWindowPos4ivMESA' => {
    'argdata' => [
      [
        'p',
        'const GLint* '
      ]
    ],
    'binding_name' => 'glWindowPos4ivMESA_c',
    'feature' => 'GL_MESA_window_pos',
    'glewImpl' => '__glewWindowPos4ivMESA',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLint* p'
  },
  'glWindowPos4sMESA' => {
    'argdata' => [
      [
        'x',
        'GLshort '
      ],
      [
        'y',
        'GLshort '
      ],
      [
        'z',
        'GLshort '
      ],
      [
        'w',
        'GLshort '
      ]
    ],
    'binding_name' => 'glWindowPos4sMESA',
    'feature' => 'GL_MESA_window_pos',
    'glewImpl' => '__glewWindowPos4sMESA',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLshort x, GLshort y, GLshort z, GLshort w'
  },
  'glWindowPos4svMESA' => {
    'argdata' => [
      [
        'p',
        'const GLshort* '
      ]
    ],
    'binding_name' => 'glWindowPos4svMESA_c',
    'feature' => 'GL_MESA_window_pos',
    'glewImpl' => '__glewWindowPos4svMESA',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'const GLshort* p'
  },
  'glWindowRectanglesEXT' => {
    'argdata' => [
      [
        'mode',
        'GLenum '
      ],
      [
        'count',
        'GLsizei '
      ],
      [
        'box',
        'const GLint * '
      ]
    ],
    'binding_name' => 'glWindowRectanglesEXT_c',
    'feature' => 'GL_EXT_window_rectangles',
    'glewImpl' => '__glewWindowRectanglesEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLenum mode, GLsizei count, const GLint box[]'
  },
  'glWriteMaskEXT' => {
    'argdata' => [
      [
        'res',
        'GLuint '
      ],
      [
        'in',
        'GLuint '
      ],
      [
        'outX',
        'GLenum '
      ],
      [
        'outY',
        'GLenum '
      ],
      [
        'outZ',
        'GLenum '
      ],
      [
        'outW',
        'GLenum '
      ]
    ],
    'binding_name' => 'glWriteMaskEXT',
    'feature' => 'GL_EXT_vertex_shader',
    'glewImpl' => '__glewWriteMaskEXT',
    'glewtype' => 'fun',
    'restype' => 'void',
    'signature' => 'GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW'
  }
);
1;
